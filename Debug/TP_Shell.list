
TP_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a54  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08006c24  08006c24  00007c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007060  08007060  00009074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007060  08007060  00008060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007068  08007068  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007068  08007068  00008068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800706c  0800706c  0000806c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007070  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004600  20000074  080070e4  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20004674  080070e4  00009674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e65  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003534  00000000  00000000  0001cf09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00020440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5e  00000000  00000000  00021338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028606  00000000  00000000  00021e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013af6  00000000  00000000  0004a49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f105d  00000000  00000000  0005df92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014efef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044e8  00000000  00000000  0014f034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015351c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c0c 	.word	0x08006c0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006c0c 	.word	0x08006c0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000094 	.word	0x20000094
 800060c:	20000134 	.word	0x20000134

08000610 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_FREERTOS_Init+0x30>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fbae 	bl	8003d8e <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a03      	ldr	r2, [pc, #12]	@ (8000644 <MX_FREERTOS_Init+0x34>)
 8000636:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	08006c30 	.word	0x08006c30
 8000644:	20000090 	.word	0x20000090

08000648 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f003 fbe8 	bl	8003e26 <osDelay>
 8000656:	e7fb      	b.n	8000650 <StartDefaultTask+0x8>

08000658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	@ 0x28
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b2a      	ldr	r3, [pc, #168]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a29      	ldr	r2, [pc, #164]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <MX_GPIO_Init+0xc0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a23      	ldr	r2, [pc, #140]	@ (8000718 <MX_GPIO_Init+0xc0>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800069e:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2102      	movs	r1, #2
 80006d2:	4812      	ldr	r0, [pc, #72]	@ (800071c <MX_GPIO_Init+0xc4>)
 80006d4:	f001 f958 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006d8:	2302      	movs	r3, #2
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	480b      	ldr	r0, [pc, #44]	@ (800071c <MX_GPIO_Init+0xc4>)
 80006f0:	f000 ff9e 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80006f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_GPIO_Init+0xc4>)
 800070a:	f000 ff91 	bl	8001630 <HAL_GPIO_Init>

}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	@ 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40022000 	.word	0x40022000

08000720 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000728:	1d39      	adds	r1, r7, #4
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	2201      	movs	r2, #1
 8000730:	4803      	ldr	r0, [pc, #12]	@ (8000740 <__io_putchar+0x20>)
 8000732:	f002 fa5b 	bl	8002bec <HAL_UART_Transmit>

	return ch;
 8000736:	687b      	ldr	r3, [r7, #4]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000750 	.word	0x20000750

08000744 <sh_led>:


uint32_t led_delay_ms = 100;

int sh_led(h_shell_t *h_shell, int argc, char **argv)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
	static int bool = 1;
	int value = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

	if (argc == 2)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	2b02      	cmp	r3, #2
 8000758:	d110      	bne.n	800077c <sh_led+0x38>
	{
		value = atoi(argv[1]);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	3304      	adds	r3, #4
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f004 fff5 	bl	8005750 <atoi>
 8000766:	6178      	str	r0, [r7, #20]
		if (value >= 30)
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	2b1d      	cmp	r3, #29
 800076c:	dd06      	ble.n	800077c <sh_led+0x38>
		{
			led_delay_ms = value;
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	4a15      	ldr	r2, [pc, #84]	@ (80007c8 <sh_led+0x84>)
 8000772:	6013      	str	r3, [r2, #0]
			printf("Value of Led Task %d\r\n", value);
 8000774:	6979      	ldr	r1, [r7, #20]
 8000776:	4815      	ldr	r0, [pc, #84]	@ (80007cc <sh_led+0x88>)
 8000778:	f005 f934 	bl	80059e4 <iprintf>
		}
	}
	if (bool == 0 || (argc == 2 && value != 0))
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <sh_led+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <sh_led+0x4c>
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d10b      	bne.n	80007a2 <sh_led+0x5e>
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d008      	beq.n	80007a2 <sh_led+0x5e>
	{
		vTaskResume(LedTaskHandle);
 8000790:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <sh_led+0x90>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f003 ff97 	bl	80046c8 <vTaskResume>
		bool = 1;
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <sh_led+0x8c>)
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	e00c      	b.n	80007bc <sh_led+0x78>
	}
	else
	{
		vTaskSuspend(LedTaskHandle);
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <sh_led+0x90>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fec4 	bl	8004534 <vTaskSuspend>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2102      	movs	r1, #2
 80007b0:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <sh_led+0x94>)
 80007b2:	f001 f8e9 	bl	8001988 <HAL_GPIO_WritePin>
		bool = 0;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <sh_led+0x8c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
	}
	return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000000 	.word	0x20000000
 80007cc:	08006c4c 	.word	0x08006c4c
 80007d0:	20000004 	.word	0x20000004
 80007d4:	20000740 	.word	0x20000740
 80007d8:	40022000 	.word	0x40022000

080007dc <StartLedTask>:

void StartLedTask(void *argument) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	uint8_t ledState = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
	printf("Entering LedTask\n");
 80007e8:	4811      	ldr	r0, [pc, #68]	@ (8000830 <StartLedTask+0x54>)
 80007ea:	f005 f963 	bl	8005ab4 <puts>
	for (;;) {
		ledState = !ledState;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf14      	ite	ne
 8000802:	2301      	movne	r3, #1
 8000804:	2300      	moveq	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	2102      	movs	r1, #2
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <StartLedTask+0x58>)
 800080e:	f001 f8bb 	bl	8001988 <HAL_GPIO_WritePin>
		//printf("LED : %s\r\n", ledState ? "ON" : "OFF");
		vTaskDelay(pdMS_TO_TICKS(led_delay_ms));
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <StartLedTask+0x5c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800081a:	fb02 f303 	mul.w	r3, r2, r3
 800081e:	4a07      	ldr	r2, [pc, #28]	@ (800083c <StartLedTask+0x60>)
 8000820:	fba2 2303 	umull	r2, r3, r2, r3
 8000824:	099b      	lsrs	r3, r3, #6
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fe4c 	bl	80044c4 <vTaskDelay>
		ledState = !ledState;
 800082c:	bf00      	nop
 800082e:	e7de      	b.n	80007ee <StartLedTask+0x12>
 8000830:	08006c64 	.word	0x08006c64
 8000834:	40022000 	.word	0x40022000
 8000838:	20000000 	.word	0x20000000
 800083c:	10624dd3 	.word	0x10624dd3

08000840 <ShellTask>:
		}
	}
}

void ShellTask(void *argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		shell_run(&h_shell); // Appelle ta fonction qui lit rx_buffer et traite les commandes
 8000848:	4803      	ldr	r0, [pc, #12]	@ (8000858 <ShellTask+0x18>)
 800084a:	f000 fa47 	bl	8000cdc <shell_run>
		vTaskDelay(pdMS_TO_TICKS(10)); // Petit délai pour éviter de saturer la CPU
 800084e:	200a      	movs	r0, #10
 8000850:	f003 fe38 	bl	80044c4 <vTaskDelay>
		shell_run(&h_shell); // Appelle ta fonction qui lit rx_buffer et traite les commandes
 8000854:	bf00      	nop
 8000856:	e7f7      	b.n	8000848 <ShellTask+0x8>
 8000858:	20000334 	.word	0x20000334

0800085c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000862:	f000 fce4 	bl	800122e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000866:	f000 f859 	bl	800091c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800086a:	f7ff fef5 	bl	8000658 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800086e:	f000 fbfb 	bl	8001068 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	shell_init(&h_shell);
 8000872:	481f      	ldr	r0, [pc, #124]	@ (80008f0 <main+0x94>)
 8000874:	f000 f924 	bl	8000ac0 <shell_init>
	QueueTask = xQueueCreate(10, sizeof(uint32_t)); // Create the queue
 8000878:	2200      	movs	r2, #0
 800087a:	2104      	movs	r1, #4
 800087c:	200a      	movs	r0, #10
 800087e:	f003 fc07 	bl	8004090 <xQueueGenericCreate>
 8000882:	4603      	mov	r3, r0
 8000884:	4a1b      	ldr	r2, [pc, #108]	@ (80008f4 <main+0x98>)
 8000886:	6013      	str	r3, [r2, #0]
	if (QueueTask == NULL) {
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <main+0x98>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d104      	bne.n	800089a <main+0x3e>
		printf("Failed to create queue\r\n");
 8000890:	4819      	ldr	r0, [pc, #100]	@ (80008f8 <main+0x9c>)
 8000892:	f005 f90f 	bl	8005ab4 <puts>
		Error_Handler();
 8000896:	f000 f8ad 	bl	80009f4 <Error_Handler>
	}
	//xTaskCreate(TaskGive, "TaskGive", 128, NULL, tskIDLE_PRIORITY + 5, &TaskGiveHandle);
	//xTaskCreate(TaskTake, "TaskTake", 128, NULL, tskIDLE_PRIORITY + 5, &TaskTakeHandle);
	if (xTaskCreate(StartLedTask, "LedTask", 128, NULL, tskIDLE_PRIORITY + 5, &LedTaskHandle) != pdPASS ) {
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <main+0xa0>)
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	2305      	movs	r3, #5
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2300      	movs	r3, #0
 80008a4:	2280      	movs	r2, #128	@ 0x80
 80008a6:	4916      	ldr	r1, [pc, #88]	@ (8000900 <main+0xa4>)
 80008a8:	4816      	ldr	r0, [pc, #88]	@ (8000904 <main+0xa8>)
 80008aa:	f003 fcb9 	bl	8004220 <xTaskCreate>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d004      	beq.n	80008be <main+0x62>
		printf("Failed to create xTaskCreate LedTask\r\n");
 80008b4:	4814      	ldr	r0, [pc, #80]	@ (8000908 <main+0xac>)
 80008b6:	f005 f8fd 	bl	8005ab4 <puts>
		Error_Handler();
 80008ba:	f000 f89b 	bl	80009f4 <Error_Handler>
	}
	if (xTaskCreate(ShellTask, "ShellTask", 128, NULL, tskIDLE_PRIORITY + 5, &ShellTaskHandle) != pdPASS ) {
 80008be:	4b13      	ldr	r3, [pc, #76]	@ (800090c <main+0xb0>)
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	2305      	movs	r3, #5
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2300      	movs	r3, #0
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	4911      	ldr	r1, [pc, #68]	@ (8000910 <main+0xb4>)
 80008cc:	4811      	ldr	r0, [pc, #68]	@ (8000914 <main+0xb8>)
 80008ce:	f003 fca7 	bl	8004220 <xTaskCreate>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d004      	beq.n	80008e2 <main+0x86>
		printf("Failed to create xTaskCreate ShellTask\r\n");
 80008d8:	480f      	ldr	r0, [pc, #60]	@ (8000918 <main+0xbc>)
 80008da:	f005 f8eb 	bl	8005ab4 <puts>
		Error_Handler();
 80008de:	f000 f889 	bl	80009f4 <Error_Handler>
	}
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80008e2:	f7ff fe95 	bl	8000610 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80008e6:	f003 fa4b 	bl	8003d80 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80008ea:	bf00      	nop
 80008ec:	e7fd      	b.n	80008ea <main+0x8e>
 80008ee:	bf00      	nop
 80008f0:	20000334 	.word	0x20000334
 80008f4:	20000748 	.word	0x20000748
 80008f8:	08006d90 	.word	0x08006d90
 80008fc:	20000740 	.word	0x20000740
 8000900:	08006da8 	.word	0x08006da8
 8000904:	080007dd 	.word	0x080007dd
 8000908:	08006db0 	.word	0x08006db0
 800090c:	20000744 	.word	0x20000744
 8000910:	08006dd8 	.word	0x08006dd8
 8000914:	08000841 	.word	0x08000841
 8000918:	08006de4 	.word	0x08006de4

0800091c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	@ 0x50
 8000920:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2230      	movs	r2, #48	@ 0x30
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f005 f9d8 	bl	8005ce0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000940:	4b2a      	ldr	r3, [pc, #168]	@ (80009ec <SystemClock_Config+0xd0>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	4a29      	ldr	r2, [pc, #164]	@ (80009ec <SystemClock_Config+0xd0>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	@ 0x40
 800094c:	4b27      	ldr	r3, [pc, #156]	@ (80009ec <SystemClock_Config+0xd0>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000958:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <SystemClock_Config+0xd4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a24      	ldr	r2, [pc, #144]	@ (80009f0 <SystemClock_Config+0xd4>)
 800095e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <SystemClock_Config+0xd4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000970:	2302      	movs	r3, #2
 8000972:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000974:	2301      	movs	r3, #1
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000978:	2310      	movs	r3, #16
 800097a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097c:	2302      	movs	r3, #2
 800097e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000980:	2300      	movs	r3, #0
 8000982:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000984:	2308      	movs	r3, #8
 8000986:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000988:	23d8      	movs	r3, #216	@ 0xd8
 800098a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800098c:	2302      	movs	r3, #2
 800098e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000990:	2302      	movs	r3, #2
 8000992:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	4618      	mov	r0, r3
 800099a:	f001 f85f 	bl	8001a5c <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 80009a4:	f000 f826 	bl	80009f4 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009a8:	f001 f808 	bl	80019bc <HAL_PWREx_EnableOverDrive>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80009b2:	f000 f81f 	bl	80009f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	230f      	movs	r3, #15
 80009b8:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ba:	2302      	movs	r3, #2
 80009bc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009c6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009cc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2107      	movs	r1, #7
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fae5 	bl	8001fa4 <HAL_RCC_ClockConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0xc8>
	{
		Error_Handler();
 80009e0:	f000 f808 	bl	80009f4 <Error_Handler>
	}
}
 80009e4:	bf00      	nop
 80009e6:	3750      	adds	r7, #80	@ 0x50
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40007000 	.word	0x40007000

080009f4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <sh_useless_fonction>:
#include "shell.h"

#include <stdio.h>

static int sh_useless_fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <sh_useless_fonction+0x3c>)
 8000a14:	2180      	movs	r1, #128	@ 0x80
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 f854 	bl	8005ac4 <sniprintf>
 8000a1c:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000a2a:	6979      	ldr	r1, [r7, #20]
 8000a2c:	b289      	uxth	r1, r1
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4798      	blx	r3

	return 0;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	08006e0c 	.word	0x08006e0c

08000a40 <sh_help>:
	static int bool;
	if (bool == 0)
		vTaskSuspend(xTaskToSuspend);
}*/

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b089      	sub	sp, #36	@ 0x24
 8000a44:	af02      	add	r7, sp, #8
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	e029      	b.n	8000aa6 <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000a58:	68f9      	ldr	r1, [r7, #12]
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	440b      	add	r3, r1
 8000a66:	3304      	adds	r3, #4
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461c      	mov	r4, r3
 8000a6c:	68f9      	ldr	r1, [r7, #12]
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	4613      	mov	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	440b      	add	r3, r1
 8000a7a:	330c      	adds	r3, #12
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	4623      	mov	r3, r4
 8000a82:	4a0e      	ldr	r2, [pc, #56]	@ (8000abc <sh_help+0x7c>)
 8000a84:	2180      	movs	r1, #128	@ 0x80
 8000a86:	f005 f81d 	bl	8005ac4 <sniprintf>
 8000a8a:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000a98:	6939      	ldr	r1, [r7, #16]
 8000a9a:	b289      	uxth	r1, r1
 8000a9c:	4610      	mov	r0, r2
 8000a9e:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbd0      	blt.n	8000a52 <sh_help+0x12>
	}

	return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	371c      	adds	r7, #28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd90      	pop	{r4, r7, pc}
 8000aba:	bf00      	nop
 8000abc:	08006e2c 	.word	0x08006e2c

08000ac0 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	int size = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
	h_shell->drv.receive = drv_uart1_receive;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a23      	ldr	r2, [pc, #140]	@ (8000b5c <shell_init+0x9c>)
 8000ad0:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
	h_shell->drv.transmit = drv_uart1_transmit;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a22      	ldr	r2, [pc, #136]	@ (8000b60 <shell_init+0xa0>)
 8000ad8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

	h_shell->func_list_size = 0;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8000b64 <shell_init+0xa4>)
 8000aea:	2180      	movs	r1, #128	@ 0x80
 8000aec:	4618      	mov	r0, r3
 8000aee:	f004 ffe9 	bl	8005ac4 <sniprintf>
 8000af2:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000b00:	68f9      	ldr	r1, [r7, #12]
 8000b02:	b289      	uxth	r1, r1
 8000b04:	4610      	mov	r0, r2
 8000b06:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000b0e:	4a16      	ldr	r2, [pc, #88]	@ (8000b68 <shell_init+0xa8>)
 8000b10:	2180      	movs	r1, #128	@ 0x80
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 ffd6 	bl	8005ac4 <sniprintf>
 8000b18:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000b26:	68f9      	ldr	r1, [r7, #12]
 8000b28:	b289      	uxth	r1, r1
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <shell_init+0xac>)
 8000b30:	4a0f      	ldr	r2, [pc, #60]	@ (8000b70 <shell_init+0xb0>)
 8000b32:	2168      	movs	r1, #104	@ 0x68
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f000 f825 	bl	8000b84 <shell_add>
	shell_add(h_shell, 'f', sh_useless_fonction, "Une fonction inutile");
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <shell_init+0xb4>)
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b78 <shell_init+0xb8>)
 8000b3e:	2166      	movs	r1, #102	@ 0x66
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f000 f81f 	bl	8000b84 <shell_add>
	shell_add(h_shell, 'l', sh_led, "Enable/Disable LedTask and first param set the led Delay");
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <shell_init+0xbc>)
 8000b48:	4a0d      	ldr	r2, [pc, #52]	@ (8000b80 <shell_init+0xc0>)
 8000b4a:	216c      	movs	r1, #108	@ 0x6c
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f000 f819 	bl	8000b84 <shell_add>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	08000df9 	.word	0x08000df9
 8000b60:	08000e21 	.word	0x08000e21
 8000b64:	08006e38 	.word	0x08006e38
 8000b68:	08006e60 	.word	0x08006e60
 8000b6c:	08006e84 	.word	0x08006e84
 8000b70:	08000a41 	.word	0x08000a41
 8000b74:	08006e8c 	.word	0x08006e8c
 8000b78:	08000a01 	.word	0x08000a01
 8000b7c:	08006ea4 	.word	0x08006ea4
 8000b80:	08000745 	.word	0x08000745

08000b84 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	460b      	mov	r3, r1
 8000b92:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b9a:	dc27      	bgt.n	8000bec <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	68f9      	ldr	r1, [r7, #12]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	440b      	add	r3, r1
 8000bac:	3304      	adds	r3, #4
 8000bae:	7afa      	ldrb	r2, [r7, #11]
 8000bb0:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	68f9      	ldr	r1, [r7, #12]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	68f9      	ldr	r1, [r7, #12]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	330c      	adds	r3, #12
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	601a      	str	r2, [r3, #0]
		return 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	e001      	b.n	8000bf0 <shell_add+0x6c>
	}

	return -1;
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b090      	sub	sp, #64	@ 0x40
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000c0e:	2300      	movs	r3, #0
 8000c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c12:	e041      	b.n	8000c98 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000c18:	4613      	mov	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4413      	add	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	440b      	add	r3, r1
 8000c22:	3304      	adds	r3, #4
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d131      	bne.n	8000c92 <shell_exec+0x96>
			argc = 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c3a:	e013      	b.n	8000c64 <shell_exec+0x68>
				if(*p == ' ') {
 8000c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b20      	cmp	r3, #32
 8000c42:	d10c      	bne.n	8000c5e <shell_exec+0x62>
					*p = '\0';
 8000c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8000c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000c50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c52:	3201      	adds	r2, #1
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	3340      	adds	r3, #64	@ 0x40
 8000c58:	443b      	add	r3, r7
 8000c5a:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c60:	3301      	adds	r3, #1
 8000c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <shell_exec+0x76>
 8000c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	dde4      	ble.n	8000c3c <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000c76:	4613      	mov	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	4413      	add	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	440b      	add	r3, r1
 8000c80:	3308      	adds	r3, #8
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f107 020c 	add.w	r2, r7, #12
 8000c88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	4798      	blx	r3
 8000c8e:	4603      	mov	r3, r0
 8000c90:	e01d      	b.n	8000cce <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c94:	3301      	adds	r3, #1
 8000c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	dbb8      	blt.n	8000c14 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cac:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <shell_exec+0xdc>)
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	f004 ff08 	bl	8005ac4 <sniprintf>
 8000cb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000cc4:	b289      	uxth	r1, r1
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4798      	blx	r3
	return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3740      	adds	r7, #64	@ 0x40
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	08006ee0 	.word	0x08006ee0

08000cdc <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]


		h_shell->drv.transmit(prompt, 2);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	483c      	ldr	r0, [pc, #240]	@ (8000de8 <shell_run+0x10c>)
 8000cf6:	4798      	blx	r3
		reading = 1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]

		while(reading) {
 8000cfc:	e064      	b.n	8000dc8 <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8000d04:	f107 020b 	add.w	r2, r7, #11
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4610      	mov	r0, r2
 8000d0c:	4798      	blx	r3
			int size;

			switch (c) {
 8000d0e:	7afb      	ldrb	r3, [r7, #11]
 8000d10:	2b08      	cmp	r3, #8
 8000d12:	d036      	beq.n	8000d82 <shell_run+0xa6>
 8000d14:	2b0d      	cmp	r3, #13
 8000d16:	d141      	bne.n	8000d9c <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000d1e:	4a33      	ldr	r2, [pc, #204]	@ (8000dec <shell_run+0x110>)
 8000d20:	2180      	movs	r1, #128	@ 0x80
 8000d22:	4618      	mov	r0, r3
 8000d24:	f004 fece 	bl	8005ac4 <sniprintf>
 8000d28:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000d36:	68f9      	ldr	r1, [r7, #12]
 8000d38:	b289      	uxth	r1, r1
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1c5a      	adds	r2, r3, #1
 8000d42:	613a      	str	r2, [r7, #16]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	4413      	add	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8000d5a:	4a25      	ldr	r2, [pc, #148]	@ (8000df0 <shell_run+0x114>)
 8000d5c:	2180      	movs	r1, #128	@ 0x80
 8000d5e:	f004 feb1 	bl	8005ac4 <sniprintf>
 8000d62:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000d70:	68f9      	ldr	r1, [r7, #12]
 8000d72:	b289      	uxth	r1, r1
 8000d74:	4610      	mov	r0, r2
 8000d76:	4798      	blx	r3
				reading = 0;        //exit read loop
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
				break;
 8000d80:	e022      	b.n	8000dc8 <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	dd1e      	ble.n	8000dc6 <shell_run+0xea>
					pos--;          //remove it in buffer
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000d94:	2103      	movs	r1, #3
 8000d96:	4817      	ldr	r0, [pc, #92]	@ (8000df4 <shell_run+0x118>)
 8000d98:	4798      	blx	r3
				}
				break;
 8000d9a:	e014      	b.n	8000dc6 <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000da0:	dc12      	bgt.n	8000dc8 <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000da8:	f107 020b 	add.w	r2, r7, #11
 8000dac:	2101      	movs	r1, #1
 8000dae:	4610      	mov	r0, r2
 8000db0:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	613a      	str	r2, [r7, #16]
 8000db8:	7af9      	ldrb	r1, [r7, #11]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	460a      	mov	r2, r1
 8000dc0:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 8000dc4:	e000      	b.n	8000dc8 <shell_run+0xec>
				break;
 8000dc6:	bf00      	nop
		while(reading) {
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d197      	bne.n	8000cfe <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff10 	bl	8000bfc <shell_exec>

	return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	08006f10 	.word	0x08006f10
 8000dec:	08006ef8 	.word	0x08006ef8
 8000df0:	08006efc 	.word	0x08006efc
 8000df4:	08006f0c 	.word	0x08006f0c

08000df8 <drv_uart1_receive>:

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 8000e04:	887a      	ldrh	r2, [r7, #2]
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	4803      	ldr	r0, [pc, #12]	@ (8000e1c <drv_uart1_receive+0x24>)
 8000e0e:	f001 ff76 	bl	8002cfe <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000750 	.word	0x20000750

08000e20 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8000e2c:	887a      	ldrh	r2, [r7, #2]
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	4803      	ldr	r0, [pc, #12]	@ (8000e44 <drv_uart1_transmit+0x24>)
 8000e36:	f001 fed9 	bl	8002bec <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000750 	.word	0x20000750

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	4a10      	ldr	r2, [pc, #64]	@ (8000e94 <HAL_MspInit+0x4c>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <HAL_MspInit+0x4c>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <HAL_MspInit+0x4c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_MspInit+0x4c>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <HAL_MspInit+0x4c>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	210f      	movs	r1, #15
 8000e82:	f06f 0001 	mvn.w	r0, #1
 8000e86:	f000 fb0a 	bl	800149e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <NMI_Handler+0x4>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <MemManage_Handler+0x4>

08000eb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed2:	f000 f9e9 	bl	80012a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ed6:	f003 ffd9 	bl	8004e8c <xTaskGetSchedulerState>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d001      	beq.n	8000ee4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ee0:	f004 f9fa 	bl	80052d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <USART1_IRQHandler+0x10>)
 8000eee:	f001 ffcf 	bl	8002e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000750 	.word	0x20000750

08000efc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	e00a      	b.n	8000f24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f0e:	f3af 8000 	nop.w
 8000f12:	4601      	mov	r1, r0
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	60ba      	str	r2, [r7, #8]
 8000f1a:	b2ca      	uxtb	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbf0      	blt.n	8000f0e <_read+0x12>
  }

  return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e009      	b.n	8000f5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	60ba      	str	r2, [r7, #8]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fbe5 	bl	8000720 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbf1      	blt.n	8000f48 <_write+0x12>
  }
  return len;
 8000f64:	687b      	ldr	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <_close>:

int _close(int file)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f96:	605a      	str	r2, [r3, #4]
  return 0;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_isatty>:

int _isatty(int file)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	@ (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	@ (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	@ (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f004 ff16 	bl	8005e38 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	@ (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20050000 	.word	0x20050000
 8001038:	00000800 	.word	0x00000800
 800103c:	2000074c 	.word	0x2000074c
 8001040:	20004678 	.word	0x20004678

08001044 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <MX_USART1_UART_Init+0x58>)
 800106e:	4a15      	ldr	r2, [pc, #84]	@ (80010c4 <MX_USART1_UART_Init+0x5c>)
 8001070:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001072:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <MX_USART1_UART_Init+0x58>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <MX_USART1_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <MX_USART1_UART_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <MX_USART1_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <MX_USART1_UART_Init+0x58>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <MX_USART1_UART_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <MX_USART1_UART_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <MX_USART1_UART_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <MX_USART1_UART_Init+0x58>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <MX_USART1_UART_Init+0x58>)
 80010ac:	f001 fd50 	bl	8002b50 <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010b6:	f7ff fc9d 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000750 	.word	0x20000750
 80010c4:	40011000 	.word	0x40011000

080010c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0ac      	sub	sp, #176	@ 0xb0
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	2284      	movs	r2, #132	@ 0x84
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 fdf9 	bl	8005ce0 <memset>
  if(uartHandle->Instance==USART1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a36      	ldr	r2, [pc, #216]	@ (80011cc <HAL_UART_MspInit+0x104>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d164      	bne.n	80011c2 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010f8:	2340      	movs	r3, #64	@ 0x40
 80010fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010fc:	2300      	movs	r3, #0
 80010fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001100:	f107 0318 	add.w	r3, r7, #24
 8001104:	4618      	mov	r0, r3
 8001106:	f001 f933 	bl	8002370 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001110:	f7ff fc70 	bl	80009f4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001114:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <HAL_UART_MspInit+0x108>)
 8001116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001118:	4a2d      	ldr	r2, [pc, #180]	@ (80011d0 <HAL_UART_MspInit+0x108>)
 800111a:	f043 0310 	orr.w	r3, r3, #16
 800111e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001120:	4b2b      	ldr	r3, [pc, #172]	@ (80011d0 <HAL_UART_MspInit+0x108>)
 8001122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001124:	f003 0310 	and.w	r3, r3, #16
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	4b28      	ldr	r3, [pc, #160]	@ (80011d0 <HAL_UART_MspInit+0x108>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	4a27      	ldr	r2, [pc, #156]	@ (80011d0 <HAL_UART_MspInit+0x108>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	6313      	str	r3, [r2, #48]	@ 0x30
 8001138:	4b25      	ldr	r3, [pc, #148]	@ (80011d0 <HAL_UART_MspInit+0x108>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b22      	ldr	r3, [pc, #136]	@ (80011d0 <HAL_UART_MspInit+0x108>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	4a21      	ldr	r2, [pc, #132]	@ (80011d0 <HAL_UART_MspInit+0x108>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001150:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <HAL_UART_MspInit+0x108>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001174:	2307      	movs	r3, #7
 8001176:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800117e:	4619      	mov	r1, r3
 8001180:	4814      	ldr	r0, [pc, #80]	@ (80011d4 <HAL_UART_MspInit+0x10c>)
 8001182:	f000 fa55 	bl	8001630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001186:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800118a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011a0:	2307      	movs	r3, #7
 80011a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011aa:	4619      	mov	r1, r3
 80011ac:	480a      	ldr	r0, [pc, #40]	@ (80011d8 <HAL_UART_MspInit+0x110>)
 80011ae:	f000 fa3f 	bl	8001630 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2105      	movs	r1, #5
 80011b6:	2025      	movs	r0, #37	@ 0x25
 80011b8:	f000 f971 	bl	800149e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011bc:	2025      	movs	r0, #37	@ 0x25
 80011be:	f000 f98a 	bl	80014d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011c2:	bf00      	nop
 80011c4:	37b0      	adds	r7, #176	@ 0xb0
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40011000 	.word	0x40011000
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020000 	.word	0x40020000

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001214 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e0:	f7ff ff30 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e4:	480c      	ldr	r0, [pc, #48]	@ (8001218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011e6:	490d      	ldr	r1, [pc, #52]	@ (800121c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800120a:	f004 fe1b 	bl	8005e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff fb25 	bl	800085c <main>
  bx  lr    
 8001212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001220:	08007070 	.word	0x08007070
  ldr r2, =_sbss
 8001224:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001228:	20004674 	.word	0x20004674

0800122c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC_IRQHandler>

0800122e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001232:	2003      	movs	r0, #3
 8001234:	f000 f928 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001238:	200f      	movs	r0, #15
 800123a:	f000 f805 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123e:	f7ff fe03 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f943 	bl	80014f2 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f90b 	bl	800149e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	@ (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000010 	.word	0x20000010
 80012a4:	2000000c 	.word	0x2000000c

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000010 	.word	0x20000010
 80012cc:	200007d8 	.word	0x200007d8

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	200007d8 	.word	0x200007d8

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <__NVIC_SetPriorityGrouping+0x40>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	4313      	orrs	r3, r2
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <__NVIC_SetPriorityGrouping+0x40>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00
 800132c:	05fa0000 	.word	0x05fa0000

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4907      	ldr	r1, [pc, #28]	@ (8001384 <__NVIC_EnableIRQ+0x38>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	@ (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	@ (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	@ 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	@ 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff29 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff3e 	bl	8001330 <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff8e 	bl	80013dc <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5d 	bl	8001388 <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff31 	bl	800134c <__NVIC_EnableIRQ>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffa2 	bl	8001444 <SysTick_Config>
 8001500:	4603      	mov	r3, r0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff feda 	bl	80012d0 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d008      	beq.n	800153c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2280      	movs	r2, #128	@ 0x80
 800152e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e052      	b.n	80015e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0216 	bic.w	r2, r2, #22
 800154a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800155a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	2b00      	cmp	r3, #0
 8001562:	d103      	bne.n	800156c <HAL_DMA_Abort+0x62>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001568:	2b00      	cmp	r3, #0
 800156a:	d007      	beq.n	800157c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0208 	bic.w	r2, r2, #8
 800157a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800158c:	e013      	b.n	80015b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800158e:	f7ff fe9f 	bl	80012d0 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b05      	cmp	r3, #5
 800159a:	d90c      	bls.n	80015b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2220      	movs	r2, #32
 80015a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2203      	movs	r2, #3
 80015a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e015      	b.n	80015e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1e4      	bne.n	800158e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c8:	223f      	movs	r2, #63	@ 0x3f
 80015ca:	409a      	lsls	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d004      	beq.n	8001608 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2280      	movs	r2, #128	@ 0x80
 8001602:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e00c      	b.n	8001622 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2205      	movs	r2, #5
 800160c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0201 	bic.w	r2, r2, #1
 800161e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	@ 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	e175      	b.n	800193c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001650:	2201      	movs	r2, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	429a      	cmp	r2, r3
 800166a:	f040 8164 	bne.w	8001936 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d005      	beq.n	8001686 <HAL_GPIO_Init+0x56>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d130      	bne.n	80016e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016bc:	2201      	movs	r2, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 0201 	and.w	r2, r3, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d017      	beq.n	8001724 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d123      	bne.n	8001778 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	69b9      	ldr	r1, [r7, #24]
 8001774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80be 	beq.w	8001936 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	4b66      	ldr	r3, [pc, #408]	@ (8001954 <HAL_GPIO_Init+0x324>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	4a65      	ldr	r2, [pc, #404]	@ (8001954 <HAL_GPIO_Init+0x324>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c6:	4b63      	ldr	r3, [pc, #396]	@ (8001954 <HAL_GPIO_Init+0x324>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017d2:	4a61      	ldr	r2, [pc, #388]	@ (8001958 <HAL_GPIO_Init+0x328>)
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a58      	ldr	r2, [pc, #352]	@ (800195c <HAL_GPIO_Init+0x32c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d037      	beq.n	800186e <HAL_GPIO_Init+0x23e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a57      	ldr	r2, [pc, #348]	@ (8001960 <HAL_GPIO_Init+0x330>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d031      	beq.n	800186a <HAL_GPIO_Init+0x23a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a56      	ldr	r2, [pc, #344]	@ (8001964 <HAL_GPIO_Init+0x334>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d02b      	beq.n	8001866 <HAL_GPIO_Init+0x236>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a55      	ldr	r2, [pc, #340]	@ (8001968 <HAL_GPIO_Init+0x338>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d025      	beq.n	8001862 <HAL_GPIO_Init+0x232>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a54      	ldr	r2, [pc, #336]	@ (800196c <HAL_GPIO_Init+0x33c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d01f      	beq.n	800185e <HAL_GPIO_Init+0x22e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a53      	ldr	r2, [pc, #332]	@ (8001970 <HAL_GPIO_Init+0x340>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d019      	beq.n	800185a <HAL_GPIO_Init+0x22a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a52      	ldr	r2, [pc, #328]	@ (8001974 <HAL_GPIO_Init+0x344>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0x226>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a51      	ldr	r2, [pc, #324]	@ (8001978 <HAL_GPIO_Init+0x348>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00d      	beq.n	8001852 <HAL_GPIO_Init+0x222>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a50      	ldr	r2, [pc, #320]	@ (800197c <HAL_GPIO_Init+0x34c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d007      	beq.n	800184e <HAL_GPIO_Init+0x21e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4f      	ldr	r2, [pc, #316]	@ (8001980 <HAL_GPIO_Init+0x350>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_GPIO_Init+0x21a>
 8001846:	2309      	movs	r3, #9
 8001848:	e012      	b.n	8001870 <HAL_GPIO_Init+0x240>
 800184a:	230a      	movs	r3, #10
 800184c:	e010      	b.n	8001870 <HAL_GPIO_Init+0x240>
 800184e:	2308      	movs	r3, #8
 8001850:	e00e      	b.n	8001870 <HAL_GPIO_Init+0x240>
 8001852:	2307      	movs	r3, #7
 8001854:	e00c      	b.n	8001870 <HAL_GPIO_Init+0x240>
 8001856:	2306      	movs	r3, #6
 8001858:	e00a      	b.n	8001870 <HAL_GPIO_Init+0x240>
 800185a:	2305      	movs	r3, #5
 800185c:	e008      	b.n	8001870 <HAL_GPIO_Init+0x240>
 800185e:	2304      	movs	r3, #4
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x240>
 8001862:	2303      	movs	r3, #3
 8001864:	e004      	b.n	8001870 <HAL_GPIO_Init+0x240>
 8001866:	2302      	movs	r3, #2
 8001868:	e002      	b.n	8001870 <HAL_GPIO_Init+0x240>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x240>
 800186e:	2300      	movs	r3, #0
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	f002 0203 	and.w	r2, r2, #3
 8001876:	0092      	lsls	r2, r2, #2
 8001878:	4093      	lsls	r3, r2
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001880:	4935      	ldr	r1, [pc, #212]	@ (8001958 <HAL_GPIO_Init+0x328>)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800188e:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <HAL_GPIO_Init+0x354>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018b2:	4a34      	ldr	r2, [pc, #208]	@ (8001984 <HAL_GPIO_Init+0x354>)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b8:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <HAL_GPIO_Init+0x354>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018dc:	4a29      	ldr	r2, [pc, #164]	@ (8001984 <HAL_GPIO_Init+0x354>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018e2:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <HAL_GPIO_Init+0x354>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001906:	4a1f      	ldr	r2, [pc, #124]	@ (8001984 <HAL_GPIO_Init+0x354>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800190c:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <HAL_GPIO_Init+0x354>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001930:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <HAL_GPIO_Init+0x354>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3301      	adds	r3, #1
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	2b0f      	cmp	r3, #15
 8001940:	f67f ae86 	bls.w	8001650 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3724      	adds	r7, #36	@ 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40013800 	.word	0x40013800
 800195c:	40020000 	.word	0x40020000
 8001960:	40020400 	.word	0x40020400
 8001964:	40020800 	.word	0x40020800
 8001968:	40020c00 	.word	0x40020c00
 800196c:	40021000 	.word	0x40021000
 8001970:	40021400 	.word	0x40021400
 8001974:	40021800 	.word	0x40021800
 8001978:	40021c00 	.word	0x40021c00
 800197c:	40022000 	.word	0x40022000
 8001980:	40022400 	.word	0x40022400
 8001984:	40013c00 	.word	0x40013c00

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019a4:	e003      	b.n	80019ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	041a      	lsls	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	619a      	str	r2, [r3, #24]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b23      	ldr	r3, [pc, #140]	@ (8001a54 <HAL_PWREx_EnableOverDrive+0x98>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	4a22      	ldr	r2, [pc, #136]	@ (8001a54 <HAL_PWREx_EnableOverDrive+0x98>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d2:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <HAL_PWREx_EnableOverDrive+0x98>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019de:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019ea:	f7ff fc71 	bl	80012d0 <HAL_GetTick>
 80019ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019f0:	e009      	b.n	8001a06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019f2:	f7ff fc6d 	bl	80012d0 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a00:	d901      	bls.n	8001a06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e022      	b.n	8001a4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a06:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a12:	d1ee      	bne.n	80019f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a14:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0f      	ldr	r2, [pc, #60]	@ (8001a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a20:	f7ff fc56 	bl	80012d0 <HAL_GetTick>
 8001a24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a26:	e009      	b.n	8001a3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a28:	f7ff fc52 	bl	80012d0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a36:	d901      	bls.n	8001a3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e007      	b.n	8001a4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001a48:	d1ee      	bne.n	8001a28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40007000 	.word	0x40007000

08001a5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e291      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8087 	beq.w	8001b8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a80:	4b96      	ldr	r3, [pc, #600]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d00c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8c:	4b93      	ldr	r3, [pc, #588]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d112      	bne.n	8001abe <HAL_RCC_OscConfig+0x62>
 8001a98:	4b90      	ldr	r3, [pc, #576]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001aa4:	d10b      	bne.n	8001abe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa6:	4b8d      	ldr	r3, [pc, #564]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d06c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x130>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d168      	bne.n	8001b8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e26b      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x7a>
 8001ac8:	4b84      	ldr	r3, [pc, #528]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a83      	ldr	r2, [pc, #524]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	e02e      	b.n	8001b34 <HAL_RCC_OscConfig+0xd8>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x9c>
 8001ade:	4b7f      	ldr	r3, [pc, #508]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b7c      	ldr	r3, [pc, #496]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7b      	ldr	r2, [pc, #492]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0xd8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0xc0>
 8001b02:	4b76      	ldr	r3, [pc, #472]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a75      	ldr	r2, [pc, #468]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b73      	ldr	r3, [pc, #460]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a72      	ldr	r2, [pc, #456]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xd8>
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a6e      	ldr	r2, [pc, #440]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b6c      	ldr	r3, [pc, #432]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a6b      	ldr	r2, [pc, #428]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fbc8 	bl	80012d0 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff fbc4 	bl	80012d0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	@ 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e21f      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b61      	ldr	r3, [pc, #388]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0xe8>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff fbb4 	bl	80012d0 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fbb0 	bl	80012d0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	@ 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e20b      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	4b57      	ldr	r3, [pc, #348]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x110>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d069      	beq.n	8001c6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9a:	4b50      	ldr	r3, [pc, #320]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba6:	4b4d      	ldr	r3, [pc, #308]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d11c      	bne.n	8001bec <HAL_RCC_OscConfig+0x190>
 8001bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d116      	bne.n	8001bec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	4b47      	ldr	r3, [pc, #284]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x17a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e1df      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b41      	ldr	r3, [pc, #260]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	493d      	ldr	r1, [pc, #244]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	e040      	b.n	8001c6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d023      	beq.n	8001c3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf4:	4b39      	ldr	r3, [pc, #228]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a38      	ldr	r2, [pc, #224]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff fb66 	bl	80012d0 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c08:	f7ff fb62 	bl	80012d0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1bd      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	4b30      	ldr	r3, [pc, #192]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c26:	4b2d      	ldr	r3, [pc, #180]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4929      	ldr	r1, [pc, #164]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
 8001c3a:	e018      	b.n	8001c6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3c:	4b27      	ldr	r3, [pc, #156]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a26      	ldr	r2, [pc, #152]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff fb42 	bl	80012d0 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c50:	f7ff fb3e 	bl	80012d0 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e199      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d038      	beq.n	8001cec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d019      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c82:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c86:	4a15      	ldr	r2, [pc, #84]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fb1f 	bl	80012d0 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff fb1b 	bl	80012d0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e176      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x23a>
 8001cb4:	e01a      	b.n	8001cec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb6:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cba:	4a08      	ldr	r2, [pc, #32]	@ (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc2:	f7ff fb05 	bl	80012d0 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff fb01 	bl	80012d0 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d903      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e15c      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
 8001cdc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce0:	4b91      	ldr	r3, [pc, #580]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001ce2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ee      	bne.n	8001cca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a4 	beq.w	8001e42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b8b      	ldr	r3, [pc, #556]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b88      	ldr	r3, [pc, #544]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	4a87      	ldr	r2, [pc, #540]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d12:	4b85      	ldr	r3, [pc, #532]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d22:	4b82      	ldr	r3, [pc, #520]	@ (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7e      	ldr	r2, [pc, #504]	@ (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fac9 	bl	80012d0 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7ff fac5 	bl	80012d0 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b64      	cmp	r3, #100	@ 0x64
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e120      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d54:	4b75      	ldr	r3, [pc, #468]	@ (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x31a>
 8001d68:	4b6f      	ldr	r3, [pc, #444]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d74:	e02d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x376>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x33c>
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d82:	4a69      	ldr	r2, [pc, #420]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d8a:	4b67      	ldr	r3, [pc, #412]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8e:	4a66      	ldr	r2, [pc, #408]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x376>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x35e>
 8001da0:	4b61      	ldr	r3, [pc, #388]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da4:	4a60      	ldr	r2, [pc, #384]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dac:	4b5e      	ldr	r3, [pc, #376]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db0:	4a5d      	ldr	r2, [pc, #372]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x376>
 8001dba:	4b5b      	ldr	r3, [pc, #364]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dbe:	4a5a      	ldr	r2, [pc, #360]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc6:	4b58      	ldr	r3, [pc, #352]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dca:	4a57      	ldr	r2, [pc, #348]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dda:	f7ff fa79 	bl	80012d0 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff fa75 	bl	80012d0 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0ce      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b4b      	ldr	r3, [pc, #300]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x386>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e06:	f7ff fa63 	bl	80012d0 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff fa5f 	bl	80012d0 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0b8      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	4b40      	ldr	r3, [pc, #256]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b3c      	ldr	r3, [pc, #240]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80a4 	beq.w	8001f94 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	4b36      	ldr	r3, [pc, #216]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d06b      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d149      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b31      	ldr	r3, [pc, #196]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a30      	ldr	r2, [pc, #192]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001e66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fa30 	bl	80012d0 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff fa2c 	bl	80012d0 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e087      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e86:	4b28      	ldr	r3, [pc, #160]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea0:	019b      	lsls	r3, r3, #6
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea8:	085b      	lsrs	r3, r3, #1
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb4:	061b      	lsls	r3, r3, #24
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001eba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ebe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a18      	ldr	r2, [pc, #96]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001ec6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fa00 	bl	80012d0 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7ff f9fc 	bl	80012d0 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e057      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x478>
 8001ef2:	e04f      	b.n	8001f94 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001efa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff f9e6 	bl	80012d0 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f08:	f7ff f9e2 	bl	80012d0 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e03d      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1a:	4b03      	ldr	r3, [pc, #12]	@ (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4ac>
 8001f26:	e035      	b.n	8001f94 <HAL_RCC_OscConfig+0x538>
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <HAL_RCC_OscConfig+0x544>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d028      	beq.n	8001f90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d121      	bne.n	8001f90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d11a      	bne.n	8001f90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f60:	4013      	ands	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d111      	bne.n	8001f90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f76:	085b      	lsrs	r3, r3, #1
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0d0      	b.n	800215e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d910      	bls.n	8001fec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b67      	ldr	r3, [pc, #412]	@ (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 020f 	bic.w	r2, r3, #15
 8001fd2:	4965      	ldr	r1, [pc, #404]	@ (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b63      	ldr	r3, [pc, #396]	@ (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0b8      	b.n	800215e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002004:	4b59      	ldr	r3, [pc, #356]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a58      	ldr	r2, [pc, #352]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 800200a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800200e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800201c:	4b53      	ldr	r3, [pc, #332]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a52      	ldr	r2, [pc, #328]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002022:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002026:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	4b50      	ldr	r3, [pc, #320]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	494d      	ldr	r1, [pc, #308]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d040      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b47      	ldr	r3, [pc, #284]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d115      	bne.n	8002086 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e07f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002066:	4b41      	ldr	r3, [pc, #260]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e073      	b.n	800215e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002076:	4b3d      	ldr	r3, [pc, #244]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06b      	b.n	800215e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4b39      	ldr	r3, [pc, #228]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4936      	ldr	r1, [pc, #216]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002098:	f7ff f91a 	bl	80012d0 <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a0:	f7ff f916 	bl	80012d0 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e053      	b.n	800215e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 020c 	and.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1eb      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020c8:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d210      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 020f 	bic.w	r2, r3, #15
 80020de:	4922      	ldr	r1, [pc, #136]	@ (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e032      	b.n	800215e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4916      	ldr	r1, [pc, #88]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002122:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	490e      	ldr	r1, [pc, #56]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002136:	f000 f821 	bl	800217c <HAL_RCC_GetSysClockFreq>
 800213a:	4602      	mov	r2, r0
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_ClockConfig+0x1c8>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	490a      	ldr	r1, [pc, #40]	@ (8002170 <HAL_RCC_ClockConfig+0x1cc>)
 8002148:	5ccb      	ldrb	r3, [r1, r3]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	4a09      	ldr	r2, [pc, #36]	@ (8002174 <HAL_RCC_ClockConfig+0x1d0>)
 8002150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <HAL_RCC_ClockConfig+0x1d4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f876 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00
 800216c:	40023800 	.word	0x40023800
 8002170:	08006f14 	.word	0x08006f14
 8002174:	20000008 	.word	0x20000008
 8002178:	2000000c 	.word	0x2000000c

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002180:	b090      	sub	sp, #64	@ 0x40
 8002182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	637b      	str	r3, [r7, #52]	@ 0x34
 8002188:	2300      	movs	r3, #0
 800218a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800218c:	2300      	movs	r3, #0
 800218e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002194:	4b59      	ldr	r3, [pc, #356]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d00d      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x40>
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	f200 80a1 	bhi.w	80022e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x34>
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ae:	e09b      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b53      	ldr	r3, [pc, #332]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x184>)
 80021b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021b4:	e09b      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021b6:	4b53      	ldr	r3, [pc, #332]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x188>)
 80021b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021ba:	e098      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021bc:	4b4f      	ldr	r3, [pc, #316]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x180>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021c6:	4b4d      	ldr	r3, [pc, #308]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x180>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d028      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d2:	4b4a      	ldr	r3, [pc, #296]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x180>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	2200      	movs	r2, #0
 80021da:	623b      	str	r3, [r7, #32]
 80021dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021e4:	2100      	movs	r1, #0
 80021e6:	4b47      	ldr	r3, [pc, #284]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x188>)
 80021e8:	fb03 f201 	mul.w	r2, r3, r1
 80021ec:	2300      	movs	r3, #0
 80021ee:	fb00 f303 	mul.w	r3, r0, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	4a43      	ldr	r2, [pc, #268]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x188>)
 80021f6:	fba0 1202 	umull	r1, r2, r0, r2
 80021fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021fc:	460a      	mov	r2, r1
 80021fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002202:	4413      	add	r3, r2
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002208:	2200      	movs	r2, #0
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	61fa      	str	r2, [r7, #28]
 800220e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002212:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002216:	f7fe f84b 	bl	80002b0 <__aeabi_uldivmod>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4613      	mov	r3, r2
 8002220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002222:	e053      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002224:	4b35      	ldr	r3, [pc, #212]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	099b      	lsrs	r3, r3, #6
 800222a:	2200      	movs	r2, #0
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	617a      	str	r2, [r7, #20]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002236:	f04f 0b00 	mov.w	fp, #0
 800223a:	4652      	mov	r2, sl
 800223c:	465b      	mov	r3, fp
 800223e:	f04f 0000 	mov.w	r0, #0
 8002242:	f04f 0100 	mov.w	r1, #0
 8002246:	0159      	lsls	r1, r3, #5
 8002248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800224c:	0150      	lsls	r0, r2, #5
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	ebb2 080a 	subs.w	r8, r2, sl
 8002256:	eb63 090b 	sbc.w	r9, r3, fp
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002266:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800226a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800226e:	ebb2 0408 	subs.w	r4, r2, r8
 8002272:	eb63 0509 	sbc.w	r5, r3, r9
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	00eb      	lsls	r3, r5, #3
 8002280:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002284:	00e2      	lsls	r2, r4, #3
 8002286:	4614      	mov	r4, r2
 8002288:	461d      	mov	r5, r3
 800228a:	eb14 030a 	adds.w	r3, r4, sl
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	eb45 030b 	adc.w	r3, r5, fp
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022a2:	4629      	mov	r1, r5
 80022a4:	028b      	lsls	r3, r1, #10
 80022a6:	4621      	mov	r1, r4
 80022a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022ac:	4621      	mov	r1, r4
 80022ae:	028a      	lsls	r2, r1, #10
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b6:	2200      	movs	r2, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	60fa      	str	r2, [r7, #12]
 80022bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c0:	f7fd fff6 	bl	80002b0 <__aeabi_uldivmod>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4613      	mov	r3, r2
 80022ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x180>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	3301      	adds	r3, #1
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80022dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022e6:	e002      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x184>)
 80022ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3740      	adds	r7, #64	@ 0x40
 80022f4:	46bd      	mov	sp, r7
 80022f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	00f42400 	.word	0x00f42400
 8002304:	017d7840 	.word	0x017d7840

08002308 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800230c:	4b03      	ldr	r3, [pc, #12]	@ (800231c <HAL_RCC_GetHCLKFreq+0x14>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000008 	.word	0x20000008

08002320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002324:	f7ff fff0 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	0a9b      	lsrs	r3, r3, #10
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4903      	ldr	r1, [pc, #12]	@ (8002344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	08006f24 	.word	0x08006f24

08002348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800234c:	f7ff ffdc 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	0b5b      	lsrs	r3, r3, #13
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4903      	ldr	r1, [pc, #12]	@ (800236c <HAL_RCC_GetPCLK2Freq+0x24>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	08006f24 	.word	0x08006f24

08002370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d012      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002398:	4b69      	ldr	r3, [pc, #420]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a68      	ldr	r2, [pc, #416]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80023a2:	6093      	str	r3, [r2, #8]
 80023a4:	4b66      	ldr	r3, [pc, #408]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ac:	4964      	ldr	r1, [pc, #400]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80023ba:	2301      	movs	r3, #1
 80023bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d017      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d8:	4959      	ldr	r1, [pc, #356]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023e8:	d101      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023ea:	2301      	movs	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d017      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002406:	4b4e      	ldr	r3, [pc, #312]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800240c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	494a      	ldr	r1, [pc, #296]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002424:	d101      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002426:	2301      	movs	r3, #1
 8002428:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002432:	2301      	movs	r3, #1
 8002434:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002442:	2301      	movs	r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 808b 	beq.w	800256a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002454:	4b3a      	ldr	r3, [pc, #232]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	4a39      	ldr	r2, [pc, #228]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800245e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002460:	4b37      	ldr	r3, [pc, #220]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800246c:	4b35      	ldr	r3, [pc, #212]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a34      	ldr	r2, [pc, #208]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002476:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002478:	f7fe ff2a 	bl	80012d0 <HAL_GetTick>
 800247c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002480:	f7fe ff26 	bl	80012d0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	@ 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e357      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002492:	4b2c      	ldr	r3, [pc, #176]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800249e:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d035      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d02e      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024bc:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80024de:	4a18      	ldr	r2, [pc, #96]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024e4:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d114      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe feee 	bl	80012d0 <HAL_GetTick>
 80024f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f6:	e00a      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7fe feea 	bl	80012d0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e319      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250e:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0ee      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002526:	d111      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002528:	4b05      	ldr	r3, [pc, #20]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002534:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002536:	400b      	ands	r3, r1
 8002538:	4901      	ldr	r1, [pc, #4]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
 800253e:	e00b      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002540:	40023800 	.word	0x40023800
 8002544:	40007000 	.word	0x40007000
 8002548:	0ffffcff 	.word	0x0ffffcff
 800254c:	4baa      	ldr	r3, [pc, #680]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4aa9      	ldr	r2, [pc, #676]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002552:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002556:	6093      	str	r3, [r2, #8]
 8002558:	4ba7      	ldr	r3, [pc, #668]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800255a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002564:	49a4      	ldr	r1, [pc, #656]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002566:	4313      	orrs	r3, r2
 8002568:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b00      	cmp	r3, #0
 8002574:	d010      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002576:	4ba0      	ldr	r3, [pc, #640]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800257c:	4a9e      	ldr	r2, [pc, #632]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800257e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002582:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002586:	4b9c      	ldr	r3, [pc, #624]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002588:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002590:	4999      	ldr	r1, [pc, #612]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025a4:	4b94      	ldr	r3, [pc, #592]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025b2:	4991      	ldr	r1, [pc, #580]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025c6:	4b8c      	ldr	r3, [pc, #560]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025d4:	4988      	ldr	r1, [pc, #544]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025e8:	4b83      	ldr	r3, [pc, #524]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025f6:	4980      	ldr	r1, [pc, #512]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800260a:	4b7b      	ldr	r3, [pc, #492]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002610:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002618:	4977      	ldr	r1, [pc, #476]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800262c:	4b72      	ldr	r3, [pc, #456]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002632:	f023 0203 	bic.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	496f      	ldr	r1, [pc, #444]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800264e:	4b6a      	ldr	r3, [pc, #424]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002654:	f023 020c 	bic.w	r2, r3, #12
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265c:	4966      	ldr	r1, [pc, #408]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002670:	4b61      	ldr	r3, [pc, #388]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002676:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	495e      	ldr	r1, [pc, #376]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002692:	4b59      	ldr	r3, [pc, #356]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002698:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a0:	4955      	ldr	r1, [pc, #340]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026b4:	4b50      	ldr	r3, [pc, #320]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c2:	494d      	ldr	r1, [pc, #308]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80026d6:	4b48      	ldr	r3, [pc, #288]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	4944      	ldr	r1, [pc, #272]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026f8:	4b3f      	ldr	r3, [pc, #252]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002706:	493c      	ldr	r1, [pc, #240]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800271a:	4b37      	ldr	r3, [pc, #220]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002720:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002728:	4933      	ldr	r1, [pc, #204]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800273c:	4b2e      	ldr	r3, [pc, #184]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002742:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800274a:	492b      	ldr	r1, [pc, #172]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d011      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800275e:	4b26      	ldr	r3, [pc, #152]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002764:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800276c:	4922      	ldr	r1, [pc, #136]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002778:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800277c:	d101      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800277e:	2301      	movs	r3, #1
 8002780:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800278e:	2301      	movs	r3, #1
 8002790:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800279e:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ac:	4912      	ldr	r1, [pc, #72]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00b      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027c0:	4b0d      	ldr	r3, [pc, #52]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027d0:	4909      	ldr	r1, [pc, #36]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d006      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80d9 	beq.w	800299e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027ec:	4b02      	ldr	r3, [pc, #8]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a01      	ldr	r2, [pc, #4]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027f6:	e001      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80027f8:	40023800 	.word	0x40023800
 80027fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fe:	f7fe fd67 	bl	80012d0 <HAL_GetTick>
 8002802:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002806:	f7fe fd63 	bl	80012d0 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b64      	cmp	r3, #100	@ 0x64
 8002812:	d901      	bls.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e194      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002818:	4b6c      	ldr	r3, [pc, #432]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d021      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11d      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002838:	4b64      	ldr	r3, [pc, #400]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800283a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800283e:	0c1b      	lsrs	r3, r3, #16
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002846:	4b61      	ldr	r3, [pc, #388]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800284c:	0e1b      	lsrs	r3, r3, #24
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	019a      	lsls	r2, r3, #6
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	431a      	orrs	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	071b      	lsls	r3, r3, #28
 800286c:	4957      	ldr	r1, [pc, #348]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002884:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002892:	2b00      	cmp	r3, #0
 8002894:	d02e      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800289e:	d129      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028a0:	4b4a      	ldr	r3, [pc, #296]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028a6:	0c1b      	lsrs	r3, r3, #16
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028ae:	4b47      	ldr	r3, [pc, #284]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028b4:	0f1b      	lsrs	r3, r3, #28
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	019a      	lsls	r2, r3, #6
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	041b      	lsls	r3, r3, #16
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	061b      	lsls	r3, r3, #24
 80028ce:	431a      	orrs	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	071b      	lsls	r3, r3, #28
 80028d4:	493d      	ldr	r1, [pc, #244]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80028dc:	4b3b      	ldr	r3, [pc, #236]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028e2:	f023 021f 	bic.w	r2, r3, #31
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	3b01      	subs	r3, #1
 80028ec:	4937      	ldr	r1, [pc, #220]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01d      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002900:	4b32      	ldr	r3, [pc, #200]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002906:	0e1b      	lsrs	r3, r3, #24
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800290e:	4b2f      	ldr	r3, [pc, #188]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002914:	0f1b      	lsrs	r3, r3, #28
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	019a      	lsls	r2, r3, #6
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	431a      	orrs	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	431a      	orrs	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	071b      	lsls	r3, r3, #28
 8002934:	4925      	ldr	r1, [pc, #148]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d011      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	019a      	lsls	r2, r3, #6
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	041b      	lsls	r3, r3, #16
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	061b      	lsls	r3, r3, #24
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	071b      	lsls	r3, r3, #28
 8002964:	4919      	ldr	r1, [pc, #100]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800296c:	4b17      	ldr	r3, [pc, #92]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a16      	ldr	r2, [pc, #88]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002972:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002978:	f7fe fcaa 	bl	80012d0 <HAL_GetTick>
 800297c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002980:	f7fe fca6 	bl	80012d0 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	@ 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0d7      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002992:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	f040 80cd 	bne.w	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029a6:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b2:	f7fe fc8d 	bl	80012d0 <HAL_GetTick>
 80029b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029ba:	f7fe fc89 	bl	80012d0 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b64      	cmp	r3, #100	@ 0x64
 80029c6:	d903      	bls.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e0ba      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80029cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029d0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029dc:	d0ed      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d02e      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d12a      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a06:	4b51      	ldr	r3, [pc, #324]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0c:	0c1b      	lsrs	r3, r3, #16
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a14:	4b4d      	ldr	r3, [pc, #308]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1a:	0f1b      	lsrs	r3, r3, #28
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	019a      	lsls	r2, r3, #6
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	041b      	lsls	r3, r3, #16
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	061b      	lsls	r3, r3, #24
 8002a34:	431a      	orrs	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	071b      	lsls	r3, r3, #28
 8002a3a:	4944      	ldr	r1, [pc, #272]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a42:	4b42      	ldr	r3, [pc, #264]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a48:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a50:	3b01      	subs	r3, #1
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	493d      	ldr	r1, [pc, #244]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d022      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a70:	d11d      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a72:	4b36      	ldr	r3, [pc, #216]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a78:	0e1b      	lsrs	r3, r3, #24
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a80:	4b32      	ldr	r3, [pc, #200]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a86:	0f1b      	lsrs	r3, r3, #28
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	019a      	lsls	r2, r3, #6
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	061b      	lsls	r3, r3, #24
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	071b      	lsls	r3, r3, #28
 8002aa6:	4929      	ldr	r1, [pc, #164]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d028      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002aba:	4b24      	ldr	r3, [pc, #144]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac0:	0e1b      	lsrs	r3, r3, #24
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ac8:	4b20      	ldr	r3, [pc, #128]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ace:	0c1b      	lsrs	r3, r3, #16
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	019a      	lsls	r2, r3, #6
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	061b      	lsls	r3, r3, #24
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	071b      	lsls	r3, r3, #28
 8002aee:	4917      	ldr	r1, [pc, #92]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002af6:	4b15      	ldr	r3, [pc, #84]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002afc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b04:	4911      	ldr	r1, [pc, #68]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0e      	ldr	r2, [pc, #56]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b18:	f7fe fbda 	bl	80012d0 <HAL_GetTick>
 8002b1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b20:	f7fe fbd6 	bl	80012d0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e007      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b3e:	d1ef      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e040      	b.n	8002be4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fe faa8 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2224      	movs	r2, #36	@ 0x24
 8002b7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fed0 	bl	800393c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fc69 	bl	8003474 <UART_SetConfig>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e01b      	b.n	8002be4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 ff4f 	bl	8003a80 <UART_CheckIdleState>
 8002be2:	4603      	mov	r3, r0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d177      	bne.n	8002cf4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_UART_Transmit+0x24>
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e070      	b.n	8002cf6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2221      	movs	r2, #33	@ 0x21
 8002c20:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c22:	f7fe fb55 	bl	80012d0 <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	88fa      	ldrh	r2, [r7, #6]
 8002c2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c40:	d108      	bne.n	8002c54 <HAL_UART_Transmit+0x68>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d104      	bne.n	8002c54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	e003      	b.n	8002c5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c5c:	e02f      	b.n	8002cbe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2200      	movs	r2, #0
 8002c66:	2180      	movs	r1, #128	@ 0x80
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 ff60 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e03b      	b.n	8002cf6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10b      	bne.n	8002c9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	3302      	adds	r3, #2
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	e007      	b.n	8002cac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1c9      	bne.n	8002c5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2140      	movs	r1, #64	@ 0x40
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 ff2a 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e005      	b.n	8002cf6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e000      	b.n	8002cf6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b08a      	sub	sp, #40	@ 0x28
 8002d02:	af02      	add	r7, sp, #8
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	f040 80b5 	bne.w	8002e84 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_UART_Receive+0x28>
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e0ad      	b.n	8002e86 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2222      	movs	r2, #34	@ 0x22
 8002d36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d40:	f7fe fac6 	bl	80012d0 <HAL_GetTick>
 8002d44:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	88fa      	ldrh	r2, [r7, #6]
 8002d4a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5e:	d10e      	bne.n	8002d7e <HAL_UART_Receive+0x80>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <HAL_UART_Receive+0x76>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002d72:	e02d      	b.n	8002dd0 <HAL_UART_Receive+0xd2>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	22ff      	movs	r2, #255	@ 0xff
 8002d78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002d7c:	e028      	b.n	8002dd0 <HAL_UART_Receive+0xd2>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10d      	bne.n	8002da2 <HAL_UART_Receive+0xa4>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d104      	bne.n	8002d98 <HAL_UART_Receive+0x9a>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	22ff      	movs	r2, #255	@ 0xff
 8002d92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002d96:	e01b      	b.n	8002dd0 <HAL_UART_Receive+0xd2>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	227f      	movs	r2, #127	@ 0x7f
 8002d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002da0:	e016      	b.n	8002dd0 <HAL_UART_Receive+0xd2>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002daa:	d10d      	bne.n	8002dc8 <HAL_UART_Receive+0xca>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <HAL_UART_Receive+0xc0>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	227f      	movs	r2, #127	@ 0x7f
 8002db8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002dbc:	e008      	b.n	8002dd0 <HAL_UART_Receive+0xd2>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	223f      	movs	r2, #63	@ 0x3f
 8002dc2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002dc6:	e003      	b.n	8002dd0 <HAL_UART_Receive+0xd2>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002dd6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de0:	d108      	bne.n	8002df4 <HAL_UART_Receive+0xf6>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	e003      	b.n	8002dfc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002dfc:	e036      	b.n	8002e6c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2120      	movs	r1, #32
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fe90 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e032      	b.n	8002e86 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10c      	bne.n	8002e40 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	8a7b      	ldrh	r3, [r7, #18]
 8002e30:	4013      	ands	r3, r2
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	e00c      	b.n	8002e5a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	8a7b      	ldrh	r3, [r7, #18]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	3301      	adds	r3, #1
 8002e58:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1c2      	bne.n	8002dfe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b0ba      	sub	sp, #232	@ 0xe8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002eb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002eba:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002ec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d115      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00f      	beq.n	8002ef8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d009      	beq.n	8002ef8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8297 	beq.w	800341c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
      }
      return;
 8002ef6:	e291      	b.n	800341c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8117 	beq.w	8003130 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002f12:	4b85      	ldr	r3, [pc, #532]	@ (8003128 <HAL_UART_IRQHandler+0x298>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 810a 	beq.w	8003130 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d011      	beq.n	8002f4c <HAL_UART_IRQHandler+0xbc>
 8002f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00b      	beq.n	8002f4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f42:	f043 0201 	orr.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d011      	beq.n	8002f7c <HAL_UART_IRQHandler+0xec>
 8002f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f72:	f043 0204 	orr.w	r2, r3, #4
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d011      	beq.n	8002fac <HAL_UART_IRQHandler+0x11c>
 8002f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00b      	beq.n	8002fac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2204      	movs	r2, #4
 8002f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fa2:	f043 0202 	orr.w	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d017      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fc8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00b      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fde:	f043 0208 	orr.w	r2, r3, #8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d012      	beq.n	800301a <HAL_UART_IRQHandler+0x18a>
 8002ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ff8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00c      	beq.n	800301a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003008:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 81fd 	beq.w	8003420 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00d      	beq.n	800304e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003054:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003062:	2b40      	cmp	r3, #64	@ 0x40
 8003064:	d005      	beq.n	8003072 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800306a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800306e:	2b00      	cmp	r3, #0
 8003070:	d04f      	beq.n	8003112 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fdc8 	bl	8003c08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003082:	2b40      	cmp	r3, #64	@ 0x40
 8003084:	d141      	bne.n	800310a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3308      	adds	r3, #8
 800308c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800309c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3308      	adds	r3, #8
 80030ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80030b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80030b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80030be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80030ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1d9      	bne.n	8003086 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d013      	beq.n	8003102 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030de:	4a13      	ldr	r2, [pc, #76]	@ (800312c <HAL_UART_IRQHandler+0x29c>)
 80030e0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fa7f 	bl	80015ea <HAL_DMA_Abort_IT>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d017      	beq.n	8003122 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80030fc:	4610      	mov	r0, r2
 80030fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003100:	e00f      	b.n	8003122 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f9a0 	bl	8003448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003108:	e00b      	b.n	8003122 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f99c 	bl	8003448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	e007      	b.n	8003122 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f998 	bl	8003448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003120:	e17e      	b.n	8003420 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003122:	bf00      	nop
    return;
 8003124:	e17c      	b.n	8003420 <HAL_UART_IRQHandler+0x590>
 8003126:	bf00      	nop
 8003128:	04000120 	.word	0x04000120
 800312c:	08003cd1 	.word	0x08003cd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003134:	2b01      	cmp	r3, #1
 8003136:	f040 814c 	bne.w	80033d2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800313a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 8145 	beq.w	80033d2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 813e 	beq.w	80033d2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2210      	movs	r2, #16
 800315c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003168:	2b40      	cmp	r3, #64	@ 0x40
 800316a:	f040 80b6 	bne.w	80032da <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800317a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8150 	beq.w	8003424 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800318a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800318e:	429a      	cmp	r2, r3
 8003190:	f080 8148 	bcs.w	8003424 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800319a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031a8:	f000 8086 	beq.w	80032b8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80031c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80031e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80031ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1da      	bne.n	80031ac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3308      	adds	r3, #8
 80031fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003206:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3308      	adds	r3, #8
 8003216:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800321a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800321e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003220:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003222:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800322c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e1      	bne.n	80031f6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3308      	adds	r3, #8
 8003238:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3308      	adds	r3, #8
 8003252:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003256:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003258:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800325c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800325e:	e841 2300 	strex	r3, r2, [r1]
 8003262:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1e3      	bne.n	8003232 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003288:	f023 0310 	bic.w	r3, r3, #16
 800328c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800329a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800329c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80032a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1e4      	bne.n	8003278 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe f929 	bl	800150a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	4619      	mov	r1, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8c2 	bl	800345c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032d8:	e0a4      	b.n	8003424 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8096 	beq.w	8003428 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80032fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8091 	beq.w	8003428 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003316:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800331a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003328:	647b      	str	r3, [r7, #68]	@ 0x44
 800332a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800332e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e4      	bne.n	8003306 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3308      	adds	r3, #8
 8003342:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	e853 3f00 	ldrex	r3, [r3]
 800334a:	623b      	str	r3, [r7, #32]
   return(result);
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3308      	adds	r3, #8
 800335c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003360:	633a      	str	r2, [r7, #48]	@ 0x30
 8003362:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003364:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003368:	e841 2300 	strex	r3, r2, [r1]
 800336c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800336e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e3      	bne.n	800333c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	e853 3f00 	ldrex	r3, [r3]
 8003394:	60fb      	str	r3, [r7, #12]
   return(result);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f023 0310 	bic.w	r3, r3, #16
 800339c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	617b      	str	r3, [r7, #20]
   return(result);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e4      	bne.n	8003388 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f846 	bl	800345c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033d0:	e02a      	b.n	8003428 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00e      	beq.n	80033fc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01c      	beq.n	800342c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
    }
    return;
 80033fa:	e017      	b.n	800342c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <HAL_UART_IRQHandler+0x59e>
 8003408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800340c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00c      	beq.n	800342e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fc71 	bl	8003cfc <UART_EndTransmit_IT>
    return;
 800341a:	e008      	b.n	800342e <HAL_UART_IRQHandler+0x59e>
      return;
 800341c:	bf00      	nop
 800341e:	e006      	b.n	800342e <HAL_UART_IRQHandler+0x59e>
    return;
 8003420:	bf00      	nop
 8003422:	e004      	b.n	800342e <HAL_UART_IRQHandler+0x59e>
      return;
 8003424:	bf00      	nop
 8003426:	e002      	b.n	800342e <HAL_UART_IRQHandler+0x59e>
      return;
 8003428:	bf00      	nop
 800342a:	e000      	b.n	800342e <HAL_UART_IRQHandler+0x59e>
    return;
 800342c:	bf00      	nop
  }

}
 800342e:	37e8      	adds	r7, #232	@ 0xe8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4ba6      	ldr	r3, [pc, #664]	@ (8003738 <UART_SetConfig+0x2c4>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	6979      	ldr	r1, [r7, #20]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a94      	ldr	r2, [pc, #592]	@ (800373c <UART_SetConfig+0x2c8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d120      	bne.n	8003532 <UART_SetConfig+0xbe>
 80034f0:	4b93      	ldr	r3, [pc, #588]	@ (8003740 <UART_SetConfig+0x2cc>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d816      	bhi.n	800352c <UART_SetConfig+0xb8>
 80034fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003504 <UART_SetConfig+0x90>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003515 	.word	0x08003515
 8003508:	08003521 	.word	0x08003521
 800350c:	0800351b 	.word	0x0800351b
 8003510:	08003527 	.word	0x08003527
 8003514:	2301      	movs	r3, #1
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e150      	b.n	80037bc <UART_SetConfig+0x348>
 800351a:	2302      	movs	r3, #2
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e14d      	b.n	80037bc <UART_SetConfig+0x348>
 8003520:	2304      	movs	r3, #4
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e14a      	b.n	80037bc <UART_SetConfig+0x348>
 8003526:	2308      	movs	r3, #8
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	e147      	b.n	80037bc <UART_SetConfig+0x348>
 800352c:	2310      	movs	r3, #16
 800352e:	77fb      	strb	r3, [r7, #31]
 8003530:	e144      	b.n	80037bc <UART_SetConfig+0x348>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a83      	ldr	r2, [pc, #524]	@ (8003744 <UART_SetConfig+0x2d0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d132      	bne.n	80035a2 <UART_SetConfig+0x12e>
 800353c:	4b80      	ldr	r3, [pc, #512]	@ (8003740 <UART_SetConfig+0x2cc>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d828      	bhi.n	800359c <UART_SetConfig+0x128>
 800354a:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <UART_SetConfig+0xdc>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003585 	.word	0x08003585
 8003554:	0800359d 	.word	0x0800359d
 8003558:	0800359d 	.word	0x0800359d
 800355c:	0800359d 	.word	0x0800359d
 8003560:	08003591 	.word	0x08003591
 8003564:	0800359d 	.word	0x0800359d
 8003568:	0800359d 	.word	0x0800359d
 800356c:	0800359d 	.word	0x0800359d
 8003570:	0800358b 	.word	0x0800358b
 8003574:	0800359d 	.word	0x0800359d
 8003578:	0800359d 	.word	0x0800359d
 800357c:	0800359d 	.word	0x0800359d
 8003580:	08003597 	.word	0x08003597
 8003584:	2300      	movs	r3, #0
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e118      	b.n	80037bc <UART_SetConfig+0x348>
 800358a:	2302      	movs	r3, #2
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	e115      	b.n	80037bc <UART_SetConfig+0x348>
 8003590:	2304      	movs	r3, #4
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e112      	b.n	80037bc <UART_SetConfig+0x348>
 8003596:	2308      	movs	r3, #8
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e10f      	b.n	80037bc <UART_SetConfig+0x348>
 800359c:	2310      	movs	r3, #16
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e10c      	b.n	80037bc <UART_SetConfig+0x348>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a68      	ldr	r2, [pc, #416]	@ (8003748 <UART_SetConfig+0x2d4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d120      	bne.n	80035ee <UART_SetConfig+0x17a>
 80035ac:	4b64      	ldr	r3, [pc, #400]	@ (8003740 <UART_SetConfig+0x2cc>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035b6:	2b30      	cmp	r3, #48	@ 0x30
 80035b8:	d013      	beq.n	80035e2 <UART_SetConfig+0x16e>
 80035ba:	2b30      	cmp	r3, #48	@ 0x30
 80035bc:	d814      	bhi.n	80035e8 <UART_SetConfig+0x174>
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d009      	beq.n	80035d6 <UART_SetConfig+0x162>
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d810      	bhi.n	80035e8 <UART_SetConfig+0x174>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <UART_SetConfig+0x15c>
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d006      	beq.n	80035dc <UART_SetConfig+0x168>
 80035ce:	e00b      	b.n	80035e8 <UART_SetConfig+0x174>
 80035d0:	2300      	movs	r3, #0
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e0f2      	b.n	80037bc <UART_SetConfig+0x348>
 80035d6:	2302      	movs	r3, #2
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	e0ef      	b.n	80037bc <UART_SetConfig+0x348>
 80035dc:	2304      	movs	r3, #4
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e0ec      	b.n	80037bc <UART_SetConfig+0x348>
 80035e2:	2308      	movs	r3, #8
 80035e4:	77fb      	strb	r3, [r7, #31]
 80035e6:	e0e9      	b.n	80037bc <UART_SetConfig+0x348>
 80035e8:	2310      	movs	r3, #16
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e0e6      	b.n	80037bc <UART_SetConfig+0x348>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a56      	ldr	r2, [pc, #344]	@ (800374c <UART_SetConfig+0x2d8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d120      	bne.n	800363a <UART_SetConfig+0x1c6>
 80035f8:	4b51      	ldr	r3, [pc, #324]	@ (8003740 <UART_SetConfig+0x2cc>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003602:	2bc0      	cmp	r3, #192	@ 0xc0
 8003604:	d013      	beq.n	800362e <UART_SetConfig+0x1ba>
 8003606:	2bc0      	cmp	r3, #192	@ 0xc0
 8003608:	d814      	bhi.n	8003634 <UART_SetConfig+0x1c0>
 800360a:	2b80      	cmp	r3, #128	@ 0x80
 800360c:	d009      	beq.n	8003622 <UART_SetConfig+0x1ae>
 800360e:	2b80      	cmp	r3, #128	@ 0x80
 8003610:	d810      	bhi.n	8003634 <UART_SetConfig+0x1c0>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <UART_SetConfig+0x1a8>
 8003616:	2b40      	cmp	r3, #64	@ 0x40
 8003618:	d006      	beq.n	8003628 <UART_SetConfig+0x1b4>
 800361a:	e00b      	b.n	8003634 <UART_SetConfig+0x1c0>
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e0cc      	b.n	80037bc <UART_SetConfig+0x348>
 8003622:	2302      	movs	r3, #2
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e0c9      	b.n	80037bc <UART_SetConfig+0x348>
 8003628:	2304      	movs	r3, #4
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e0c6      	b.n	80037bc <UART_SetConfig+0x348>
 800362e:	2308      	movs	r3, #8
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e0c3      	b.n	80037bc <UART_SetConfig+0x348>
 8003634:	2310      	movs	r3, #16
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e0c0      	b.n	80037bc <UART_SetConfig+0x348>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a44      	ldr	r2, [pc, #272]	@ (8003750 <UART_SetConfig+0x2dc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d125      	bne.n	8003690 <UART_SetConfig+0x21c>
 8003644:	4b3e      	ldr	r3, [pc, #248]	@ (8003740 <UART_SetConfig+0x2cc>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800364e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003652:	d017      	beq.n	8003684 <UART_SetConfig+0x210>
 8003654:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003658:	d817      	bhi.n	800368a <UART_SetConfig+0x216>
 800365a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800365e:	d00b      	beq.n	8003678 <UART_SetConfig+0x204>
 8003660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003664:	d811      	bhi.n	800368a <UART_SetConfig+0x216>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <UART_SetConfig+0x1fe>
 800366a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800366e:	d006      	beq.n	800367e <UART_SetConfig+0x20a>
 8003670:	e00b      	b.n	800368a <UART_SetConfig+0x216>
 8003672:	2300      	movs	r3, #0
 8003674:	77fb      	strb	r3, [r7, #31]
 8003676:	e0a1      	b.n	80037bc <UART_SetConfig+0x348>
 8003678:	2302      	movs	r3, #2
 800367a:	77fb      	strb	r3, [r7, #31]
 800367c:	e09e      	b.n	80037bc <UART_SetConfig+0x348>
 800367e:	2304      	movs	r3, #4
 8003680:	77fb      	strb	r3, [r7, #31]
 8003682:	e09b      	b.n	80037bc <UART_SetConfig+0x348>
 8003684:	2308      	movs	r3, #8
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e098      	b.n	80037bc <UART_SetConfig+0x348>
 800368a:	2310      	movs	r3, #16
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	e095      	b.n	80037bc <UART_SetConfig+0x348>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2f      	ldr	r2, [pc, #188]	@ (8003754 <UART_SetConfig+0x2e0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d125      	bne.n	80036e6 <UART_SetConfig+0x272>
 800369a:	4b29      	ldr	r3, [pc, #164]	@ (8003740 <UART_SetConfig+0x2cc>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036a8:	d017      	beq.n	80036da <UART_SetConfig+0x266>
 80036aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036ae:	d817      	bhi.n	80036e0 <UART_SetConfig+0x26c>
 80036b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036b4:	d00b      	beq.n	80036ce <UART_SetConfig+0x25a>
 80036b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ba:	d811      	bhi.n	80036e0 <UART_SetConfig+0x26c>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <UART_SetConfig+0x254>
 80036c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c4:	d006      	beq.n	80036d4 <UART_SetConfig+0x260>
 80036c6:	e00b      	b.n	80036e0 <UART_SetConfig+0x26c>
 80036c8:	2301      	movs	r3, #1
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	e076      	b.n	80037bc <UART_SetConfig+0x348>
 80036ce:	2302      	movs	r3, #2
 80036d0:	77fb      	strb	r3, [r7, #31]
 80036d2:	e073      	b.n	80037bc <UART_SetConfig+0x348>
 80036d4:	2304      	movs	r3, #4
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e070      	b.n	80037bc <UART_SetConfig+0x348>
 80036da:	2308      	movs	r3, #8
 80036dc:	77fb      	strb	r3, [r7, #31]
 80036de:	e06d      	b.n	80037bc <UART_SetConfig+0x348>
 80036e0:	2310      	movs	r3, #16
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e06a      	b.n	80037bc <UART_SetConfig+0x348>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003758 <UART_SetConfig+0x2e4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d138      	bne.n	8003762 <UART_SetConfig+0x2ee>
 80036f0:	4b13      	ldr	r3, [pc, #76]	@ (8003740 <UART_SetConfig+0x2cc>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80036fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036fe:	d017      	beq.n	8003730 <UART_SetConfig+0x2bc>
 8003700:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003704:	d82a      	bhi.n	800375c <UART_SetConfig+0x2e8>
 8003706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800370a:	d00b      	beq.n	8003724 <UART_SetConfig+0x2b0>
 800370c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003710:	d824      	bhi.n	800375c <UART_SetConfig+0x2e8>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <UART_SetConfig+0x2aa>
 8003716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800371a:	d006      	beq.n	800372a <UART_SetConfig+0x2b6>
 800371c:	e01e      	b.n	800375c <UART_SetConfig+0x2e8>
 800371e:	2300      	movs	r3, #0
 8003720:	77fb      	strb	r3, [r7, #31]
 8003722:	e04b      	b.n	80037bc <UART_SetConfig+0x348>
 8003724:	2302      	movs	r3, #2
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e048      	b.n	80037bc <UART_SetConfig+0x348>
 800372a:	2304      	movs	r3, #4
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e045      	b.n	80037bc <UART_SetConfig+0x348>
 8003730:	2308      	movs	r3, #8
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e042      	b.n	80037bc <UART_SetConfig+0x348>
 8003736:	bf00      	nop
 8003738:	efff69f3 	.word	0xefff69f3
 800373c:	40011000 	.word	0x40011000
 8003740:	40023800 	.word	0x40023800
 8003744:	40004400 	.word	0x40004400
 8003748:	40004800 	.word	0x40004800
 800374c:	40004c00 	.word	0x40004c00
 8003750:	40005000 	.word	0x40005000
 8003754:	40011400 	.word	0x40011400
 8003758:	40007800 	.word	0x40007800
 800375c:	2310      	movs	r3, #16
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	e02c      	b.n	80037bc <UART_SetConfig+0x348>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a72      	ldr	r2, [pc, #456]	@ (8003930 <UART_SetConfig+0x4bc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d125      	bne.n	80037b8 <UART_SetConfig+0x344>
 800376c:	4b71      	ldr	r3, [pc, #452]	@ (8003934 <UART_SetConfig+0x4c0>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003772:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003776:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800377a:	d017      	beq.n	80037ac <UART_SetConfig+0x338>
 800377c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003780:	d817      	bhi.n	80037b2 <UART_SetConfig+0x33e>
 8003782:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003786:	d00b      	beq.n	80037a0 <UART_SetConfig+0x32c>
 8003788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800378c:	d811      	bhi.n	80037b2 <UART_SetConfig+0x33e>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <UART_SetConfig+0x326>
 8003792:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003796:	d006      	beq.n	80037a6 <UART_SetConfig+0x332>
 8003798:	e00b      	b.n	80037b2 <UART_SetConfig+0x33e>
 800379a:	2300      	movs	r3, #0
 800379c:	77fb      	strb	r3, [r7, #31]
 800379e:	e00d      	b.n	80037bc <UART_SetConfig+0x348>
 80037a0:	2302      	movs	r3, #2
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e00a      	b.n	80037bc <UART_SetConfig+0x348>
 80037a6:	2304      	movs	r3, #4
 80037a8:	77fb      	strb	r3, [r7, #31]
 80037aa:	e007      	b.n	80037bc <UART_SetConfig+0x348>
 80037ac:	2308      	movs	r3, #8
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e004      	b.n	80037bc <UART_SetConfig+0x348>
 80037b2:	2310      	movs	r3, #16
 80037b4:	77fb      	strb	r3, [r7, #31]
 80037b6:	e001      	b.n	80037bc <UART_SetConfig+0x348>
 80037b8:	2310      	movs	r3, #16
 80037ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037c4:	d15b      	bne.n	800387e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80037c6:	7ffb      	ldrb	r3, [r7, #31]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d828      	bhi.n	800381e <UART_SetConfig+0x3aa>
 80037cc:	a201      	add	r2, pc, #4	@ (adr r2, 80037d4 <UART_SetConfig+0x360>)
 80037ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d2:	bf00      	nop
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	08003801 	.word	0x08003801
 80037dc:	08003809 	.word	0x08003809
 80037e0:	0800381f 	.word	0x0800381f
 80037e4:	0800380f 	.word	0x0800380f
 80037e8:	0800381f 	.word	0x0800381f
 80037ec:	0800381f 	.word	0x0800381f
 80037f0:	0800381f 	.word	0x0800381f
 80037f4:	08003817 	.word	0x08003817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7fe fd92 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 80037fc:	61b8      	str	r0, [r7, #24]
        break;
 80037fe:	e013      	b.n	8003828 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003800:	f7fe fda2 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 8003804:	61b8      	str	r0, [r7, #24]
        break;
 8003806:	e00f      	b.n	8003828 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003808:	4b4b      	ldr	r3, [pc, #300]	@ (8003938 <UART_SetConfig+0x4c4>)
 800380a:	61bb      	str	r3, [r7, #24]
        break;
 800380c:	e00c      	b.n	8003828 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380e:	f7fe fcb5 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8003812:	61b8      	str	r0, [r7, #24]
        break;
 8003814:	e008      	b.n	8003828 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800381a:	61bb      	str	r3, [r7, #24]
        break;
 800381c:	e004      	b.n	8003828 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	77bb      	strb	r3, [r7, #30]
        break;
 8003826:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d074      	beq.n	8003918 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	005a      	lsls	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	441a      	add	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b0f      	cmp	r3, #15
 8003848:	d916      	bls.n	8003878 <UART_SetConfig+0x404>
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003850:	d212      	bcs.n	8003878 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	b29b      	uxth	r3, r3
 8003856:	f023 030f 	bic.w	r3, r3, #15
 800385a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	b29b      	uxth	r3, r3
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	b29a      	uxth	r2, r3
 8003868:	89fb      	ldrh	r3, [r7, #14]
 800386a:	4313      	orrs	r3, r2
 800386c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	89fa      	ldrh	r2, [r7, #14]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	e04f      	b.n	8003918 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	77bb      	strb	r3, [r7, #30]
 800387c:	e04c      	b.n	8003918 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d828      	bhi.n	80038d6 <UART_SetConfig+0x462>
 8003884:	a201      	add	r2, pc, #4	@ (adr r2, 800388c <UART_SetConfig+0x418>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038d7 	.word	0x080038d7
 800389c:	080038c7 	.word	0x080038c7
 80038a0:	080038d7 	.word	0x080038d7
 80038a4:	080038d7 	.word	0x080038d7
 80038a8:	080038d7 	.word	0x080038d7
 80038ac:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7fe fd36 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 80038b4:	61b8      	str	r0, [r7, #24]
        break;
 80038b6:	e013      	b.n	80038e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7fe fd46 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e00f      	b.n	80038e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003938 <UART_SetConfig+0x4c4>)
 80038c2:	61bb      	str	r3, [r7, #24]
        break;
 80038c4:	e00c      	b.n	80038e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe fc59 	bl	800217c <HAL_RCC_GetSysClockFreq>
 80038ca:	61b8      	str	r0, [r7, #24]
        break;
 80038cc:	e008      	b.n	80038e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038d2:	61bb      	str	r3, [r7, #24]
        break;
 80038d4:	e004      	b.n	80038e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	77bb      	strb	r3, [r7, #30]
        break;
 80038de:	bf00      	nop
    }

    if (pclk != 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	085a      	lsrs	r2, r3, #1
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	441a      	add	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b0f      	cmp	r3, #15
 80038fe:	d909      	bls.n	8003914 <UART_SetConfig+0x4a0>
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003906:	d205      	bcs.n	8003914 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	e001      	b.n	8003918 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003924:	7fbb      	ldrb	r3, [r7, #30]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40007c00 	.word	0x40007c00
 8003934:	40023800 	.word	0x40023800
 8003938:	00f42400 	.word	0x00f42400

0800393c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01a      	beq.n	8003a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a3a:	d10a      	bne.n	8003a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
  }
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08c      	sub	sp, #48	@ 0x30
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a90:	f7fd fc1e 	bl	80012d0 <HAL_GetTick>
 8003a94:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d12e      	bne.n	8003b02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	2200      	movs	r2, #0
 8003aae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f83b 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d021      	beq.n	8003b02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	e853 3f00 	ldrex	r3, [r3]
 8003aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	69b9      	ldr	r1, [r7, #24]
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e6      	bne.n	8003abe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e011      	b.n	8003b26 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3728      	adds	r7, #40	@ 0x28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3e:	e04f      	b.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b46:	d04b      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b48:	f7fd fbc2 	bl	80012d0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d302      	bcc.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e04e      	b.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d037      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b80      	cmp	r3, #128	@ 0x80
 8003b74:	d034      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b40      	cmp	r3, #64	@ 0x40
 8003b7a:	d031      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d110      	bne.n	8003bac <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2208      	movs	r2, #8
 8003b90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f838 	bl	8003c08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e029      	b.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bba:	d111      	bne.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bc4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f81e 	bl	8003c08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e00f      	b.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	4013      	ands	r3, r2
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d0a0      	beq.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b095      	sub	sp, #84	@ 0x54
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e6      	bne.n	8003c10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3308      	adds	r3, #8
 8003c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3308      	adds	r3, #8
 8003c60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e5      	bne.n	8003c42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d118      	bne.n	8003cb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f023 0310 	bic.w	r3, r3, #16
 8003c92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6979      	ldr	r1, [r7, #20]
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e6      	bne.n	8003c7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003cc4:	bf00      	nop
 8003cc6:	3754      	adds	r7, #84	@ 0x54
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7ff fbaa 	bl	8003448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6979      	ldr	r1, [r7, #20]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e6      	bne.n	8003d04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fb76 	bl	8003434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d48:	bf00      	nop
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d62:	2b84      	cmp	r3, #132	@ 0x84
 8003d64:	d005      	beq.n	8003d72 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3303      	adds	r3, #3
 8003d70:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d72:	68fb      	ldr	r3, [r7, #12]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d84:	f000 fd00 	bl	8004788 <vTaskStartScheduler>
  
  return osOK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d90:	b089      	sub	sp, #36	@ 0x24
 8003d92:	af04      	add	r7, sp, #16
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <osThreadCreate+0x54>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01c      	beq.n	8003de2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685c      	ldr	r4, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691e      	ldr	r6, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ffc8 	bl	8003d50 <makeFreeRtosPriority>
 8003dc0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dca:	9202      	str	r2, [sp, #8]
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	9100      	str	r1, [sp, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	4632      	mov	r2, r6
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f000 f9bc 	bl	8004154 <xTaskCreateStatic>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e01c      	b.n	8003e1c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685c      	ldr	r4, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dee:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff ffaa 	bl	8003d50 <makeFreeRtosPriority>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	f107 030c 	add.w	r3, r7, #12
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	9200      	str	r2, [sp, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	4632      	mov	r2, r6
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f000 fa07 	bl	8004220 <xTaskCreate>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d001      	beq.n	8003e1c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <osDelay+0x16>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	e000      	b.n	8003e3e <osDelay+0x18>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fb40 	bl	80044c4 <vTaskDelay>
  
  return osOK;
 8003e44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f103 0208 	add.w	r2, r3, #8
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f04f 32ff 	mov.w	r2, #4294967295
 8003e66:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f103 0208 	add.w	r2, r3, #8
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f103 0208 	add.w	r2, r3, #8
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	601a      	str	r2, [r3, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f06:	d103      	bne.n	8003f10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	e00c      	b.n	8003f2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3308      	adds	r3, #8
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e002      	b.n	8003f1e <vListInsert+0x2e>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d2f6      	bcs.n	8003f18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	601a      	str	r2, [r3, #0]
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6892      	ldr	r2, [r2, #8]
 8003f78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6852      	ldr	r2, [r2, #4]
 8003f82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d103      	bne.n	8003f96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10d      	bne.n	8003fe8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd0:	b672      	cpsid	i
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	b662      	cpsie	i
 8003fe0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003fe2:	bf00      	nop
 8003fe4:	bf00      	nop
 8003fe6:	e7fd      	b.n	8003fe4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003fe8:	f001 f8e0 	bl	80051ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff4:	68f9      	ldr	r1, [r7, #12]
 8003ff6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	441a      	add	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004018:	3b01      	subs	r3, #1
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	441a      	add	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	22ff      	movs	r2, #255	@ 0xff
 800402c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	22ff      	movs	r2, #255	@ 0xff
 8004034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d114      	bne.n	8004068 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01a      	beq.n	800407c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3310      	adds	r3, #16
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fdda 	bl	8004c04 <xTaskRemoveFromEventList>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d012      	beq.n	800407c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004056:	4b0d      	ldr	r3, [pc, #52]	@ (800408c <xQueueGenericReset+0xd4>)
 8004058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	e009      	b.n	800407c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3310      	adds	r3, #16
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff feee 	bl	8003e4e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3324      	adds	r3, #36	@ 0x24
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fee9 	bl	8003e4e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800407c:	f001 f8cc 	bl	8005218 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004080:	2301      	movs	r3, #1
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	e000ed04 	.word	0xe000ed04

08004090 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	@ 0x28
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	4613      	mov	r3, r2
 800409c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10d      	bne.n	80040c0 <xQueueGenericCreate+0x30>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a8:	b672      	cpsid	i
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	b662      	cpsie	i
 80040b8:	613b      	str	r3, [r7, #16]
}
 80040ba:	bf00      	nop
 80040bc:	bf00      	nop
 80040be:	e7fd      	b.n	80040bc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	e004      	b.n	80040d6 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	fb02 f303 	mul.w	r3, r2, r3
 80040d4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3348      	adds	r3, #72	@ 0x48
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 f94e 	bl	800537c <pvPortMalloc>
 80040e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d011      	beq.n	800410c <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3348      	adds	r3, #72	@ 0x48
 80040f0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040fa:	79fa      	ldrb	r2, [r7, #7]
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f805 	bl	8004116 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800410c:	69bb      	ldr	r3, [r7, #24]
	}
 800410e:	4618      	mov	r0, r3
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d103      	bne.n	8004132 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e002      	b.n	8004138 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004144:	2101      	movs	r1, #1
 8004146:	69b8      	ldr	r0, [r7, #24]
 8004148:	f7ff ff36 	bl	8003fb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08e      	sub	sp, #56	@ 0x38
 8004158:	af04      	add	r7, sp, #16
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10d      	bne.n	8004184 <xTaskCreateStatic+0x30>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	b672      	cpsid	i
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	b662      	cpsie	i
 800417c:	623b      	str	r3, [r7, #32]
}
 800417e:	bf00      	nop
 8004180:	bf00      	nop
 8004182:	e7fd      	b.n	8004180 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10d      	bne.n	80041a6 <xTaskCreateStatic+0x52>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418e:	b672      	cpsid	i
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	b662      	cpsie	i
 800419e:	61fb      	str	r3, [r7, #28]
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	e7fd      	b.n	80041a2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041a6:	23a0      	movs	r3, #160	@ 0xa0
 80041a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80041ae:	d00d      	beq.n	80041cc <xTaskCreateStatic+0x78>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b4:	b672      	cpsid	i
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	b662      	cpsie	i
 80041c4:	61bb      	str	r3, [r7, #24]
}
 80041c6:	bf00      	nop
 80041c8:	bf00      	nop
 80041ca:	e7fd      	b.n	80041c8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01e      	beq.n	8004212 <xTaskCreateStatic+0xbe>
 80041d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01b      	beq.n	8004212 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041ec:	2300      	movs	r3, #0
 80041ee:	9303      	str	r3, [sp, #12]
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	9302      	str	r3, [sp, #8]
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f851 	bl	80042ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800420a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800420c:	f000 f8f0 	bl	80043f0 <prvAddNewTaskToReadyList>
 8004210:	e001      	b.n	8004216 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004216:	697b      	ldr	r3, [r7, #20]
	}
 8004218:	4618      	mov	r0, r3
 800421a:	3728      	adds	r7, #40	@ 0x28
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08c      	sub	sp, #48	@ 0x30
 8004224:	af04      	add	r7, sp, #16
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4618      	mov	r0, r3
 8004236:	f001 f8a1 	bl	800537c <pvPortMalloc>
 800423a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00e      	beq.n	8004260 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004242:	20a0      	movs	r0, #160	@ 0xa0
 8004244:	f001 f89a 	bl	800537c <pvPortMalloc>
 8004248:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	631a      	str	r2, [r3, #48]	@ 0x30
 8004256:	e005      	b.n	8004264 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004258:	6978      	ldr	r0, [r7, #20]
 800425a:	f001 f95d 	bl	8005518 <vPortFree>
 800425e:	e001      	b.n	8004264 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d017      	beq.n	800429a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004272:	88fa      	ldrh	r2, [r7, #6]
 8004274:	2300      	movs	r3, #0
 8004276:	9303      	str	r3, [sp, #12]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	9302      	str	r3, [sp, #8]
 800427c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f80f 	bl	80042ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800428e:	69f8      	ldr	r0, [r7, #28]
 8004290:	f000 f8ae 	bl	80043f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004294:	2301      	movs	r3, #1
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e002      	b.n	80042a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042a0:	69bb      	ldr	r3, [r7, #24]
	}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80042c4:	440b      	add	r3, r1
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f023 0307 	bic.w	r3, r3, #7
 80042d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00d      	beq.n	80042fa <prvInitialiseNewTask+0x4e>
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e2:	b672      	cpsid	i
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	b662      	cpsie	i
 80042f2:	617b      	str	r3, [r7, #20]
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	e7fd      	b.n	80042f6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01f      	beq.n	8004340 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004300:	2300      	movs	r3, #0
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	e012      	b.n	800432c <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	4413      	add	r3, r2
 800430c:	7819      	ldrb	r1, [r3, #0]
 800430e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	4413      	add	r3, r2
 8004314:	3334      	adds	r3, #52	@ 0x34
 8004316:	460a      	mov	r2, r1
 8004318:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	4413      	add	r3, r2
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d006      	beq.n	8004334 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3301      	adds	r3, #1
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2b0f      	cmp	r3, #15
 8004330:	d9e9      	bls.n	8004306 <prvInitialiseNewTask+0x5a>
 8004332:	e000      	b.n	8004336 <prvInitialiseNewTask+0x8a>
			{
				break;
 8004334:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800433e:	e003      	b.n	8004348 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434a:	2b06      	cmp	r3, #6
 800434c:	d901      	bls.n	8004352 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800434e:	2306      	movs	r3, #6
 8004350:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004356:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800435c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800435e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004360:	2200      	movs	r2, #0
 8004362:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	3304      	adds	r3, #4
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fd90 	bl	8003e8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800436e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004370:	3318      	adds	r3, #24
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fd8b 	bl	8003e8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800437c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004380:	f1c3 0207 	rsb	r2, r3, #7
 8004384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004386:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	2200      	movs	r2, #0
 8004392:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004398:	2200      	movs	r2, #0
 800439a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a0:	334c      	adds	r3, #76	@ 0x4c
 80043a2:	224c      	movs	r2, #76	@ 0x4c
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f001 fc9a 	bl	8005ce0 <memset>
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	4a0d      	ldr	r2, [pc, #52]	@ (80043e4 <prvInitialiseNewTask+0x138>)
 80043b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80043b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b4:	4a0c      	ldr	r2, [pc, #48]	@ (80043e8 <prvInitialiseNewTask+0x13c>)
 80043b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	4a0c      	ldr	r2, [pc, #48]	@ (80043ec <prvInitialiseNewTask+0x140>)
 80043bc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	69b8      	ldr	r0, [r7, #24]
 80043c4:	f000 fde6 	bl	8004f94 <pxPortInitialiseStack>
 80043c8:	4602      	mov	r2, r0
 80043ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043da:	bf00      	nop
 80043dc:	3720      	adds	r7, #32
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20004528 	.word	0x20004528
 80043e8:	20004590 	.word	0x20004590
 80043ec:	200045f8 	.word	0x200045f8

080043f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043f8:	f000 fed8 	bl	80051ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043fc:	4b2a      	ldr	r3, [pc, #168]	@ (80044a8 <prvAddNewTaskToReadyList+0xb8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	4a29      	ldr	r2, [pc, #164]	@ (80044a8 <prvAddNewTaskToReadyList+0xb8>)
 8004404:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004406:	4b29      	ldr	r3, [pc, #164]	@ (80044ac <prvAddNewTaskToReadyList+0xbc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800440e:	4a27      	ldr	r2, [pc, #156]	@ (80044ac <prvAddNewTaskToReadyList+0xbc>)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004414:	4b24      	ldr	r3, [pc, #144]	@ (80044a8 <prvAddNewTaskToReadyList+0xb8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d110      	bne.n	800443e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800441c:	f000 fc70 	bl	8004d00 <prvInitialiseTaskLists>
 8004420:	e00d      	b.n	800443e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004422:	4b23      	ldr	r3, [pc, #140]	@ (80044b0 <prvAddNewTaskToReadyList+0xc0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800442a:	4b20      	ldr	r3, [pc, #128]	@ (80044ac <prvAddNewTaskToReadyList+0xbc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	429a      	cmp	r2, r3
 8004436:	d802      	bhi.n	800443e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004438:	4a1c      	ldr	r2, [pc, #112]	@ (80044ac <prvAddNewTaskToReadyList+0xbc>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800443e:	4b1d      	ldr	r3, [pc, #116]	@ (80044b4 <prvAddNewTaskToReadyList+0xc4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3301      	adds	r3, #1
 8004444:	4a1b      	ldr	r2, [pc, #108]	@ (80044b4 <prvAddNewTaskToReadyList+0xc4>)
 8004446:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	4b19      	ldr	r3, [pc, #100]	@ (80044b8 <prvAddNewTaskToReadyList+0xc8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4313      	orrs	r3, r2
 8004456:	4a18      	ldr	r2, [pc, #96]	@ (80044b8 <prvAddNewTaskToReadyList+0xc8>)
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4a15      	ldr	r2, [pc, #84]	@ (80044bc <prvAddNewTaskToReadyList+0xcc>)
 8004468:	441a      	add	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3304      	adds	r3, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7ff fd19 	bl	8003ea8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004476:	f000 fecf 	bl	8005218 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800447a:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <prvAddNewTaskToReadyList+0xc0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00e      	beq.n	80044a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004482:	4b0a      	ldr	r3, [pc, #40]	@ (80044ac <prvAddNewTaskToReadyList+0xbc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	429a      	cmp	r2, r3
 800448e:	d207      	bcs.n	80044a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004490:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <prvAddNewTaskToReadyList+0xd0>)
 8004492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	200008dc 	.word	0x200008dc
 80044ac:	200007dc 	.word	0x200007dc
 80044b0:	200008e8 	.word	0x200008e8
 80044b4:	200008f8 	.word	0x200008f8
 80044b8:	200008e4 	.word	0x200008e4
 80044bc:	200007e0 	.word	0x200007e0
 80044c0:	e000ed04 	.word	0xe000ed04

080044c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d01a      	beq.n	800450c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044d6:	4b15      	ldr	r3, [pc, #84]	@ (800452c <vTaskDelay+0x68>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00d      	beq.n	80044fa <vTaskDelay+0x36>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e2:	b672      	cpsid	i
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	b662      	cpsie	i
 80044f2:	60bb      	str	r3, [r7, #8]
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	e7fd      	b.n	80044f6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80044fa:	f000 f9b3 	bl	8004864 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044fe:	2100      	movs	r1, #0
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fce1 	bl	8004ec8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004506:	f000 f9bb 	bl	8004880 <xTaskResumeAll>
 800450a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d107      	bne.n	8004522 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8004512:	4b07      	ldr	r3, [pc, #28]	@ (8004530 <vTaskDelay+0x6c>)
 8004514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20000904 	.word	0x20000904
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800453c:	f000 fe36 	bl	80051ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d102      	bne.n	800454c <vTaskSuspend+0x18>
 8004546:	4b3e      	ldr	r3, [pc, #248]	@ (8004640 <vTaskSuspend+0x10c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	e000      	b.n	800454e <vTaskSuspend+0x1a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3304      	adds	r3, #4
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fd04 	bl	8003f62 <uxListRemove>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d115      	bne.n	800458c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004564:	4937      	ldr	r1, [pc, #220]	@ (8004644 <vTaskSuspend+0x110>)
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <vTaskSuspend+0x58>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	2201      	movs	r2, #1
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43da      	mvns	r2, r3
 8004582:	4b31      	ldr	r3, [pc, #196]	@ (8004648 <vTaskSuspend+0x114>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4013      	ands	r3, r2
 8004588:	4a2f      	ldr	r2, [pc, #188]	@ (8004648 <vTaskSuspend+0x114>)
 800458a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	2b00      	cmp	r3, #0
 8004592:	d004      	beq.n	800459e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3318      	adds	r3, #24
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fce2 	bl	8003f62 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3304      	adds	r3, #4
 80045a2:	4619      	mov	r1, r3
 80045a4:	4829      	ldr	r0, [pc, #164]	@ (800464c <vTaskSuspend+0x118>)
 80045a6:	f7ff fc7f 	bl	8003ea8 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d103      	bne.n	80045be <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80045be:	f000 fe2b 	bl	8005218 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80045c2:	4b23      	ldr	r3, [pc, #140]	@ (8004650 <vTaskSuspend+0x11c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80045ca:	f000 fdef 	bl	80051ac <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80045ce:	f000 fc3d 	bl	8004e4c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80045d2:	f000 fe21 	bl	8005218 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80045d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004640 <vTaskSuspend+0x10c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d12a      	bne.n	8004636 <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 80045e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004650 <vTaskSuspend+0x11c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01a      	beq.n	800461e <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80045e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004654 <vTaskSuspend+0x120>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00d      	beq.n	800460c <vTaskSuspend+0xd8>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f4:	b672      	cpsid	i
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	b662      	cpsie	i
 8004604:	60bb      	str	r3, [r7, #8]
}
 8004606:	bf00      	nop
 8004608:	bf00      	nop
 800460a:	e7fd      	b.n	8004608 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 800460c:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <vTaskSuspend+0x124>)
 800460e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800461c:	e00b      	b.n	8004636 <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800461e:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <vTaskSuspend+0x118>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4b0e      	ldr	r3, [pc, #56]	@ (800465c <vTaskSuspend+0x128>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d103      	bne.n	8004632 <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 800462a:	4b05      	ldr	r3, [pc, #20]	@ (8004640 <vTaskSuspend+0x10c>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
	}
 8004630:	e001      	b.n	8004636 <vTaskSuspend+0x102>
					vTaskSwitchContext();
 8004632:	f000 fa81 	bl	8004b38 <vTaskSwitchContext>
	}
 8004636:	bf00      	nop
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	200007dc 	.word	0x200007dc
 8004644:	200007e0 	.word	0x200007e0
 8004648:	200008e4 	.word	0x200008e4
 800464c:	200008c8 	.word	0x200008c8
 8004650:	200008e8 	.word	0x200008e8
 8004654:	20000904 	.word	0x20000904
 8004658:	e000ed04 	.word	0xe000ed04
 800465c:	200008dc 	.word	0x200008dc

08004660 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10d      	bne.n	8004692 <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467a:	b672      	cpsid	i
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	b662      	cpsie	i
 800468a:	60fb      	str	r3, [r7, #12]
}
 800468c:	bf00      	nop
 800468e:	bf00      	nop
 8004690:	e7fd      	b.n	800468e <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	4a0a      	ldr	r2, [pc, #40]	@ (80046c0 <prvTaskIsTaskSuspended+0x60>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10a      	bne.n	80046b2 <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a0:	4a08      	ldr	r2, [pc, #32]	@ (80046c4 <prvTaskIsTaskSuspended+0x64>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d005      	beq.n	80046b2 <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 80046ae:	2301      	movs	r3, #1
 80046b0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046b2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80046b4:	4618      	mov	r0, r3
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	200008c8 	.word	0x200008c8
 80046c4:	2000089c 	.word	0x2000089c

080046c8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10d      	bne.n	80046f6 <vTaskResume+0x2e>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046de:	b672      	cpsid	i
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	b662      	cpsie	i
 80046ee:	60bb      	str	r3, [r7, #8]
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	e7fd      	b.n	80046f2 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80046f6:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <vTaskResume+0xb0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d037      	beq.n	8004770 <vTaskResume+0xa8>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d034      	beq.n	8004770 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8004706:	f000 fd51 	bl	80051ac <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7ff ffa8 	bl	8004660 <prvTaskIsTaskSuspended>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d02a      	beq.n	800476c <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3304      	adds	r3, #4
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fc21 	bl	8003f62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004724:	2201      	movs	r2, #1
 8004726:	409a      	lsls	r2, r3
 8004728:	4b14      	ldr	r3, [pc, #80]	@ (800477c <vTaskResume+0xb4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4313      	orrs	r3, r2
 800472e:	4a13      	ldr	r2, [pc, #76]	@ (800477c <vTaskResume+0xb4>)
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4a10      	ldr	r2, [pc, #64]	@ (8004780 <vTaskResume+0xb8>)
 8004740:	441a      	add	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3304      	adds	r3, #4
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f7ff fbad 	bl	8003ea8 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004752:	4b09      	ldr	r3, [pc, #36]	@ (8004778 <vTaskResume+0xb0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	429a      	cmp	r2, r3
 800475a:	d307      	bcc.n	800476c <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800475c:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <vTaskResume+0xbc>)
 800475e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800476c:	f000 fd54 	bl	8005218 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	200007dc 	.word	0x200007dc
 800477c:	200008e4 	.word	0x200008e4
 8004780:	200007e0 	.word	0x200007e0
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	@ 0x28
 800478c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004792:	2300      	movs	r3, #0
 8004794:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004796:	463a      	mov	r2, r7
 8004798:	1d39      	adds	r1, r7, #4
 800479a:	f107 0308 	add.w	r3, r7, #8
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fb ff1c 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	9202      	str	r2, [sp, #8]
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	2300      	movs	r3, #0
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2300      	movs	r3, #0
 80047b4:	460a      	mov	r2, r1
 80047b6:	4923      	ldr	r1, [pc, #140]	@ (8004844 <vTaskStartScheduler+0xbc>)
 80047b8:	4823      	ldr	r0, [pc, #140]	@ (8004848 <vTaskStartScheduler+0xc0>)
 80047ba:	f7ff fccb 	bl	8004154 <xTaskCreateStatic>
 80047be:	4603      	mov	r3, r0
 80047c0:	4a22      	ldr	r2, [pc, #136]	@ (800484c <vTaskStartScheduler+0xc4>)
 80047c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047c4:	4b21      	ldr	r3, [pc, #132]	@ (800484c <vTaskStartScheduler+0xc4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047cc:	2301      	movs	r3, #1
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e001      	b.n	80047d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d11d      	bne.n	8004818 <vTaskStartScheduler+0x90>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e0:	b672      	cpsid	i
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	b662      	cpsie	i
 80047f0:	613b      	str	r3, [r7, #16]
}
 80047f2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047f4:	4b16      	ldr	r3, [pc, #88]	@ (8004850 <vTaskStartScheduler+0xc8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	334c      	adds	r3, #76	@ 0x4c
 80047fa:	4a16      	ldr	r2, [pc, #88]	@ (8004854 <vTaskStartScheduler+0xcc>)
 80047fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047fe:	4b16      	ldr	r3, [pc, #88]	@ (8004858 <vTaskStartScheduler+0xd0>)
 8004800:	f04f 32ff 	mov.w	r2, #4294967295
 8004804:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004806:	4b15      	ldr	r3, [pc, #84]	@ (800485c <vTaskStartScheduler+0xd4>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800480c:	4b14      	ldr	r3, [pc, #80]	@ (8004860 <vTaskStartScheduler+0xd8>)
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004812:	f000 fc4d 	bl	80050b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004816:	e011      	b.n	800483c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d10d      	bne.n	800483c <vTaskStartScheduler+0xb4>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004824:	b672      	cpsid	i
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	b662      	cpsie	i
 8004834:	60fb      	str	r3, [r7, #12]
}
 8004836:	bf00      	nop
 8004838:	bf00      	nop
 800483a:	e7fd      	b.n	8004838 <vTaskStartScheduler+0xb0>
}
 800483c:	bf00      	nop
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	08006f04 	.word	0x08006f04
 8004848:	08004cd1 	.word	0x08004cd1
 800484c:	20000900 	.word	0x20000900
 8004850:	200007dc 	.word	0x200007dc
 8004854:	20000024 	.word	0x20000024
 8004858:	200008fc 	.word	0x200008fc
 800485c:	200008e8 	.word	0x200008e8
 8004860:	200008e0 	.word	0x200008e0

08004864 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004868:	4b04      	ldr	r3, [pc, #16]	@ (800487c <vTaskSuspendAll+0x18>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	4a03      	ldr	r2, [pc, #12]	@ (800487c <vTaskSuspendAll+0x18>)
 8004870:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004872:	bf00      	nop
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	20000904 	.word	0x20000904

08004880 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800488a:	2300      	movs	r3, #0
 800488c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800488e:	4b43      	ldr	r3, [pc, #268]	@ (800499c <xTaskResumeAll+0x11c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10d      	bne.n	80048b2 <xTaskResumeAll+0x32>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489a:	b672      	cpsid	i
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	b662      	cpsie	i
 80048aa:	603b      	str	r3, [r7, #0]
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048b2:	f000 fc7b 	bl	80051ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048b6:	4b39      	ldr	r3, [pc, #228]	@ (800499c <xTaskResumeAll+0x11c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	4a37      	ldr	r2, [pc, #220]	@ (800499c <xTaskResumeAll+0x11c>)
 80048be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c0:	4b36      	ldr	r3, [pc, #216]	@ (800499c <xTaskResumeAll+0x11c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d161      	bne.n	800498c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048c8:	4b35      	ldr	r3, [pc, #212]	@ (80049a0 <xTaskResumeAll+0x120>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d05d      	beq.n	800498c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048d0:	e02e      	b.n	8004930 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048d2:	4b34      	ldr	r3, [pc, #208]	@ (80049a4 <xTaskResumeAll+0x124>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3318      	adds	r3, #24
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff fb3f 	bl	8003f62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff fb3a 	bl	8003f62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f2:	2201      	movs	r2, #1
 80048f4:	409a      	lsls	r2, r3
 80048f6:	4b2c      	ldr	r3, [pc, #176]	@ (80049a8 <xTaskResumeAll+0x128>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	4a2a      	ldr	r2, [pc, #168]	@ (80049a8 <xTaskResumeAll+0x128>)
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4a27      	ldr	r2, [pc, #156]	@ (80049ac <xTaskResumeAll+0x12c>)
 800490e:	441a      	add	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3304      	adds	r3, #4
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f7ff fac6 	bl	8003ea8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004920:	4b23      	ldr	r3, [pc, #140]	@ (80049b0 <xTaskResumeAll+0x130>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004926:	429a      	cmp	r2, r3
 8004928:	d302      	bcc.n	8004930 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800492a:	4b22      	ldr	r3, [pc, #136]	@ (80049b4 <xTaskResumeAll+0x134>)
 800492c:	2201      	movs	r2, #1
 800492e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004930:	4b1c      	ldr	r3, [pc, #112]	@ (80049a4 <xTaskResumeAll+0x124>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1cc      	bne.n	80048d2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800493e:	f000 fa85 	bl	8004e4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004942:	4b1d      	ldr	r3, [pc, #116]	@ (80049b8 <xTaskResumeAll+0x138>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d010      	beq.n	8004970 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800494e:	f000 f837 	bl	80049c0 <xTaskIncrementTick>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004958:	4b16      	ldr	r3, [pc, #88]	@ (80049b4 <xTaskResumeAll+0x134>)
 800495a:	2201      	movs	r2, #1
 800495c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3b01      	subs	r3, #1
 8004962:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f1      	bne.n	800494e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800496a:	4b13      	ldr	r3, [pc, #76]	@ (80049b8 <xTaskResumeAll+0x138>)
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004970:	4b10      	ldr	r3, [pc, #64]	@ (80049b4 <xTaskResumeAll+0x134>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d009      	beq.n	800498c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004978:	2301      	movs	r3, #1
 800497a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800497c:	4b0f      	ldr	r3, [pc, #60]	@ (80049bc <xTaskResumeAll+0x13c>)
 800497e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800498c:	f000 fc44 	bl	8005218 <vPortExitCritical>

	return xAlreadyYielded;
 8004990:	68bb      	ldr	r3, [r7, #8]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000904 	.word	0x20000904
 80049a0:	200008dc 	.word	0x200008dc
 80049a4:	2000089c 	.word	0x2000089c
 80049a8:	200008e4 	.word	0x200008e4
 80049ac:	200007e0 	.word	0x200007e0
 80049b0:	200007dc 	.word	0x200007dc
 80049b4:	200008f0 	.word	0x200008f0
 80049b8:	200008ec 	.word	0x200008ec
 80049bc:	e000ed04 	.word	0xe000ed04

080049c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ca:	4b50      	ldr	r3, [pc, #320]	@ (8004b0c <xTaskIncrementTick+0x14c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f040 808b 	bne.w	8004aea <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049d4:	4b4e      	ldr	r3, [pc, #312]	@ (8004b10 <xTaskIncrementTick+0x150>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3301      	adds	r3, #1
 80049da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049dc:	4a4c      	ldr	r2, [pc, #304]	@ (8004b10 <xTaskIncrementTick+0x150>)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d123      	bne.n	8004a30 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80049e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004b14 <xTaskIncrementTick+0x154>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <xTaskIncrementTick+0x4e>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f6:	b672      	cpsid	i
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	b662      	cpsie	i
 8004a06:	603b      	str	r3, [r7, #0]
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	e7fd      	b.n	8004a0a <xTaskIncrementTick+0x4a>
 8004a0e:	4b41      	ldr	r3, [pc, #260]	@ (8004b14 <xTaskIncrementTick+0x154>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	4b40      	ldr	r3, [pc, #256]	@ (8004b18 <xTaskIncrementTick+0x158>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a3e      	ldr	r2, [pc, #248]	@ (8004b14 <xTaskIncrementTick+0x154>)
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	4a3e      	ldr	r2, [pc, #248]	@ (8004b18 <xTaskIncrementTick+0x158>)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	4b3e      	ldr	r3, [pc, #248]	@ (8004b1c <xTaskIncrementTick+0x15c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3301      	adds	r3, #1
 8004a28:	4a3c      	ldr	r2, [pc, #240]	@ (8004b1c <xTaskIncrementTick+0x15c>)
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	f000 fa0e 	bl	8004e4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a30:	4b3b      	ldr	r3, [pc, #236]	@ (8004b20 <xTaskIncrementTick+0x160>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d348      	bcc.n	8004acc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a3a:	4b36      	ldr	r3, [pc, #216]	@ (8004b14 <xTaskIncrementTick+0x154>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a44:	4b36      	ldr	r3, [pc, #216]	@ (8004b20 <xTaskIncrementTick+0x160>)
 8004a46:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4a:	601a      	str	r2, [r3, #0]
					break;
 8004a4c:	e03e      	b.n	8004acc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a4e:	4b31      	ldr	r3, [pc, #196]	@ (8004b14 <xTaskIncrementTick+0x154>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d203      	bcs.n	8004a6e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a66:	4a2e      	ldr	r2, [pc, #184]	@ (8004b20 <xTaskIncrementTick+0x160>)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a6c:	e02e      	b.n	8004acc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	3304      	adds	r3, #4
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fa75 	bl	8003f62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d004      	beq.n	8004a8a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	3318      	adds	r3, #24
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fa6c 	bl	8003f62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	2201      	movs	r2, #1
 8004a90:	409a      	lsls	r2, r3
 8004a92:	4b24      	ldr	r3, [pc, #144]	@ (8004b24 <xTaskIncrementTick+0x164>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	4a22      	ldr	r2, [pc, #136]	@ (8004b24 <xTaskIncrementTick+0x164>)
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8004b28 <xTaskIncrementTick+0x168>)
 8004aaa:	441a      	add	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	f7ff f9f8 	bl	8003ea8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004abc:	4b1b      	ldr	r3, [pc, #108]	@ (8004b2c <xTaskIncrementTick+0x16c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d3b9      	bcc.n	8004a3a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aca:	e7b6      	b.n	8004a3a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004acc:	4b17      	ldr	r3, [pc, #92]	@ (8004b2c <xTaskIncrementTick+0x16c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad2:	4915      	ldr	r1, [pc, #84]	@ (8004b28 <xTaskIncrementTick+0x168>)
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d907      	bls.n	8004af4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e004      	b.n	8004af4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004aea:	4b11      	ldr	r3, [pc, #68]	@ (8004b30 <xTaskIncrementTick+0x170>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3301      	adds	r3, #1
 8004af0:	4a0f      	ldr	r2, [pc, #60]	@ (8004b30 <xTaskIncrementTick+0x170>)
 8004af2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004af4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b34 <xTaskIncrementTick+0x174>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004afc:	2301      	movs	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b00:	697b      	ldr	r3, [r7, #20]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000904 	.word	0x20000904
 8004b10:	200008e0 	.word	0x200008e0
 8004b14:	20000894 	.word	0x20000894
 8004b18:	20000898 	.word	0x20000898
 8004b1c:	200008f4 	.word	0x200008f4
 8004b20:	200008fc 	.word	0x200008fc
 8004b24:	200008e4 	.word	0x200008e4
 8004b28:	200007e0 	.word	0x200007e0
 8004b2c:	200007dc 	.word	0x200007dc
 8004b30:	200008ec 	.word	0x200008ec
 8004b34:	200008f0 	.word	0x200008f0

08004b38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004bec <vTaskSwitchContext+0xb4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b46:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf0 <vTaskSwitchContext+0xb8>)
 8004b48:	2201      	movs	r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b4c:	e047      	b.n	8004bde <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004b4e:	4b28      	ldr	r3, [pc, #160]	@ (8004bf0 <vTaskSwitchContext+0xb8>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b54:	4b27      	ldr	r3, [pc, #156]	@ (8004bf4 <vTaskSwitchContext+0xbc>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	fab3 f383 	clz	r3, r3
 8004b60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b62:	7afb      	ldrb	r3, [r7, #11]
 8004b64:	f1c3 031f 	rsb	r3, r3, #31
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	4923      	ldr	r1, [pc, #140]	@ (8004bf8 <vTaskSwitchContext+0xc0>)
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10d      	bne.n	8004b9a <vTaskSwitchContext+0x62>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b82:	b672      	cpsid	i
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	b662      	cpsie	i
 8004b92:	607b      	str	r3, [r7, #4]
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	e7fd      	b.n	8004b96 <vTaskSwitchContext+0x5e>
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4a14      	ldr	r2, [pc, #80]	@ (8004bf8 <vTaskSwitchContext+0xc0>)
 8004ba6:	4413      	add	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	605a      	str	r2, [r3, #4]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d104      	bne.n	8004bca <vTaskSwitchContext+0x92>
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	605a      	str	r2, [r3, #4]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bfc <vTaskSwitchContext+0xc4>)
 8004bd2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bd4:	4b09      	ldr	r3, [pc, #36]	@ (8004bfc <vTaskSwitchContext+0xc4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	334c      	adds	r3, #76	@ 0x4c
 8004bda:	4a09      	ldr	r2, [pc, #36]	@ (8004c00 <vTaskSwitchContext+0xc8>)
 8004bdc:	6013      	str	r3, [r2, #0]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000904 	.word	0x20000904
 8004bf0:	200008f0 	.word	0x200008f0
 8004bf4:	200008e4 	.word	0x200008e4
 8004bf8:	200007e0 	.word	0x200007e0
 8004bfc:	200007dc 	.word	0x200007dc
 8004c00:	20000024 	.word	0x20000024

08004c04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10d      	bne.n	8004c36 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1e:	b672      	cpsid	i
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	b662      	cpsie	i
 8004c2e:	60fb      	str	r3, [r7, #12]
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	e7fd      	b.n	8004c32 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	3318      	adds	r3, #24
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff f991 	bl	8003f62 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c40:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb8 <xTaskRemoveFromEventList+0xb4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d11c      	bne.n	8004c82 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff f988 	bl	8003f62 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c56:	2201      	movs	r2, #1
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	4b18      	ldr	r3, [pc, #96]	@ (8004cbc <xTaskRemoveFromEventList+0xb8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	4a16      	ldr	r2, [pc, #88]	@ (8004cbc <xTaskRemoveFromEventList+0xb8>)
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4a13      	ldr	r2, [pc, #76]	@ (8004cc0 <xTaskRemoveFromEventList+0xbc>)
 8004c72:	441a      	add	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f7ff f914 	bl	8003ea8 <vListInsertEnd>
 8004c80:	e005      	b.n	8004c8e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	3318      	adds	r3, #24
 8004c86:	4619      	mov	r1, r3
 8004c88:	480e      	ldr	r0, [pc, #56]	@ (8004cc4 <xTaskRemoveFromEventList+0xc0>)
 8004c8a:	f7ff f90d 	bl	8003ea8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c92:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc8 <xTaskRemoveFromEventList+0xc4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d905      	bls.n	8004ca8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <xTaskRemoveFromEventList+0xc8>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e001      	b.n	8004cac <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004cac:	697b      	ldr	r3, [r7, #20]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000904 	.word	0x20000904
 8004cbc:	200008e4 	.word	0x200008e4
 8004cc0:	200007e0 	.word	0x200007e0
 8004cc4:	2000089c 	.word	0x2000089c
 8004cc8:	200007dc 	.word	0x200007dc
 8004ccc:	200008f0 	.word	0x200008f0

08004cd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cd8:	f000 f852 	bl	8004d80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cdc:	4b06      	ldr	r3, [pc, #24]	@ (8004cf8 <prvIdleTask+0x28>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d9f9      	bls.n	8004cd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ce4:	4b05      	ldr	r3, [pc, #20]	@ (8004cfc <prvIdleTask+0x2c>)
 8004ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cf4:	e7f0      	b.n	8004cd8 <prvIdleTask+0x8>
 8004cf6:	bf00      	nop
 8004cf8:	200007e0 	.word	0x200007e0
 8004cfc:	e000ed04 	.word	0xe000ed04

08004d00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d06:	2300      	movs	r3, #0
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	e00c      	b.n	8004d26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4a12      	ldr	r2, [pc, #72]	@ (8004d60 <prvInitialiseTaskLists+0x60>)
 8004d18:	4413      	add	r3, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff f897 	bl	8003e4e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3301      	adds	r3, #1
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b06      	cmp	r3, #6
 8004d2a:	d9ef      	bls.n	8004d0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d2c:	480d      	ldr	r0, [pc, #52]	@ (8004d64 <prvInitialiseTaskLists+0x64>)
 8004d2e:	f7ff f88e 	bl	8003e4e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d32:	480d      	ldr	r0, [pc, #52]	@ (8004d68 <prvInitialiseTaskLists+0x68>)
 8004d34:	f7ff f88b 	bl	8003e4e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d38:	480c      	ldr	r0, [pc, #48]	@ (8004d6c <prvInitialiseTaskLists+0x6c>)
 8004d3a:	f7ff f888 	bl	8003e4e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d3e:	480c      	ldr	r0, [pc, #48]	@ (8004d70 <prvInitialiseTaskLists+0x70>)
 8004d40:	f7ff f885 	bl	8003e4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d44:	480b      	ldr	r0, [pc, #44]	@ (8004d74 <prvInitialiseTaskLists+0x74>)
 8004d46:	f7ff f882 	bl	8003e4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <prvInitialiseTaskLists+0x78>)
 8004d4c:	4a05      	ldr	r2, [pc, #20]	@ (8004d64 <prvInitialiseTaskLists+0x64>)
 8004d4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d50:	4b0a      	ldr	r3, [pc, #40]	@ (8004d7c <prvInitialiseTaskLists+0x7c>)
 8004d52:	4a05      	ldr	r2, [pc, #20]	@ (8004d68 <prvInitialiseTaskLists+0x68>)
 8004d54:	601a      	str	r2, [r3, #0]
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	200007e0 	.word	0x200007e0
 8004d64:	2000086c 	.word	0x2000086c
 8004d68:	20000880 	.word	0x20000880
 8004d6c:	2000089c 	.word	0x2000089c
 8004d70:	200008b0 	.word	0x200008b0
 8004d74:	200008c8 	.word	0x200008c8
 8004d78:	20000894 	.word	0x20000894
 8004d7c:	20000898 	.word	0x20000898

08004d80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d86:	e019      	b.n	8004dbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d88:	f000 fa10 	bl	80051ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d8c:	4b10      	ldr	r3, [pc, #64]	@ (8004dd0 <prvCheckTasksWaitingTermination+0x50>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff f8e2 	bl	8003f62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd4 <prvCheckTasksWaitingTermination+0x54>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	4a0b      	ldr	r2, [pc, #44]	@ (8004dd4 <prvCheckTasksWaitingTermination+0x54>)
 8004da6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004da8:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <prvCheckTasksWaitingTermination+0x58>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	4a0a      	ldr	r2, [pc, #40]	@ (8004dd8 <prvCheckTasksWaitingTermination+0x58>)
 8004db0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004db2:	f000 fa31 	bl	8005218 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f810 	bl	8004ddc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dbc:	4b06      	ldr	r3, [pc, #24]	@ (8004dd8 <prvCheckTasksWaitingTermination+0x58>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e1      	bne.n	8004d88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	200008b0 	.word	0x200008b0
 8004dd4:	200008dc 	.word	0x200008dc
 8004dd8:	200008c4 	.word	0x200008c4

08004ddc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	334c      	adds	r3, #76	@ 0x4c
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 ff91 	bl	8005d10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d108      	bne.n	8004e0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fb8b 	bl	8005518 <vPortFree>
				vPortFree( pxTCB );
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fb88 	bl	8005518 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e08:	e01b      	b.n	8004e42 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d103      	bne.n	8004e1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fb7f 	bl	8005518 <vPortFree>
	}
 8004e1a:	e012      	b.n	8004e42 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d00d      	beq.n	8004e42 <prvDeleteTCB+0x66>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2a:	b672      	cpsid	i
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	b662      	cpsie	i
 8004e3a:	60fb      	str	r3, [r7, #12]
}
 8004e3c:	bf00      	nop
 8004e3e:	bf00      	nop
 8004e40:	e7fd      	b.n	8004e3e <prvDeleteTCB+0x62>
	}
 8004e42:	bf00      	nop
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e52:	4b0c      	ldr	r3, [pc, #48]	@ (8004e84 <prvResetNextTaskUnblockTime+0x38>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e88 <prvResetNextTaskUnblockTime+0x3c>)
 8004e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e64:	e008      	b.n	8004e78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e66:	4b07      	ldr	r3, [pc, #28]	@ (8004e84 <prvResetNextTaskUnblockTime+0x38>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	4a04      	ldr	r2, [pc, #16]	@ (8004e88 <prvResetNextTaskUnblockTime+0x3c>)
 8004e76:	6013      	str	r3, [r2, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	20000894 	.word	0x20000894
 8004e88:	200008fc 	.word	0x200008fc

08004e8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e92:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <xTaskGetSchedulerState+0x34>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	e008      	b.n	8004eb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ea0:	4b08      	ldr	r3, [pc, #32]	@ (8004ec4 <xTaskGetSchedulerState+0x38>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	e001      	b.n	8004eb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004eb2:	687b      	ldr	r3, [r7, #4]
	}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	200008e8 	.word	0x200008e8
 8004ec4:	20000904 	.word	0x20000904

08004ec8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ed2:	4b29      	ldr	r3, [pc, #164]	@ (8004f78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ed8:	4b28      	ldr	r3, [pc, #160]	@ (8004f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff f83f 	bl	8003f62 <uxListRemove>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10b      	bne.n	8004f02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004eea:	4b24      	ldr	r3, [pc, #144]	@ (8004f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	4b21      	ldr	r3, [pc, #132]	@ (8004f80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4013      	ands	r3, r2
 8004efe:	4a20      	ldr	r2, [pc, #128]	@ (8004f80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d10a      	bne.n	8004f20 <prvAddCurrentTaskToDelayedList+0x58>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f10:	4b1a      	ldr	r3, [pc, #104]	@ (8004f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4619      	mov	r1, r3
 8004f18:	481a      	ldr	r0, [pc, #104]	@ (8004f84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f1a:	f7fe ffc5 	bl	8003ea8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f1e:	e026      	b.n	8004f6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4413      	add	r3, r2
 8004f26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f28:	4b14      	ldr	r3, [pc, #80]	@ (8004f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d209      	bcs.n	8004f4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f38:	4b13      	ldr	r3, [pc, #76]	@ (8004f88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3304      	adds	r3, #4
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f7fe ffd3 	bl	8003ef0 <vListInsert>
}
 8004f4a:	e010      	b.n	8004f6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4b0a      	ldr	r3, [pc, #40]	@ (8004f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f7fe ffc9 	bl	8003ef0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d202      	bcs.n	8004f6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f68:	4a09      	ldr	r2, [pc, #36]	@ (8004f90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	6013      	str	r3, [r2, #0]
}
 8004f6e:	bf00      	nop
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	200008e0 	.word	0x200008e0
 8004f7c:	200007dc 	.word	0x200007dc
 8004f80:	200008e4 	.word	0x200008e4
 8004f84:	200008c8 	.word	0x200008c8
 8004f88:	20000898 	.word	0x20000898
 8004f8c:	20000894 	.word	0x20000894
 8004f90:	200008fc 	.word	0x200008fc

08004f94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3b04      	subs	r3, #4
 8004fa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3b04      	subs	r3, #4
 8004fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f023 0201 	bic.w	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3b04      	subs	r3, #4
 8004fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fc4:	4a0c      	ldr	r2, [pc, #48]	@ (8004ff8 <pxPortInitialiseStack+0x64>)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3b14      	subs	r3, #20
 8004fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3b04      	subs	r3, #4
 8004fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f06f 0202 	mvn.w	r2, #2
 8004fe2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3b20      	subs	r3, #32
 8004fe8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fea:	68fb      	ldr	r3, [r7, #12]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	08004ffd 	.word	0x08004ffd

08004ffc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005006:	4b15      	ldr	r3, [pc, #84]	@ (800505c <prvTaskExitError+0x60>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500e:	d00d      	beq.n	800502c <prvTaskExitError+0x30>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	b672      	cpsid	i
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	b662      	cpsie	i
 8005024:	60fb      	str	r3, [r7, #12]
}
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	e7fd      	b.n	8005028 <prvTaskExitError+0x2c>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005030:	b672      	cpsid	i
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	b662      	cpsie	i
 8005040:	60bb      	str	r3, [r7, #8]
}
 8005042:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005044:	bf00      	nop
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0fc      	beq.n	8005046 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800504c:	bf00      	nop
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000014 	.word	0x20000014

08005060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005060:	4b07      	ldr	r3, [pc, #28]	@ (8005080 <pxCurrentTCBConst2>)
 8005062:	6819      	ldr	r1, [r3, #0]
 8005064:	6808      	ldr	r0, [r1, #0]
 8005066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506a:	f380 8809 	msr	PSP, r0
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f380 8811 	msr	BASEPRI, r0
 800507a:	4770      	bx	lr
 800507c:	f3af 8000 	nop.w

08005080 <pxCurrentTCBConst2>:
 8005080:	200007dc 	.word	0x200007dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop

08005088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005088:	4808      	ldr	r0, [pc, #32]	@ (80050ac <prvPortStartFirstTask+0x24>)
 800508a:	6800      	ldr	r0, [r0, #0]
 800508c:	6800      	ldr	r0, [r0, #0]
 800508e:	f380 8808 	msr	MSP, r0
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f380 8814 	msr	CONTROL, r0
 800509a:	b662      	cpsie	i
 800509c:	b661      	cpsie	f
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	df00      	svc	0
 80050a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050aa:	bf00      	nop
 80050ac:	e000ed08 	.word	0xe000ed08

080050b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050b6:	4b37      	ldr	r3, [pc, #220]	@ (8005194 <xPortStartScheduler+0xe4>)
 80050b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	22ff      	movs	r2, #255	@ 0xff
 80050c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4b2f      	ldr	r3, [pc, #188]	@ (8005198 <xPortStartScheduler+0xe8>)
 80050dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050de:	4b2f      	ldr	r3, [pc, #188]	@ (800519c <xPortStartScheduler+0xec>)
 80050e0:	2207      	movs	r2, #7
 80050e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050e4:	e009      	b.n	80050fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80050e6:	4b2d      	ldr	r3, [pc, #180]	@ (800519c <xPortStartScheduler+0xec>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	4a2b      	ldr	r2, [pc, #172]	@ (800519c <xPortStartScheduler+0xec>)
 80050ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005102:	2b80      	cmp	r3, #128	@ 0x80
 8005104:	d0ef      	beq.n	80050e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005106:	4b25      	ldr	r3, [pc, #148]	@ (800519c <xPortStartScheduler+0xec>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1c3 0307 	rsb	r3, r3, #7
 800510e:	2b04      	cmp	r3, #4
 8005110:	d00d      	beq.n	800512e <xPortStartScheduler+0x7e>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005116:	b672      	cpsid	i
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	b662      	cpsie	i
 8005126:	60bb      	str	r3, [r7, #8]
}
 8005128:	bf00      	nop
 800512a:	bf00      	nop
 800512c:	e7fd      	b.n	800512a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800512e:	4b1b      	ldr	r3, [pc, #108]	@ (800519c <xPortStartScheduler+0xec>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	4a19      	ldr	r2, [pc, #100]	@ (800519c <xPortStartScheduler+0xec>)
 8005136:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005138:	4b18      	ldr	r3, [pc, #96]	@ (800519c <xPortStartScheduler+0xec>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005140:	4a16      	ldr	r2, [pc, #88]	@ (800519c <xPortStartScheduler+0xec>)
 8005142:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800514c:	4b14      	ldr	r3, [pc, #80]	@ (80051a0 <xPortStartScheduler+0xf0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a13      	ldr	r2, [pc, #76]	@ (80051a0 <xPortStartScheduler+0xf0>)
 8005152:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005156:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005158:	4b11      	ldr	r3, [pc, #68]	@ (80051a0 <xPortStartScheduler+0xf0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a10      	ldr	r2, [pc, #64]	@ (80051a0 <xPortStartScheduler+0xf0>)
 800515e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005162:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005164:	f000 f8dc 	bl	8005320 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005168:	4b0e      	ldr	r3, [pc, #56]	@ (80051a4 <xPortStartScheduler+0xf4>)
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800516e:	f000 f8fb 	bl	8005368 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005172:	4b0d      	ldr	r3, [pc, #52]	@ (80051a8 <xPortStartScheduler+0xf8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a0c      	ldr	r2, [pc, #48]	@ (80051a8 <xPortStartScheduler+0xf8>)
 8005178:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800517c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800517e:	f7ff ff83 	bl	8005088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005182:	f7ff fcd9 	bl	8004b38 <vTaskSwitchContext>
	prvTaskExitError();
 8005186:	f7ff ff39 	bl	8004ffc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	e000e400 	.word	0xe000e400
 8005198:	20000908 	.word	0x20000908
 800519c:	2000090c 	.word	0x2000090c
 80051a0:	e000ed20 	.word	0xe000ed20
 80051a4:	20000014 	.word	0x20000014
 80051a8:	e000ef34 	.word	0xe000ef34

080051ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b6:	b672      	cpsid	i
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	b662      	cpsie	i
 80051c6:	607b      	str	r3, [r7, #4]
}
 80051c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051ca:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <vPortEnterCritical+0x64>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3301      	adds	r3, #1
 80051d0:	4a0f      	ldr	r2, [pc, #60]	@ (8005210 <vPortEnterCritical+0x64>)
 80051d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005210 <vPortEnterCritical+0x64>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d112      	bne.n	8005202 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <vPortEnterCritical+0x68>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00d      	beq.n	8005202 <vPortEnterCritical+0x56>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ea:	b672      	cpsid	i
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	b662      	cpsie	i
 80051fa:	603b      	str	r3, [r7, #0]
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	e7fd      	b.n	80051fe <vPortEnterCritical+0x52>
	}
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20000014 	.word	0x20000014
 8005214:	e000ed04 	.word	0xe000ed04

08005218 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800521e:	4b13      	ldr	r3, [pc, #76]	@ (800526c <vPortExitCritical+0x54>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10d      	bne.n	8005242 <vPortExitCritical+0x2a>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522a:	b672      	cpsid	i
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	b662      	cpsie	i
 800523a:	607b      	str	r3, [r7, #4]
}
 800523c:	bf00      	nop
 800523e:	bf00      	nop
 8005240:	e7fd      	b.n	800523e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005242:	4b0a      	ldr	r3, [pc, #40]	@ (800526c <vPortExitCritical+0x54>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3b01      	subs	r3, #1
 8005248:	4a08      	ldr	r2, [pc, #32]	@ (800526c <vPortExitCritical+0x54>)
 800524a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800524c:	4b07      	ldr	r3, [pc, #28]	@ (800526c <vPortExitCritical+0x54>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <vPortExitCritical+0x48>
 8005254:	2300      	movs	r3, #0
 8005256:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800525e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	20000014 	.word	0x20000014

08005270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005270:	f3ef 8009 	mrs	r0, PSP
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	4b15      	ldr	r3, [pc, #84]	@ (80052d0 <pxCurrentTCBConst>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	f01e 0f10 	tst.w	lr, #16
 8005280:	bf08      	it	eq
 8005282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528a:	6010      	str	r0, [r2, #0]
 800528c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005290:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005294:	b672      	cpsid	i
 8005296:	f380 8811 	msr	BASEPRI, r0
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	b662      	cpsie	i
 80052a4:	f7ff fc48 	bl	8004b38 <vTaskSwitchContext>
 80052a8:	f04f 0000 	mov.w	r0, #0
 80052ac:	f380 8811 	msr	BASEPRI, r0
 80052b0:	bc09      	pop	{r0, r3}
 80052b2:	6819      	ldr	r1, [r3, #0]
 80052b4:	6808      	ldr	r0, [r1, #0]
 80052b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ba:	f01e 0f10 	tst.w	lr, #16
 80052be:	bf08      	it	eq
 80052c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052c4:	f380 8809 	msr	PSP, r0
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop

080052d0 <pxCurrentTCBConst>:
 80052d0:	200007dc 	.word	0x200007dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop

080052d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e2:	b672      	cpsid	i
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	b662      	cpsie	i
 80052f2:	607b      	str	r3, [r7, #4]
}
 80052f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052f6:	f7ff fb63 	bl	80049c0 <xTaskIncrementTick>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005300:	4b06      	ldr	r3, [pc, #24]	@ (800531c <xPortSysTickHandler+0x44>)
 8005302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	2300      	movs	r3, #0
 800530a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	f383 8811 	msr	BASEPRI, r3
}
 8005312:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005314:	bf00      	nop
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	e000ed04 	.word	0xe000ed04

08005320 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005324:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <vPortSetupTimerInterrupt+0x34>)
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800532a:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <vPortSetupTimerInterrupt+0x38>)
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005330:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <vPortSetupTimerInterrupt+0x3c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0a      	ldr	r2, [pc, #40]	@ (8005360 <vPortSetupTimerInterrupt+0x40>)
 8005336:	fba2 2303 	umull	r2, r3, r2, r3
 800533a:	099b      	lsrs	r3, r3, #6
 800533c:	4a09      	ldr	r2, [pc, #36]	@ (8005364 <vPortSetupTimerInterrupt+0x44>)
 800533e:	3b01      	subs	r3, #1
 8005340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005342:	4b04      	ldr	r3, [pc, #16]	@ (8005354 <vPortSetupTimerInterrupt+0x34>)
 8005344:	2207      	movs	r2, #7
 8005346:	601a      	str	r2, [r3, #0]
}
 8005348:	bf00      	nop
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	e000e010 	.word	0xe000e010
 8005358:	e000e018 	.word	0xe000e018
 800535c:	20000008 	.word	0x20000008
 8005360:	10624dd3 	.word	0x10624dd3
 8005364:	e000e014 	.word	0xe000e014

08005368 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005368:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005378 <vPortEnableVFP+0x10>
 800536c:	6801      	ldr	r1, [r0, #0]
 800536e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005372:	6001      	str	r1, [r0, #0]
 8005374:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005376:	bf00      	nop
 8005378:	e000ed88 	.word	0xe000ed88

0800537c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	@ 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005384:	2300      	movs	r3, #0
 8005386:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005388:	f7ff fa6c 	bl	8004864 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800538c:	4b5d      	ldr	r3, [pc, #372]	@ (8005504 <pvPortMalloc+0x188>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005394:	f000 f920 	bl	80055d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005398:	4b5b      	ldr	r3, [pc, #364]	@ (8005508 <pvPortMalloc+0x18c>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4013      	ands	r3, r2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f040 8094 	bne.w	80054ce <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d020      	beq.n	80053ee <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80053ac:	2208      	movs	r2, #8
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4413      	add	r3, r2
 80053b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d017      	beq.n	80053ee <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f023 0307 	bic.w	r3, r3, #7
 80053c4:	3308      	adds	r3, #8
 80053c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00d      	beq.n	80053ee <pvPortMalloc+0x72>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	b672      	cpsid	i
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	b662      	cpsie	i
 80053e6:	617b      	str	r3, [r7, #20]
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	e7fd      	b.n	80053ea <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d06c      	beq.n	80054ce <pvPortMalloc+0x152>
 80053f4:	4b45      	ldr	r3, [pc, #276]	@ (800550c <pvPortMalloc+0x190>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d867      	bhi.n	80054ce <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053fe:	4b44      	ldr	r3, [pc, #272]	@ (8005510 <pvPortMalloc+0x194>)
 8005400:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005402:	4b43      	ldr	r3, [pc, #268]	@ (8005510 <pvPortMalloc+0x194>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005408:	e004      	b.n	8005414 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	429a      	cmp	r2, r3
 800541c:	d903      	bls.n	8005426 <pvPortMalloc+0xaa>
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f1      	bne.n	800540a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005426:	4b37      	ldr	r3, [pc, #220]	@ (8005504 <pvPortMalloc+0x188>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800542c:	429a      	cmp	r2, r3
 800542e:	d04e      	beq.n	80054ce <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2208      	movs	r2, #8
 8005436:	4413      	add	r3, r2
 8005438:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	1ad2      	subs	r2, r2, r3
 800544a:	2308      	movs	r3, #8
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	429a      	cmp	r2, r3
 8005450:	d922      	bls.n	8005498 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4413      	add	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00d      	beq.n	8005480 <pvPortMalloc+0x104>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005468:	b672      	cpsid	i
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	b662      	cpsie	i
 8005478:	613b      	str	r3, [r7, #16]
}
 800547a:	bf00      	nop
 800547c:	bf00      	nop
 800547e:	e7fd      	b.n	800547c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	1ad2      	subs	r2, r2, r3
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800548c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005492:	69b8      	ldr	r0, [r7, #24]
 8005494:	f000 f902 	bl	800569c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005498:	4b1c      	ldr	r3, [pc, #112]	@ (800550c <pvPortMalloc+0x190>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	4a1a      	ldr	r2, [pc, #104]	@ (800550c <pvPortMalloc+0x190>)
 80054a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054a6:	4b19      	ldr	r3, [pc, #100]	@ (800550c <pvPortMalloc+0x190>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005514 <pvPortMalloc+0x198>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d203      	bcs.n	80054ba <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054b2:	4b16      	ldr	r3, [pc, #88]	@ (800550c <pvPortMalloc+0x190>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a17      	ldr	r2, [pc, #92]	@ (8005514 <pvPortMalloc+0x198>)
 80054b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	4b12      	ldr	r3, [pc, #72]	@ (8005508 <pvPortMalloc+0x18c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054ce:	f7ff f9d7 	bl	8004880 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <pvPortMalloc+0x17c>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e0:	b672      	cpsid	i
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	b662      	cpsie	i
 80054f0:	60fb      	str	r3, [r7, #12]
}
 80054f2:	bf00      	nop
 80054f4:	bf00      	nop
 80054f6:	e7fd      	b.n	80054f4 <pvPortMalloc+0x178>
	return pvReturn;
 80054f8:	69fb      	ldr	r3, [r7, #28]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3728      	adds	r7, #40	@ 0x28
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20004518 	.word	0x20004518
 8005508:	20004524 	.word	0x20004524
 800550c:	2000451c 	.word	0x2000451c
 8005510:	20004510 	.word	0x20004510
 8005514:	20004520 	.word	0x20004520

08005518 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d04e      	beq.n	80055c8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800552a:	2308      	movs	r3, #8
 800552c:	425b      	negs	r3, r3
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4413      	add	r3, r2
 8005532:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	4b24      	ldr	r3, [pc, #144]	@ (80055d0 <vPortFree+0xb8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4013      	ands	r3, r2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10d      	bne.n	8005562 <vPortFree+0x4a>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	b672      	cpsid	i
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	b662      	cpsie	i
 800555a:	60fb      	str	r3, [r7, #12]
}
 800555c:	bf00      	nop
 800555e:	bf00      	nop
 8005560:	e7fd      	b.n	800555e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00d      	beq.n	8005586 <vPortFree+0x6e>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556e:	b672      	cpsid	i
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	b662      	cpsie	i
 800557e:	60bb      	str	r3, [r7, #8]
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	e7fd      	b.n	8005582 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	4b11      	ldr	r3, [pc, #68]	@ (80055d0 <vPortFree+0xb8>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4013      	ands	r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d019      	beq.n	80055c8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d115      	bne.n	80055c8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	4b0b      	ldr	r3, [pc, #44]	@ (80055d0 <vPortFree+0xb8>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	43db      	mvns	r3, r3
 80055a6:	401a      	ands	r2, r3
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055ac:	f7ff f95a 	bl	8004864 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	4b07      	ldr	r3, [pc, #28]	@ (80055d4 <vPortFree+0xbc>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4413      	add	r3, r2
 80055ba:	4a06      	ldr	r2, [pc, #24]	@ (80055d4 <vPortFree+0xbc>)
 80055bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055be:	6938      	ldr	r0, [r7, #16]
 80055c0:	f000 f86c 	bl	800569c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80055c4:	f7ff f95c 	bl	8004880 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055c8:	bf00      	nop
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20004524 	.word	0x20004524
 80055d4:	2000451c 	.word	0x2000451c

080055d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055de:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80055e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055e4:	4b27      	ldr	r3, [pc, #156]	@ (8005684 <prvHeapInit+0xac>)
 80055e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00c      	beq.n	800560c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3307      	adds	r3, #7
 80055f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0307 	bic.w	r3, r3, #7
 80055fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	4a1f      	ldr	r2, [pc, #124]	@ (8005684 <prvHeapInit+0xac>)
 8005608:	4413      	add	r3, r2
 800560a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005610:	4a1d      	ldr	r2, [pc, #116]	@ (8005688 <prvHeapInit+0xb0>)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005616:	4b1c      	ldr	r3, [pc, #112]	@ (8005688 <prvHeapInit+0xb0>)
 8005618:	2200      	movs	r2, #0
 800561a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	4413      	add	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005624:	2208      	movs	r2, #8
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0307 	bic.w	r3, r3, #7
 8005632:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4a15      	ldr	r2, [pc, #84]	@ (800568c <prvHeapInit+0xb4>)
 8005638:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800563a:	4b14      	ldr	r3, [pc, #80]	@ (800568c <prvHeapInit+0xb4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2200      	movs	r2, #0
 8005640:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005642:	4b12      	ldr	r3, [pc, #72]	@ (800568c <prvHeapInit+0xb4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	1ad2      	subs	r2, r2, r3
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005658:	4b0c      	ldr	r3, [pc, #48]	@ (800568c <prvHeapInit+0xb4>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4a0a      	ldr	r2, [pc, #40]	@ (8005690 <prvHeapInit+0xb8>)
 8005666:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4a09      	ldr	r2, [pc, #36]	@ (8005694 <prvHeapInit+0xbc>)
 800566e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005670:	4b09      	ldr	r3, [pc, #36]	@ (8005698 <prvHeapInit+0xc0>)
 8005672:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005676:	601a      	str	r2, [r3, #0]
}
 8005678:	bf00      	nop
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	20000910 	.word	0x20000910
 8005688:	20004510 	.word	0x20004510
 800568c:	20004518 	.word	0x20004518
 8005690:	20004520 	.word	0x20004520
 8005694:	2000451c 	.word	0x2000451c
 8005698:	20004524 	.word	0x20004524

0800569c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056a4:	4b28      	ldr	r3, [pc, #160]	@ (8005748 <prvInsertBlockIntoFreeList+0xac>)
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	e002      	b.n	80056b0 <prvInsertBlockIntoFreeList+0x14>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d8f7      	bhi.n	80056aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	4413      	add	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d108      	bne.n	80056de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	441a      	add	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	441a      	add	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d118      	bne.n	8005724 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	4b15      	ldr	r3, [pc, #84]	@ (800574c <prvInsertBlockIntoFreeList+0xb0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d00d      	beq.n	800571a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	441a      	add	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e008      	b.n	800572c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800571a:	4b0c      	ldr	r3, [pc, #48]	@ (800574c <prvInsertBlockIntoFreeList+0xb0>)
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	e003      	b.n	800572c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	d002      	beq.n	800573a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800573a:	bf00      	nop
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20004510 	.word	0x20004510
 800574c:	20004518 	.word	0x20004518

08005750 <atoi>:
 8005750:	220a      	movs	r2, #10
 8005752:	2100      	movs	r1, #0
 8005754:	f000 b87a 	b.w	800584c <strtol>

08005758 <_strtol_l.isra.0>:
 8005758:	2b24      	cmp	r3, #36	@ 0x24
 800575a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800575e:	4686      	mov	lr, r0
 8005760:	4690      	mov	r8, r2
 8005762:	d801      	bhi.n	8005768 <_strtol_l.isra.0+0x10>
 8005764:	2b01      	cmp	r3, #1
 8005766:	d106      	bne.n	8005776 <_strtol_l.isra.0+0x1e>
 8005768:	f000 fb66 	bl	8005e38 <__errno>
 800576c:	2316      	movs	r3, #22
 800576e:	6003      	str	r3, [r0, #0]
 8005770:	2000      	movs	r0, #0
 8005772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005776:	4834      	ldr	r0, [pc, #208]	@ (8005848 <_strtol_l.isra.0+0xf0>)
 8005778:	460d      	mov	r5, r1
 800577a:	462a      	mov	r2, r5
 800577c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005780:	5d06      	ldrb	r6, [r0, r4]
 8005782:	f016 0608 	ands.w	r6, r6, #8
 8005786:	d1f8      	bne.n	800577a <_strtol_l.isra.0+0x22>
 8005788:	2c2d      	cmp	r4, #45	@ 0x2d
 800578a:	d110      	bne.n	80057ae <_strtol_l.isra.0+0x56>
 800578c:	782c      	ldrb	r4, [r5, #0]
 800578e:	2601      	movs	r6, #1
 8005790:	1c95      	adds	r5, r2, #2
 8005792:	f033 0210 	bics.w	r2, r3, #16
 8005796:	d115      	bne.n	80057c4 <_strtol_l.isra.0+0x6c>
 8005798:	2c30      	cmp	r4, #48	@ 0x30
 800579a:	d10d      	bne.n	80057b8 <_strtol_l.isra.0+0x60>
 800579c:	782a      	ldrb	r2, [r5, #0]
 800579e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80057a2:	2a58      	cmp	r2, #88	@ 0x58
 80057a4:	d108      	bne.n	80057b8 <_strtol_l.isra.0+0x60>
 80057a6:	786c      	ldrb	r4, [r5, #1]
 80057a8:	3502      	adds	r5, #2
 80057aa:	2310      	movs	r3, #16
 80057ac:	e00a      	b.n	80057c4 <_strtol_l.isra.0+0x6c>
 80057ae:	2c2b      	cmp	r4, #43	@ 0x2b
 80057b0:	bf04      	itt	eq
 80057b2:	782c      	ldrbeq	r4, [r5, #0]
 80057b4:	1c95      	addeq	r5, r2, #2
 80057b6:	e7ec      	b.n	8005792 <_strtol_l.isra.0+0x3a>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f6      	bne.n	80057aa <_strtol_l.isra.0+0x52>
 80057bc:	2c30      	cmp	r4, #48	@ 0x30
 80057be:	bf14      	ite	ne
 80057c0:	230a      	movne	r3, #10
 80057c2:	2308      	moveq	r3, #8
 80057c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80057c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80057cc:	2200      	movs	r2, #0
 80057ce:	fbbc f9f3 	udiv	r9, ip, r3
 80057d2:	4610      	mov	r0, r2
 80057d4:	fb03 ca19 	mls	sl, r3, r9, ip
 80057d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80057dc:	2f09      	cmp	r7, #9
 80057de:	d80f      	bhi.n	8005800 <_strtol_l.isra.0+0xa8>
 80057e0:	463c      	mov	r4, r7
 80057e2:	42a3      	cmp	r3, r4
 80057e4:	dd1b      	ble.n	800581e <_strtol_l.isra.0+0xc6>
 80057e6:	1c57      	adds	r7, r2, #1
 80057e8:	d007      	beq.n	80057fa <_strtol_l.isra.0+0xa2>
 80057ea:	4581      	cmp	r9, r0
 80057ec:	d314      	bcc.n	8005818 <_strtol_l.isra.0+0xc0>
 80057ee:	d101      	bne.n	80057f4 <_strtol_l.isra.0+0x9c>
 80057f0:	45a2      	cmp	sl, r4
 80057f2:	db11      	blt.n	8005818 <_strtol_l.isra.0+0xc0>
 80057f4:	fb00 4003 	mla	r0, r0, r3, r4
 80057f8:	2201      	movs	r2, #1
 80057fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057fe:	e7eb      	b.n	80057d8 <_strtol_l.isra.0+0x80>
 8005800:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005804:	2f19      	cmp	r7, #25
 8005806:	d801      	bhi.n	800580c <_strtol_l.isra.0+0xb4>
 8005808:	3c37      	subs	r4, #55	@ 0x37
 800580a:	e7ea      	b.n	80057e2 <_strtol_l.isra.0+0x8a>
 800580c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005810:	2f19      	cmp	r7, #25
 8005812:	d804      	bhi.n	800581e <_strtol_l.isra.0+0xc6>
 8005814:	3c57      	subs	r4, #87	@ 0x57
 8005816:	e7e4      	b.n	80057e2 <_strtol_l.isra.0+0x8a>
 8005818:	f04f 32ff 	mov.w	r2, #4294967295
 800581c:	e7ed      	b.n	80057fa <_strtol_l.isra.0+0xa2>
 800581e:	1c53      	adds	r3, r2, #1
 8005820:	d108      	bne.n	8005834 <_strtol_l.isra.0+0xdc>
 8005822:	2322      	movs	r3, #34	@ 0x22
 8005824:	f8ce 3000 	str.w	r3, [lr]
 8005828:	4660      	mov	r0, ip
 800582a:	f1b8 0f00 	cmp.w	r8, #0
 800582e:	d0a0      	beq.n	8005772 <_strtol_l.isra.0+0x1a>
 8005830:	1e69      	subs	r1, r5, #1
 8005832:	e006      	b.n	8005842 <_strtol_l.isra.0+0xea>
 8005834:	b106      	cbz	r6, 8005838 <_strtol_l.isra.0+0xe0>
 8005836:	4240      	negs	r0, r0
 8005838:	f1b8 0f00 	cmp.w	r8, #0
 800583c:	d099      	beq.n	8005772 <_strtol_l.isra.0+0x1a>
 800583e:	2a00      	cmp	r2, #0
 8005840:	d1f6      	bne.n	8005830 <_strtol_l.isra.0+0xd8>
 8005842:	f8c8 1000 	str.w	r1, [r8]
 8005846:	e794      	b.n	8005772 <_strtol_l.isra.0+0x1a>
 8005848:	08006f2d 	.word	0x08006f2d

0800584c <strtol>:
 800584c:	4613      	mov	r3, r2
 800584e:	460a      	mov	r2, r1
 8005850:	4601      	mov	r1, r0
 8005852:	4802      	ldr	r0, [pc, #8]	@ (800585c <strtol+0x10>)
 8005854:	6800      	ldr	r0, [r0, #0]
 8005856:	f7ff bf7f 	b.w	8005758 <_strtol_l.isra.0>
 800585a:	bf00      	nop
 800585c:	20000024 	.word	0x20000024

08005860 <std>:
 8005860:	2300      	movs	r3, #0
 8005862:	b510      	push	{r4, lr}
 8005864:	4604      	mov	r4, r0
 8005866:	e9c0 3300 	strd	r3, r3, [r0]
 800586a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800586e:	6083      	str	r3, [r0, #8]
 8005870:	8181      	strh	r1, [r0, #12]
 8005872:	6643      	str	r3, [r0, #100]	@ 0x64
 8005874:	81c2      	strh	r2, [r0, #14]
 8005876:	6183      	str	r3, [r0, #24]
 8005878:	4619      	mov	r1, r3
 800587a:	2208      	movs	r2, #8
 800587c:	305c      	adds	r0, #92	@ 0x5c
 800587e:	f000 fa2f 	bl	8005ce0 <memset>
 8005882:	4b0d      	ldr	r3, [pc, #52]	@ (80058b8 <std+0x58>)
 8005884:	6263      	str	r3, [r4, #36]	@ 0x24
 8005886:	4b0d      	ldr	r3, [pc, #52]	@ (80058bc <std+0x5c>)
 8005888:	62a3      	str	r3, [r4, #40]	@ 0x28
 800588a:	4b0d      	ldr	r3, [pc, #52]	@ (80058c0 <std+0x60>)
 800588c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800588e:	4b0d      	ldr	r3, [pc, #52]	@ (80058c4 <std+0x64>)
 8005890:	6323      	str	r3, [r4, #48]	@ 0x30
 8005892:	4b0d      	ldr	r3, [pc, #52]	@ (80058c8 <std+0x68>)
 8005894:	6224      	str	r4, [r4, #32]
 8005896:	429c      	cmp	r4, r3
 8005898:	d006      	beq.n	80058a8 <std+0x48>
 800589a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800589e:	4294      	cmp	r4, r2
 80058a0:	d002      	beq.n	80058a8 <std+0x48>
 80058a2:	33d0      	adds	r3, #208	@ 0xd0
 80058a4:	429c      	cmp	r4, r3
 80058a6:	d105      	bne.n	80058b4 <std+0x54>
 80058a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b0:	f000 baec 	b.w	8005e8c <__retarget_lock_init_recursive>
 80058b4:	bd10      	pop	{r4, pc}
 80058b6:	bf00      	nop
 80058b8:	08005b31 	.word	0x08005b31
 80058bc:	08005b53 	.word	0x08005b53
 80058c0:	08005b8b 	.word	0x08005b8b
 80058c4:	08005baf 	.word	0x08005baf
 80058c8:	20004528 	.word	0x20004528

080058cc <stdio_exit_handler>:
 80058cc:	4a02      	ldr	r2, [pc, #8]	@ (80058d8 <stdio_exit_handler+0xc>)
 80058ce:	4903      	ldr	r1, [pc, #12]	@ (80058dc <stdio_exit_handler+0x10>)
 80058d0:	4803      	ldr	r0, [pc, #12]	@ (80058e0 <stdio_exit_handler+0x14>)
 80058d2:	f000 b869 	b.w	80059a8 <_fwalk_sglue>
 80058d6:	bf00      	nop
 80058d8:	20000018 	.word	0x20000018
 80058dc:	080069f5 	.word	0x080069f5
 80058e0:	20000028 	.word	0x20000028

080058e4 <cleanup_stdio>:
 80058e4:	6841      	ldr	r1, [r0, #4]
 80058e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005918 <cleanup_stdio+0x34>)
 80058e8:	4299      	cmp	r1, r3
 80058ea:	b510      	push	{r4, lr}
 80058ec:	4604      	mov	r4, r0
 80058ee:	d001      	beq.n	80058f4 <cleanup_stdio+0x10>
 80058f0:	f001 f880 	bl	80069f4 <_fflush_r>
 80058f4:	68a1      	ldr	r1, [r4, #8]
 80058f6:	4b09      	ldr	r3, [pc, #36]	@ (800591c <cleanup_stdio+0x38>)
 80058f8:	4299      	cmp	r1, r3
 80058fa:	d002      	beq.n	8005902 <cleanup_stdio+0x1e>
 80058fc:	4620      	mov	r0, r4
 80058fe:	f001 f879 	bl	80069f4 <_fflush_r>
 8005902:	68e1      	ldr	r1, [r4, #12]
 8005904:	4b06      	ldr	r3, [pc, #24]	@ (8005920 <cleanup_stdio+0x3c>)
 8005906:	4299      	cmp	r1, r3
 8005908:	d004      	beq.n	8005914 <cleanup_stdio+0x30>
 800590a:	4620      	mov	r0, r4
 800590c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005910:	f001 b870 	b.w	80069f4 <_fflush_r>
 8005914:	bd10      	pop	{r4, pc}
 8005916:	bf00      	nop
 8005918:	20004528 	.word	0x20004528
 800591c:	20004590 	.word	0x20004590
 8005920:	200045f8 	.word	0x200045f8

08005924 <global_stdio_init.part.0>:
 8005924:	b510      	push	{r4, lr}
 8005926:	4b0b      	ldr	r3, [pc, #44]	@ (8005954 <global_stdio_init.part.0+0x30>)
 8005928:	4c0b      	ldr	r4, [pc, #44]	@ (8005958 <global_stdio_init.part.0+0x34>)
 800592a:	4a0c      	ldr	r2, [pc, #48]	@ (800595c <global_stdio_init.part.0+0x38>)
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	4620      	mov	r0, r4
 8005930:	2200      	movs	r2, #0
 8005932:	2104      	movs	r1, #4
 8005934:	f7ff ff94 	bl	8005860 <std>
 8005938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800593c:	2201      	movs	r2, #1
 800593e:	2109      	movs	r1, #9
 8005940:	f7ff ff8e 	bl	8005860 <std>
 8005944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005948:	2202      	movs	r2, #2
 800594a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800594e:	2112      	movs	r1, #18
 8005950:	f7ff bf86 	b.w	8005860 <std>
 8005954:	20004660 	.word	0x20004660
 8005958:	20004528 	.word	0x20004528
 800595c:	080058cd 	.word	0x080058cd

08005960 <__sfp_lock_acquire>:
 8005960:	4801      	ldr	r0, [pc, #4]	@ (8005968 <__sfp_lock_acquire+0x8>)
 8005962:	f000 ba94 	b.w	8005e8e <__retarget_lock_acquire_recursive>
 8005966:	bf00      	nop
 8005968:	20004669 	.word	0x20004669

0800596c <__sfp_lock_release>:
 800596c:	4801      	ldr	r0, [pc, #4]	@ (8005974 <__sfp_lock_release+0x8>)
 800596e:	f000 ba8f 	b.w	8005e90 <__retarget_lock_release_recursive>
 8005972:	bf00      	nop
 8005974:	20004669 	.word	0x20004669

08005978 <__sinit>:
 8005978:	b510      	push	{r4, lr}
 800597a:	4604      	mov	r4, r0
 800597c:	f7ff fff0 	bl	8005960 <__sfp_lock_acquire>
 8005980:	6a23      	ldr	r3, [r4, #32]
 8005982:	b11b      	cbz	r3, 800598c <__sinit+0x14>
 8005984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005988:	f7ff bff0 	b.w	800596c <__sfp_lock_release>
 800598c:	4b04      	ldr	r3, [pc, #16]	@ (80059a0 <__sinit+0x28>)
 800598e:	6223      	str	r3, [r4, #32]
 8005990:	4b04      	ldr	r3, [pc, #16]	@ (80059a4 <__sinit+0x2c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f5      	bne.n	8005984 <__sinit+0xc>
 8005998:	f7ff ffc4 	bl	8005924 <global_stdio_init.part.0>
 800599c:	e7f2      	b.n	8005984 <__sinit+0xc>
 800599e:	bf00      	nop
 80059a0:	080058e5 	.word	0x080058e5
 80059a4:	20004660 	.word	0x20004660

080059a8 <_fwalk_sglue>:
 80059a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059ac:	4607      	mov	r7, r0
 80059ae:	4688      	mov	r8, r1
 80059b0:	4614      	mov	r4, r2
 80059b2:	2600      	movs	r6, #0
 80059b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059b8:	f1b9 0901 	subs.w	r9, r9, #1
 80059bc:	d505      	bpl.n	80059ca <_fwalk_sglue+0x22>
 80059be:	6824      	ldr	r4, [r4, #0]
 80059c0:	2c00      	cmp	r4, #0
 80059c2:	d1f7      	bne.n	80059b4 <_fwalk_sglue+0xc>
 80059c4:	4630      	mov	r0, r6
 80059c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ca:	89ab      	ldrh	r3, [r5, #12]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d907      	bls.n	80059e0 <_fwalk_sglue+0x38>
 80059d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059d4:	3301      	adds	r3, #1
 80059d6:	d003      	beq.n	80059e0 <_fwalk_sglue+0x38>
 80059d8:	4629      	mov	r1, r5
 80059da:	4638      	mov	r0, r7
 80059dc:	47c0      	blx	r8
 80059de:	4306      	orrs	r6, r0
 80059e0:	3568      	adds	r5, #104	@ 0x68
 80059e2:	e7e9      	b.n	80059b8 <_fwalk_sglue+0x10>

080059e4 <iprintf>:
 80059e4:	b40f      	push	{r0, r1, r2, r3}
 80059e6:	b507      	push	{r0, r1, r2, lr}
 80059e8:	4906      	ldr	r1, [pc, #24]	@ (8005a04 <iprintf+0x20>)
 80059ea:	ab04      	add	r3, sp, #16
 80059ec:	6808      	ldr	r0, [r1, #0]
 80059ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80059f2:	6881      	ldr	r1, [r0, #8]
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	f000 fcd5 	bl	80063a4 <_vfiprintf_r>
 80059fa:	b003      	add	sp, #12
 80059fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a00:	b004      	add	sp, #16
 8005a02:	4770      	bx	lr
 8005a04:	20000024 	.word	0x20000024

08005a08 <_puts_r>:
 8005a08:	6a03      	ldr	r3, [r0, #32]
 8005a0a:	b570      	push	{r4, r5, r6, lr}
 8005a0c:	6884      	ldr	r4, [r0, #8]
 8005a0e:	4605      	mov	r5, r0
 8005a10:	460e      	mov	r6, r1
 8005a12:	b90b      	cbnz	r3, 8005a18 <_puts_r+0x10>
 8005a14:	f7ff ffb0 	bl	8005978 <__sinit>
 8005a18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a1a:	07db      	lsls	r3, r3, #31
 8005a1c:	d405      	bmi.n	8005a2a <_puts_r+0x22>
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	0598      	lsls	r0, r3, #22
 8005a22:	d402      	bmi.n	8005a2a <_puts_r+0x22>
 8005a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a26:	f000 fa32 	bl	8005e8e <__retarget_lock_acquire_recursive>
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	0719      	lsls	r1, r3, #28
 8005a2e:	d502      	bpl.n	8005a36 <_puts_r+0x2e>
 8005a30:	6923      	ldr	r3, [r4, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d135      	bne.n	8005aa2 <_puts_r+0x9a>
 8005a36:	4621      	mov	r1, r4
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f000 f8fb 	bl	8005c34 <__swsetup_r>
 8005a3e:	b380      	cbz	r0, 8005aa2 <_puts_r+0x9a>
 8005a40:	f04f 35ff 	mov.w	r5, #4294967295
 8005a44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a46:	07da      	lsls	r2, r3, #31
 8005a48:	d405      	bmi.n	8005a56 <_puts_r+0x4e>
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	059b      	lsls	r3, r3, #22
 8005a4e:	d402      	bmi.n	8005a56 <_puts_r+0x4e>
 8005a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a52:	f000 fa1d 	bl	8005e90 <__retarget_lock_release_recursive>
 8005a56:	4628      	mov	r0, r5
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	da04      	bge.n	8005a68 <_puts_r+0x60>
 8005a5e:	69a2      	ldr	r2, [r4, #24]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	dc17      	bgt.n	8005a94 <_puts_r+0x8c>
 8005a64:	290a      	cmp	r1, #10
 8005a66:	d015      	beq.n	8005a94 <_puts_r+0x8c>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	6022      	str	r2, [r4, #0]
 8005a6e:	7019      	strb	r1, [r3, #0]
 8005a70:	68a3      	ldr	r3, [r4, #8]
 8005a72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a76:	3b01      	subs	r3, #1
 8005a78:	60a3      	str	r3, [r4, #8]
 8005a7a:	2900      	cmp	r1, #0
 8005a7c:	d1ed      	bne.n	8005a5a <_puts_r+0x52>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	da11      	bge.n	8005aa6 <_puts_r+0x9e>
 8005a82:	4622      	mov	r2, r4
 8005a84:	210a      	movs	r1, #10
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 f895 	bl	8005bb6 <__swbuf_r>
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	d0d7      	beq.n	8005a40 <_puts_r+0x38>
 8005a90:	250a      	movs	r5, #10
 8005a92:	e7d7      	b.n	8005a44 <_puts_r+0x3c>
 8005a94:	4622      	mov	r2, r4
 8005a96:	4628      	mov	r0, r5
 8005a98:	f000 f88d 	bl	8005bb6 <__swbuf_r>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d1e7      	bne.n	8005a70 <_puts_r+0x68>
 8005aa0:	e7ce      	b.n	8005a40 <_puts_r+0x38>
 8005aa2:	3e01      	subs	r6, #1
 8005aa4:	e7e4      	b.n	8005a70 <_puts_r+0x68>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	6022      	str	r2, [r4, #0]
 8005aac:	220a      	movs	r2, #10
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e7ee      	b.n	8005a90 <_puts_r+0x88>
	...

08005ab4 <puts>:
 8005ab4:	4b02      	ldr	r3, [pc, #8]	@ (8005ac0 <puts+0xc>)
 8005ab6:	4601      	mov	r1, r0
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	f7ff bfa5 	b.w	8005a08 <_puts_r>
 8005abe:	bf00      	nop
 8005ac0:	20000024 	.word	0x20000024

08005ac4 <sniprintf>:
 8005ac4:	b40c      	push	{r2, r3}
 8005ac6:	b530      	push	{r4, r5, lr}
 8005ac8:	4b18      	ldr	r3, [pc, #96]	@ (8005b2c <sniprintf+0x68>)
 8005aca:	1e0c      	subs	r4, r1, #0
 8005acc:	681d      	ldr	r5, [r3, #0]
 8005ace:	b09d      	sub	sp, #116	@ 0x74
 8005ad0:	da08      	bge.n	8005ae4 <sniprintf+0x20>
 8005ad2:	238b      	movs	r3, #139	@ 0x8b
 8005ad4:	602b      	str	r3, [r5, #0]
 8005ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ada:	b01d      	add	sp, #116	@ 0x74
 8005adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ae0:	b002      	add	sp, #8
 8005ae2:	4770      	bx	lr
 8005ae4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005ae8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005af2:	bf14      	ite	ne
 8005af4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005af8:	4623      	moveq	r3, r4
 8005afa:	9304      	str	r3, [sp, #16]
 8005afc:	9307      	str	r3, [sp, #28]
 8005afe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b02:	9002      	str	r0, [sp, #8]
 8005b04:	9006      	str	r0, [sp, #24]
 8005b06:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b0c:	ab21      	add	r3, sp, #132	@ 0x84
 8005b0e:	a902      	add	r1, sp, #8
 8005b10:	4628      	mov	r0, r5
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	f000 fb20 	bl	8006158 <_svfiprintf_r>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	bfbc      	itt	lt
 8005b1c:	238b      	movlt	r3, #139	@ 0x8b
 8005b1e:	602b      	strlt	r3, [r5, #0]
 8005b20:	2c00      	cmp	r4, #0
 8005b22:	d0da      	beq.n	8005ada <sniprintf+0x16>
 8005b24:	9b02      	ldr	r3, [sp, #8]
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	e7d6      	b.n	8005ada <sniprintf+0x16>
 8005b2c:	20000024 	.word	0x20000024

08005b30 <__sread>:
 8005b30:	b510      	push	{r4, lr}
 8005b32:	460c      	mov	r4, r1
 8005b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b38:	f000 f95a 	bl	8005df0 <_read_r>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	bfab      	itete	ge
 8005b40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b42:	89a3      	ldrhlt	r3, [r4, #12]
 8005b44:	181b      	addge	r3, r3, r0
 8005b46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b4a:	bfac      	ite	ge
 8005b4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b4e:	81a3      	strhlt	r3, [r4, #12]
 8005b50:	bd10      	pop	{r4, pc}

08005b52 <__swrite>:
 8005b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b56:	461f      	mov	r7, r3
 8005b58:	898b      	ldrh	r3, [r1, #12]
 8005b5a:	05db      	lsls	r3, r3, #23
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	4616      	mov	r6, r2
 8005b62:	d505      	bpl.n	8005b70 <__swrite+0x1e>
 8005b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b68:	2302      	movs	r3, #2
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f000 f92e 	bl	8005dcc <_lseek_r>
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b7a:	81a3      	strh	r3, [r4, #12]
 8005b7c:	4632      	mov	r2, r6
 8005b7e:	463b      	mov	r3, r7
 8005b80:	4628      	mov	r0, r5
 8005b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b86:	f000 b945 	b.w	8005e14 <_write_r>

08005b8a <__sseek>:
 8005b8a:	b510      	push	{r4, lr}
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b92:	f000 f91b 	bl	8005dcc <_lseek_r>
 8005b96:	1c43      	adds	r3, r0, #1
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	bf15      	itete	ne
 8005b9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ba2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ba6:	81a3      	strheq	r3, [r4, #12]
 8005ba8:	bf18      	it	ne
 8005baa:	81a3      	strhne	r3, [r4, #12]
 8005bac:	bd10      	pop	{r4, pc}

08005bae <__sclose>:
 8005bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb2:	f000 b89d 	b.w	8005cf0 <_close_r>

08005bb6 <__swbuf_r>:
 8005bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb8:	460e      	mov	r6, r1
 8005bba:	4614      	mov	r4, r2
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	b118      	cbz	r0, 8005bc8 <__swbuf_r+0x12>
 8005bc0:	6a03      	ldr	r3, [r0, #32]
 8005bc2:	b90b      	cbnz	r3, 8005bc8 <__swbuf_r+0x12>
 8005bc4:	f7ff fed8 	bl	8005978 <__sinit>
 8005bc8:	69a3      	ldr	r3, [r4, #24]
 8005bca:	60a3      	str	r3, [r4, #8]
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	071a      	lsls	r2, r3, #28
 8005bd0:	d501      	bpl.n	8005bd6 <__swbuf_r+0x20>
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	b943      	cbnz	r3, 8005be8 <__swbuf_r+0x32>
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f000 f82b 	bl	8005c34 <__swsetup_r>
 8005bde:	b118      	cbz	r0, 8005be8 <__swbuf_r+0x32>
 8005be0:	f04f 37ff 	mov.w	r7, #4294967295
 8005be4:	4638      	mov	r0, r7
 8005be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	6922      	ldr	r2, [r4, #16]
 8005bec:	1a98      	subs	r0, r3, r2
 8005bee:	6963      	ldr	r3, [r4, #20]
 8005bf0:	b2f6      	uxtb	r6, r6
 8005bf2:	4283      	cmp	r3, r0
 8005bf4:	4637      	mov	r7, r6
 8005bf6:	dc05      	bgt.n	8005c04 <__swbuf_r+0x4e>
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f000 fefa 	bl	80069f4 <_fflush_r>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d1ed      	bne.n	8005be0 <__swbuf_r+0x2a>
 8005c04:	68a3      	ldr	r3, [r4, #8]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	60a3      	str	r3, [r4, #8]
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	6022      	str	r2, [r4, #0]
 8005c10:	701e      	strb	r6, [r3, #0]
 8005c12:	6962      	ldr	r2, [r4, #20]
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d004      	beq.n	8005c24 <__swbuf_r+0x6e>
 8005c1a:	89a3      	ldrh	r3, [r4, #12]
 8005c1c:	07db      	lsls	r3, r3, #31
 8005c1e:	d5e1      	bpl.n	8005be4 <__swbuf_r+0x2e>
 8005c20:	2e0a      	cmp	r6, #10
 8005c22:	d1df      	bne.n	8005be4 <__swbuf_r+0x2e>
 8005c24:	4621      	mov	r1, r4
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 fee4 	bl	80069f4 <_fflush_r>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	d0d9      	beq.n	8005be4 <__swbuf_r+0x2e>
 8005c30:	e7d6      	b.n	8005be0 <__swbuf_r+0x2a>
	...

08005c34 <__swsetup_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4b29      	ldr	r3, [pc, #164]	@ (8005cdc <__swsetup_r+0xa8>)
 8005c38:	4605      	mov	r5, r0
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	b118      	cbz	r0, 8005c48 <__swsetup_r+0x14>
 8005c40:	6a03      	ldr	r3, [r0, #32]
 8005c42:	b90b      	cbnz	r3, 8005c48 <__swsetup_r+0x14>
 8005c44:	f7ff fe98 	bl	8005978 <__sinit>
 8005c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4c:	0719      	lsls	r1, r3, #28
 8005c4e:	d422      	bmi.n	8005c96 <__swsetup_r+0x62>
 8005c50:	06da      	lsls	r2, r3, #27
 8005c52:	d407      	bmi.n	8005c64 <__swsetup_r+0x30>
 8005c54:	2209      	movs	r2, #9
 8005c56:	602a      	str	r2, [r5, #0]
 8005c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c5c:	81a3      	strh	r3, [r4, #12]
 8005c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c62:	e033      	b.n	8005ccc <__swsetup_r+0x98>
 8005c64:	0758      	lsls	r0, r3, #29
 8005c66:	d512      	bpl.n	8005c8e <__swsetup_r+0x5a>
 8005c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c6a:	b141      	cbz	r1, 8005c7e <__swsetup_r+0x4a>
 8005c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c70:	4299      	cmp	r1, r3
 8005c72:	d002      	beq.n	8005c7a <__swsetup_r+0x46>
 8005c74:	4628      	mov	r0, r5
 8005c76:	f000 f91b 	bl	8005eb0 <_free_r>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c84:	81a3      	strh	r3, [r4, #12]
 8005c86:	2300      	movs	r3, #0
 8005c88:	6063      	str	r3, [r4, #4]
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	f043 0308 	orr.w	r3, r3, #8
 8005c94:	81a3      	strh	r3, [r4, #12]
 8005c96:	6923      	ldr	r3, [r4, #16]
 8005c98:	b94b      	cbnz	r3, 8005cae <__swsetup_r+0x7a>
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ca4:	d003      	beq.n	8005cae <__swsetup_r+0x7a>
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f000 fef1 	bl	8006a90 <__smakebuf_r>
 8005cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb2:	f013 0201 	ands.w	r2, r3, #1
 8005cb6:	d00a      	beq.n	8005cce <__swsetup_r+0x9a>
 8005cb8:	2200      	movs	r2, #0
 8005cba:	60a2      	str	r2, [r4, #8]
 8005cbc:	6962      	ldr	r2, [r4, #20]
 8005cbe:	4252      	negs	r2, r2
 8005cc0:	61a2      	str	r2, [r4, #24]
 8005cc2:	6922      	ldr	r2, [r4, #16]
 8005cc4:	b942      	cbnz	r2, 8005cd8 <__swsetup_r+0xa4>
 8005cc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005cca:	d1c5      	bne.n	8005c58 <__swsetup_r+0x24>
 8005ccc:	bd38      	pop	{r3, r4, r5, pc}
 8005cce:	0799      	lsls	r1, r3, #30
 8005cd0:	bf58      	it	pl
 8005cd2:	6962      	ldrpl	r2, [r4, #20]
 8005cd4:	60a2      	str	r2, [r4, #8]
 8005cd6:	e7f4      	b.n	8005cc2 <__swsetup_r+0x8e>
 8005cd8:	2000      	movs	r0, #0
 8005cda:	e7f7      	b.n	8005ccc <__swsetup_r+0x98>
 8005cdc:	20000024 	.word	0x20000024

08005ce0 <memset>:
 8005ce0:	4402      	add	r2, r0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d100      	bne.n	8005cea <memset+0xa>
 8005ce8:	4770      	bx	lr
 8005cea:	f803 1b01 	strb.w	r1, [r3], #1
 8005cee:	e7f9      	b.n	8005ce4 <memset+0x4>

08005cf0 <_close_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4d06      	ldr	r5, [pc, #24]	@ (8005d0c <_close_r+0x1c>)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	4608      	mov	r0, r1
 8005cfa:	602b      	str	r3, [r5, #0]
 8005cfc:	f7fb f937 	bl	8000f6e <_close>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	d102      	bne.n	8005d0a <_close_r+0x1a>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	b103      	cbz	r3, 8005d0a <_close_r+0x1a>
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	bd38      	pop	{r3, r4, r5, pc}
 8005d0c:	20004664 	.word	0x20004664

08005d10 <_reclaim_reent>:
 8005d10:	4b2d      	ldr	r3, [pc, #180]	@ (8005dc8 <_reclaim_reent+0xb8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4283      	cmp	r3, r0
 8005d16:	b570      	push	{r4, r5, r6, lr}
 8005d18:	4604      	mov	r4, r0
 8005d1a:	d053      	beq.n	8005dc4 <_reclaim_reent+0xb4>
 8005d1c:	69c3      	ldr	r3, [r0, #28]
 8005d1e:	b31b      	cbz	r3, 8005d68 <_reclaim_reent+0x58>
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	b163      	cbz	r3, 8005d3e <_reclaim_reent+0x2e>
 8005d24:	2500      	movs	r5, #0
 8005d26:	69e3      	ldr	r3, [r4, #28]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	5959      	ldr	r1, [r3, r5]
 8005d2c:	b9b1      	cbnz	r1, 8005d5c <_reclaim_reent+0x4c>
 8005d2e:	3504      	adds	r5, #4
 8005d30:	2d80      	cmp	r5, #128	@ 0x80
 8005d32:	d1f8      	bne.n	8005d26 <_reclaim_reent+0x16>
 8005d34:	69e3      	ldr	r3, [r4, #28]
 8005d36:	4620      	mov	r0, r4
 8005d38:	68d9      	ldr	r1, [r3, #12]
 8005d3a:	f000 f8b9 	bl	8005eb0 <_free_r>
 8005d3e:	69e3      	ldr	r3, [r4, #28]
 8005d40:	6819      	ldr	r1, [r3, #0]
 8005d42:	b111      	cbz	r1, 8005d4a <_reclaim_reent+0x3a>
 8005d44:	4620      	mov	r0, r4
 8005d46:	f000 f8b3 	bl	8005eb0 <_free_r>
 8005d4a:	69e3      	ldr	r3, [r4, #28]
 8005d4c:	689d      	ldr	r5, [r3, #8]
 8005d4e:	b15d      	cbz	r5, 8005d68 <_reclaim_reent+0x58>
 8005d50:	4629      	mov	r1, r5
 8005d52:	4620      	mov	r0, r4
 8005d54:	682d      	ldr	r5, [r5, #0]
 8005d56:	f000 f8ab 	bl	8005eb0 <_free_r>
 8005d5a:	e7f8      	b.n	8005d4e <_reclaim_reent+0x3e>
 8005d5c:	680e      	ldr	r6, [r1, #0]
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f000 f8a6 	bl	8005eb0 <_free_r>
 8005d64:	4631      	mov	r1, r6
 8005d66:	e7e1      	b.n	8005d2c <_reclaim_reent+0x1c>
 8005d68:	6961      	ldr	r1, [r4, #20]
 8005d6a:	b111      	cbz	r1, 8005d72 <_reclaim_reent+0x62>
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f000 f89f 	bl	8005eb0 <_free_r>
 8005d72:	69e1      	ldr	r1, [r4, #28]
 8005d74:	b111      	cbz	r1, 8005d7c <_reclaim_reent+0x6c>
 8005d76:	4620      	mov	r0, r4
 8005d78:	f000 f89a 	bl	8005eb0 <_free_r>
 8005d7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005d7e:	b111      	cbz	r1, 8005d86 <_reclaim_reent+0x76>
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 f895 	bl	8005eb0 <_free_r>
 8005d86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d88:	b111      	cbz	r1, 8005d90 <_reclaim_reent+0x80>
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f000 f890 	bl	8005eb0 <_free_r>
 8005d90:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005d92:	b111      	cbz	r1, 8005d9a <_reclaim_reent+0x8a>
 8005d94:	4620      	mov	r0, r4
 8005d96:	f000 f88b 	bl	8005eb0 <_free_r>
 8005d9a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005d9c:	b111      	cbz	r1, 8005da4 <_reclaim_reent+0x94>
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f000 f886 	bl	8005eb0 <_free_r>
 8005da4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005da6:	b111      	cbz	r1, 8005dae <_reclaim_reent+0x9e>
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 f881 	bl	8005eb0 <_free_r>
 8005dae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005db0:	b111      	cbz	r1, 8005db8 <_reclaim_reent+0xa8>
 8005db2:	4620      	mov	r0, r4
 8005db4:	f000 f87c 	bl	8005eb0 <_free_r>
 8005db8:	6a23      	ldr	r3, [r4, #32]
 8005dba:	b11b      	cbz	r3, 8005dc4 <_reclaim_reent+0xb4>
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005dc2:	4718      	bx	r3
 8005dc4:	bd70      	pop	{r4, r5, r6, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000024 	.word	0x20000024

08005dcc <_lseek_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d07      	ldr	r5, [pc, #28]	@ (8005dec <_lseek_r+0x20>)
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	4608      	mov	r0, r1
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	602a      	str	r2, [r5, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f7fb f8ee 	bl	8000fbc <_lseek>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d102      	bne.n	8005dea <_lseek_r+0x1e>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	b103      	cbz	r3, 8005dea <_lseek_r+0x1e>
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	bd38      	pop	{r3, r4, r5, pc}
 8005dec:	20004664 	.word	0x20004664

08005df0 <_read_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4d07      	ldr	r5, [pc, #28]	@ (8005e10 <_read_r+0x20>)
 8005df4:	4604      	mov	r4, r0
 8005df6:	4608      	mov	r0, r1
 8005df8:	4611      	mov	r1, r2
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	602a      	str	r2, [r5, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f7fb f87c 	bl	8000efc <_read>
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d102      	bne.n	8005e0e <_read_r+0x1e>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	b103      	cbz	r3, 8005e0e <_read_r+0x1e>
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	bd38      	pop	{r3, r4, r5, pc}
 8005e10:	20004664 	.word	0x20004664

08005e14 <_write_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4d07      	ldr	r5, [pc, #28]	@ (8005e34 <_write_r+0x20>)
 8005e18:	4604      	mov	r4, r0
 8005e1a:	4608      	mov	r0, r1
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	2200      	movs	r2, #0
 8005e20:	602a      	str	r2, [r5, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f7fb f887 	bl	8000f36 <_write>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d102      	bne.n	8005e32 <_write_r+0x1e>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	b103      	cbz	r3, 8005e32 <_write_r+0x1e>
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	20004664 	.word	0x20004664

08005e38 <__errno>:
 8005e38:	4b01      	ldr	r3, [pc, #4]	@ (8005e40 <__errno+0x8>)
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	20000024 	.word	0x20000024

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	4d0d      	ldr	r5, [pc, #52]	@ (8005e7c <__libc_init_array+0x38>)
 8005e48:	4c0d      	ldr	r4, [pc, #52]	@ (8005e80 <__libc_init_array+0x3c>)
 8005e4a:	1b64      	subs	r4, r4, r5
 8005e4c:	10a4      	asrs	r4, r4, #2
 8005e4e:	2600      	movs	r6, #0
 8005e50:	42a6      	cmp	r6, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	4d0b      	ldr	r5, [pc, #44]	@ (8005e84 <__libc_init_array+0x40>)
 8005e56:	4c0c      	ldr	r4, [pc, #48]	@ (8005e88 <__libc_init_array+0x44>)
 8005e58:	f000 fed8 	bl	8006c0c <_init>
 8005e5c:	1b64      	subs	r4, r4, r5
 8005e5e:	10a4      	asrs	r4, r4, #2
 8005e60:	2600      	movs	r6, #0
 8005e62:	42a6      	cmp	r6, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6c:	4798      	blx	r3
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e76:	4798      	blx	r3
 8005e78:	3601      	adds	r6, #1
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	08007068 	.word	0x08007068
 8005e80:	08007068 	.word	0x08007068
 8005e84:	08007068 	.word	0x08007068
 8005e88:	0800706c 	.word	0x0800706c

08005e8c <__retarget_lock_init_recursive>:
 8005e8c:	4770      	bx	lr

08005e8e <__retarget_lock_acquire_recursive>:
 8005e8e:	4770      	bx	lr

08005e90 <__retarget_lock_release_recursive>:
 8005e90:	4770      	bx	lr

08005e92 <memcpy>:
 8005e92:	440a      	add	r2, r1
 8005e94:	4291      	cmp	r1, r2
 8005e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e9a:	d100      	bne.n	8005e9e <memcpy+0xc>
 8005e9c:	4770      	bx	lr
 8005e9e:	b510      	push	{r4, lr}
 8005ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ea8:	4291      	cmp	r1, r2
 8005eaa:	d1f9      	bne.n	8005ea0 <memcpy+0xe>
 8005eac:	bd10      	pop	{r4, pc}
	...

08005eb0 <_free_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	2900      	cmp	r1, #0
 8005eb6:	d041      	beq.n	8005f3c <_free_r+0x8c>
 8005eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ebc:	1f0c      	subs	r4, r1, #4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	bfb8      	it	lt
 8005ec2:	18e4      	addlt	r4, r4, r3
 8005ec4:	f000 f8e0 	bl	8006088 <__malloc_lock>
 8005ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f40 <_free_r+0x90>)
 8005eca:	6813      	ldr	r3, [r2, #0]
 8005ecc:	b933      	cbnz	r3, 8005edc <_free_r+0x2c>
 8005ece:	6063      	str	r3, [r4, #4]
 8005ed0:	6014      	str	r4, [r2, #0]
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ed8:	f000 b8dc 	b.w	8006094 <__malloc_unlock>
 8005edc:	42a3      	cmp	r3, r4
 8005ede:	d908      	bls.n	8005ef2 <_free_r+0x42>
 8005ee0:	6820      	ldr	r0, [r4, #0]
 8005ee2:	1821      	adds	r1, r4, r0
 8005ee4:	428b      	cmp	r3, r1
 8005ee6:	bf01      	itttt	eq
 8005ee8:	6819      	ldreq	r1, [r3, #0]
 8005eea:	685b      	ldreq	r3, [r3, #4]
 8005eec:	1809      	addeq	r1, r1, r0
 8005eee:	6021      	streq	r1, [r4, #0]
 8005ef0:	e7ed      	b.n	8005ece <_free_r+0x1e>
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	b10b      	cbz	r3, 8005efc <_free_r+0x4c>
 8005ef8:	42a3      	cmp	r3, r4
 8005efa:	d9fa      	bls.n	8005ef2 <_free_r+0x42>
 8005efc:	6811      	ldr	r1, [r2, #0]
 8005efe:	1850      	adds	r0, r2, r1
 8005f00:	42a0      	cmp	r0, r4
 8005f02:	d10b      	bne.n	8005f1c <_free_r+0x6c>
 8005f04:	6820      	ldr	r0, [r4, #0]
 8005f06:	4401      	add	r1, r0
 8005f08:	1850      	adds	r0, r2, r1
 8005f0a:	4283      	cmp	r3, r0
 8005f0c:	6011      	str	r1, [r2, #0]
 8005f0e:	d1e0      	bne.n	8005ed2 <_free_r+0x22>
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	6053      	str	r3, [r2, #4]
 8005f16:	4408      	add	r0, r1
 8005f18:	6010      	str	r0, [r2, #0]
 8005f1a:	e7da      	b.n	8005ed2 <_free_r+0x22>
 8005f1c:	d902      	bls.n	8005f24 <_free_r+0x74>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	602b      	str	r3, [r5, #0]
 8005f22:	e7d6      	b.n	8005ed2 <_free_r+0x22>
 8005f24:	6820      	ldr	r0, [r4, #0]
 8005f26:	1821      	adds	r1, r4, r0
 8005f28:	428b      	cmp	r3, r1
 8005f2a:	bf04      	itt	eq
 8005f2c:	6819      	ldreq	r1, [r3, #0]
 8005f2e:	685b      	ldreq	r3, [r3, #4]
 8005f30:	6063      	str	r3, [r4, #4]
 8005f32:	bf04      	itt	eq
 8005f34:	1809      	addeq	r1, r1, r0
 8005f36:	6021      	streq	r1, [r4, #0]
 8005f38:	6054      	str	r4, [r2, #4]
 8005f3a:	e7ca      	b.n	8005ed2 <_free_r+0x22>
 8005f3c:	bd38      	pop	{r3, r4, r5, pc}
 8005f3e:	bf00      	nop
 8005f40:	20004670 	.word	0x20004670

08005f44 <sbrk_aligned>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	4e0f      	ldr	r6, [pc, #60]	@ (8005f84 <sbrk_aligned+0x40>)
 8005f48:	460c      	mov	r4, r1
 8005f4a:	6831      	ldr	r1, [r6, #0]
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	b911      	cbnz	r1, 8005f56 <sbrk_aligned+0x12>
 8005f50:	f000 fe16 	bl	8006b80 <_sbrk_r>
 8005f54:	6030      	str	r0, [r6, #0]
 8005f56:	4621      	mov	r1, r4
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f000 fe11 	bl	8006b80 <_sbrk_r>
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	d103      	bne.n	8005f6a <sbrk_aligned+0x26>
 8005f62:	f04f 34ff 	mov.w	r4, #4294967295
 8005f66:	4620      	mov	r0, r4
 8005f68:	bd70      	pop	{r4, r5, r6, pc}
 8005f6a:	1cc4      	adds	r4, r0, #3
 8005f6c:	f024 0403 	bic.w	r4, r4, #3
 8005f70:	42a0      	cmp	r0, r4
 8005f72:	d0f8      	beq.n	8005f66 <sbrk_aligned+0x22>
 8005f74:	1a21      	subs	r1, r4, r0
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 fe02 	bl	8006b80 <_sbrk_r>
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d1f2      	bne.n	8005f66 <sbrk_aligned+0x22>
 8005f80:	e7ef      	b.n	8005f62 <sbrk_aligned+0x1e>
 8005f82:	bf00      	nop
 8005f84:	2000466c 	.word	0x2000466c

08005f88 <_malloc_r>:
 8005f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f8c:	1ccd      	adds	r5, r1, #3
 8005f8e:	f025 0503 	bic.w	r5, r5, #3
 8005f92:	3508      	adds	r5, #8
 8005f94:	2d0c      	cmp	r5, #12
 8005f96:	bf38      	it	cc
 8005f98:	250c      	movcc	r5, #12
 8005f9a:	2d00      	cmp	r5, #0
 8005f9c:	4606      	mov	r6, r0
 8005f9e:	db01      	blt.n	8005fa4 <_malloc_r+0x1c>
 8005fa0:	42a9      	cmp	r1, r5
 8005fa2:	d904      	bls.n	8005fae <_malloc_r+0x26>
 8005fa4:	230c      	movs	r3, #12
 8005fa6:	6033      	str	r3, [r6, #0]
 8005fa8:	2000      	movs	r0, #0
 8005faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006084 <_malloc_r+0xfc>
 8005fb2:	f000 f869 	bl	8006088 <__malloc_lock>
 8005fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8005fba:	461c      	mov	r4, r3
 8005fbc:	bb44      	cbnz	r4, 8006010 <_malloc_r+0x88>
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	f7ff ffbf 	bl	8005f44 <sbrk_aligned>
 8005fc6:	1c43      	adds	r3, r0, #1
 8005fc8:	4604      	mov	r4, r0
 8005fca:	d158      	bne.n	800607e <_malloc_r+0xf6>
 8005fcc:	f8d8 4000 	ldr.w	r4, [r8]
 8005fd0:	4627      	mov	r7, r4
 8005fd2:	2f00      	cmp	r7, #0
 8005fd4:	d143      	bne.n	800605e <_malloc_r+0xd6>
 8005fd6:	2c00      	cmp	r4, #0
 8005fd8:	d04b      	beq.n	8006072 <_malloc_r+0xea>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	4639      	mov	r1, r7
 8005fde:	4630      	mov	r0, r6
 8005fe0:	eb04 0903 	add.w	r9, r4, r3
 8005fe4:	f000 fdcc 	bl	8006b80 <_sbrk_r>
 8005fe8:	4581      	cmp	r9, r0
 8005fea:	d142      	bne.n	8006072 <_malloc_r+0xea>
 8005fec:	6821      	ldr	r1, [r4, #0]
 8005fee:	1a6d      	subs	r5, r5, r1
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	f7ff ffa6 	bl	8005f44 <sbrk_aligned>
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d03a      	beq.n	8006072 <_malloc_r+0xea>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	442b      	add	r3, r5
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	f8d8 3000 	ldr.w	r3, [r8]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	bb62      	cbnz	r2, 8006064 <_malloc_r+0xdc>
 800600a:	f8c8 7000 	str.w	r7, [r8]
 800600e:	e00f      	b.n	8006030 <_malloc_r+0xa8>
 8006010:	6822      	ldr	r2, [r4, #0]
 8006012:	1b52      	subs	r2, r2, r5
 8006014:	d420      	bmi.n	8006058 <_malloc_r+0xd0>
 8006016:	2a0b      	cmp	r2, #11
 8006018:	d917      	bls.n	800604a <_malloc_r+0xc2>
 800601a:	1961      	adds	r1, r4, r5
 800601c:	42a3      	cmp	r3, r4
 800601e:	6025      	str	r5, [r4, #0]
 8006020:	bf18      	it	ne
 8006022:	6059      	strne	r1, [r3, #4]
 8006024:	6863      	ldr	r3, [r4, #4]
 8006026:	bf08      	it	eq
 8006028:	f8c8 1000 	streq.w	r1, [r8]
 800602c:	5162      	str	r2, [r4, r5]
 800602e:	604b      	str	r3, [r1, #4]
 8006030:	4630      	mov	r0, r6
 8006032:	f000 f82f 	bl	8006094 <__malloc_unlock>
 8006036:	f104 000b 	add.w	r0, r4, #11
 800603a:	1d23      	adds	r3, r4, #4
 800603c:	f020 0007 	bic.w	r0, r0, #7
 8006040:	1ac2      	subs	r2, r0, r3
 8006042:	bf1c      	itt	ne
 8006044:	1a1b      	subne	r3, r3, r0
 8006046:	50a3      	strne	r3, [r4, r2]
 8006048:	e7af      	b.n	8005faa <_malloc_r+0x22>
 800604a:	6862      	ldr	r2, [r4, #4]
 800604c:	42a3      	cmp	r3, r4
 800604e:	bf0c      	ite	eq
 8006050:	f8c8 2000 	streq.w	r2, [r8]
 8006054:	605a      	strne	r2, [r3, #4]
 8006056:	e7eb      	b.n	8006030 <_malloc_r+0xa8>
 8006058:	4623      	mov	r3, r4
 800605a:	6864      	ldr	r4, [r4, #4]
 800605c:	e7ae      	b.n	8005fbc <_malloc_r+0x34>
 800605e:	463c      	mov	r4, r7
 8006060:	687f      	ldr	r7, [r7, #4]
 8006062:	e7b6      	b.n	8005fd2 <_malloc_r+0x4a>
 8006064:	461a      	mov	r2, r3
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	42a3      	cmp	r3, r4
 800606a:	d1fb      	bne.n	8006064 <_malloc_r+0xdc>
 800606c:	2300      	movs	r3, #0
 800606e:	6053      	str	r3, [r2, #4]
 8006070:	e7de      	b.n	8006030 <_malloc_r+0xa8>
 8006072:	230c      	movs	r3, #12
 8006074:	6033      	str	r3, [r6, #0]
 8006076:	4630      	mov	r0, r6
 8006078:	f000 f80c 	bl	8006094 <__malloc_unlock>
 800607c:	e794      	b.n	8005fa8 <_malloc_r+0x20>
 800607e:	6005      	str	r5, [r0, #0]
 8006080:	e7d6      	b.n	8006030 <_malloc_r+0xa8>
 8006082:	bf00      	nop
 8006084:	20004670 	.word	0x20004670

08006088 <__malloc_lock>:
 8006088:	4801      	ldr	r0, [pc, #4]	@ (8006090 <__malloc_lock+0x8>)
 800608a:	f7ff bf00 	b.w	8005e8e <__retarget_lock_acquire_recursive>
 800608e:	bf00      	nop
 8006090:	20004668 	.word	0x20004668

08006094 <__malloc_unlock>:
 8006094:	4801      	ldr	r0, [pc, #4]	@ (800609c <__malloc_unlock+0x8>)
 8006096:	f7ff befb 	b.w	8005e90 <__retarget_lock_release_recursive>
 800609a:	bf00      	nop
 800609c:	20004668 	.word	0x20004668

080060a0 <__ssputs_r>:
 80060a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a4:	688e      	ldr	r6, [r1, #8]
 80060a6:	461f      	mov	r7, r3
 80060a8:	42be      	cmp	r6, r7
 80060aa:	680b      	ldr	r3, [r1, #0]
 80060ac:	4682      	mov	sl, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	4690      	mov	r8, r2
 80060b2:	d82d      	bhi.n	8006110 <__ssputs_r+0x70>
 80060b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060bc:	d026      	beq.n	800610c <__ssputs_r+0x6c>
 80060be:	6965      	ldr	r5, [r4, #20]
 80060c0:	6909      	ldr	r1, [r1, #16]
 80060c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060c6:	eba3 0901 	sub.w	r9, r3, r1
 80060ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060ce:	1c7b      	adds	r3, r7, #1
 80060d0:	444b      	add	r3, r9
 80060d2:	106d      	asrs	r5, r5, #1
 80060d4:	429d      	cmp	r5, r3
 80060d6:	bf38      	it	cc
 80060d8:	461d      	movcc	r5, r3
 80060da:	0553      	lsls	r3, r2, #21
 80060dc:	d527      	bpl.n	800612e <__ssputs_r+0x8e>
 80060de:	4629      	mov	r1, r5
 80060e0:	f7ff ff52 	bl	8005f88 <_malloc_r>
 80060e4:	4606      	mov	r6, r0
 80060e6:	b360      	cbz	r0, 8006142 <__ssputs_r+0xa2>
 80060e8:	6921      	ldr	r1, [r4, #16]
 80060ea:	464a      	mov	r2, r9
 80060ec:	f7ff fed1 	bl	8005e92 <memcpy>
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80060f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060fa:	81a3      	strh	r3, [r4, #12]
 80060fc:	6126      	str	r6, [r4, #16]
 80060fe:	6165      	str	r5, [r4, #20]
 8006100:	444e      	add	r6, r9
 8006102:	eba5 0509 	sub.w	r5, r5, r9
 8006106:	6026      	str	r6, [r4, #0]
 8006108:	60a5      	str	r5, [r4, #8]
 800610a:	463e      	mov	r6, r7
 800610c:	42be      	cmp	r6, r7
 800610e:	d900      	bls.n	8006112 <__ssputs_r+0x72>
 8006110:	463e      	mov	r6, r7
 8006112:	6820      	ldr	r0, [r4, #0]
 8006114:	4632      	mov	r2, r6
 8006116:	4641      	mov	r1, r8
 8006118:	f000 fcf6 	bl	8006b08 <memmove>
 800611c:	68a3      	ldr	r3, [r4, #8]
 800611e:	1b9b      	subs	r3, r3, r6
 8006120:	60a3      	str	r3, [r4, #8]
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	4433      	add	r3, r6
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	2000      	movs	r0, #0
 800612a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612e:	462a      	mov	r2, r5
 8006130:	f000 fd36 	bl	8006ba0 <_realloc_r>
 8006134:	4606      	mov	r6, r0
 8006136:	2800      	cmp	r0, #0
 8006138:	d1e0      	bne.n	80060fc <__ssputs_r+0x5c>
 800613a:	6921      	ldr	r1, [r4, #16]
 800613c:	4650      	mov	r0, sl
 800613e:	f7ff feb7 	bl	8005eb0 <_free_r>
 8006142:	230c      	movs	r3, #12
 8006144:	f8ca 3000 	str.w	r3, [sl]
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800614e:	81a3      	strh	r3, [r4, #12]
 8006150:	f04f 30ff 	mov.w	r0, #4294967295
 8006154:	e7e9      	b.n	800612a <__ssputs_r+0x8a>
	...

08006158 <_svfiprintf_r>:
 8006158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615c:	4698      	mov	r8, r3
 800615e:	898b      	ldrh	r3, [r1, #12]
 8006160:	061b      	lsls	r3, r3, #24
 8006162:	b09d      	sub	sp, #116	@ 0x74
 8006164:	4607      	mov	r7, r0
 8006166:	460d      	mov	r5, r1
 8006168:	4614      	mov	r4, r2
 800616a:	d510      	bpl.n	800618e <_svfiprintf_r+0x36>
 800616c:	690b      	ldr	r3, [r1, #16]
 800616e:	b973      	cbnz	r3, 800618e <_svfiprintf_r+0x36>
 8006170:	2140      	movs	r1, #64	@ 0x40
 8006172:	f7ff ff09 	bl	8005f88 <_malloc_r>
 8006176:	6028      	str	r0, [r5, #0]
 8006178:	6128      	str	r0, [r5, #16]
 800617a:	b930      	cbnz	r0, 800618a <_svfiprintf_r+0x32>
 800617c:	230c      	movs	r3, #12
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
 8006184:	b01d      	add	sp, #116	@ 0x74
 8006186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618a:	2340      	movs	r3, #64	@ 0x40
 800618c:	616b      	str	r3, [r5, #20]
 800618e:	2300      	movs	r3, #0
 8006190:	9309      	str	r3, [sp, #36]	@ 0x24
 8006192:	2320      	movs	r3, #32
 8006194:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006198:	f8cd 800c 	str.w	r8, [sp, #12]
 800619c:	2330      	movs	r3, #48	@ 0x30
 800619e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800633c <_svfiprintf_r+0x1e4>
 80061a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061a6:	f04f 0901 	mov.w	r9, #1
 80061aa:	4623      	mov	r3, r4
 80061ac:	469a      	mov	sl, r3
 80061ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061b2:	b10a      	cbz	r2, 80061b8 <_svfiprintf_r+0x60>
 80061b4:	2a25      	cmp	r2, #37	@ 0x25
 80061b6:	d1f9      	bne.n	80061ac <_svfiprintf_r+0x54>
 80061b8:	ebba 0b04 	subs.w	fp, sl, r4
 80061bc:	d00b      	beq.n	80061d6 <_svfiprintf_r+0x7e>
 80061be:	465b      	mov	r3, fp
 80061c0:	4622      	mov	r2, r4
 80061c2:	4629      	mov	r1, r5
 80061c4:	4638      	mov	r0, r7
 80061c6:	f7ff ff6b 	bl	80060a0 <__ssputs_r>
 80061ca:	3001      	adds	r0, #1
 80061cc:	f000 80a7 	beq.w	800631e <_svfiprintf_r+0x1c6>
 80061d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061d2:	445a      	add	r2, fp
 80061d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80061d6:	f89a 3000 	ldrb.w	r3, [sl]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 809f 	beq.w	800631e <_svfiprintf_r+0x1c6>
 80061e0:	2300      	movs	r3, #0
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295
 80061e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ea:	f10a 0a01 	add.w	sl, sl, #1
 80061ee:	9304      	str	r3, [sp, #16]
 80061f0:	9307      	str	r3, [sp, #28]
 80061f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80061f8:	4654      	mov	r4, sl
 80061fa:	2205      	movs	r2, #5
 80061fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006200:	484e      	ldr	r0, [pc, #312]	@ (800633c <_svfiprintf_r+0x1e4>)
 8006202:	f7fa f805 	bl	8000210 <memchr>
 8006206:	9a04      	ldr	r2, [sp, #16]
 8006208:	b9d8      	cbnz	r0, 8006242 <_svfiprintf_r+0xea>
 800620a:	06d0      	lsls	r0, r2, #27
 800620c:	bf44      	itt	mi
 800620e:	2320      	movmi	r3, #32
 8006210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006214:	0711      	lsls	r1, r2, #28
 8006216:	bf44      	itt	mi
 8006218:	232b      	movmi	r3, #43	@ 0x2b
 800621a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800621e:	f89a 3000 	ldrb.w	r3, [sl]
 8006222:	2b2a      	cmp	r3, #42	@ 0x2a
 8006224:	d015      	beq.n	8006252 <_svfiprintf_r+0xfa>
 8006226:	9a07      	ldr	r2, [sp, #28]
 8006228:	4654      	mov	r4, sl
 800622a:	2000      	movs	r0, #0
 800622c:	f04f 0c0a 	mov.w	ip, #10
 8006230:	4621      	mov	r1, r4
 8006232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006236:	3b30      	subs	r3, #48	@ 0x30
 8006238:	2b09      	cmp	r3, #9
 800623a:	d94b      	bls.n	80062d4 <_svfiprintf_r+0x17c>
 800623c:	b1b0      	cbz	r0, 800626c <_svfiprintf_r+0x114>
 800623e:	9207      	str	r2, [sp, #28]
 8006240:	e014      	b.n	800626c <_svfiprintf_r+0x114>
 8006242:	eba0 0308 	sub.w	r3, r0, r8
 8006246:	fa09 f303 	lsl.w	r3, r9, r3
 800624a:	4313      	orrs	r3, r2
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	46a2      	mov	sl, r4
 8006250:	e7d2      	b.n	80061f8 <_svfiprintf_r+0xa0>
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	1d19      	adds	r1, r3, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	9103      	str	r1, [sp, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	bfbb      	ittet	lt
 800625e:	425b      	neglt	r3, r3
 8006260:	f042 0202 	orrlt.w	r2, r2, #2
 8006264:	9307      	strge	r3, [sp, #28]
 8006266:	9307      	strlt	r3, [sp, #28]
 8006268:	bfb8      	it	lt
 800626a:	9204      	strlt	r2, [sp, #16]
 800626c:	7823      	ldrb	r3, [r4, #0]
 800626e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006270:	d10a      	bne.n	8006288 <_svfiprintf_r+0x130>
 8006272:	7863      	ldrb	r3, [r4, #1]
 8006274:	2b2a      	cmp	r3, #42	@ 0x2a
 8006276:	d132      	bne.n	80062de <_svfiprintf_r+0x186>
 8006278:	9b03      	ldr	r3, [sp, #12]
 800627a:	1d1a      	adds	r2, r3, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	9203      	str	r2, [sp, #12]
 8006280:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006284:	3402      	adds	r4, #2
 8006286:	9305      	str	r3, [sp, #20]
 8006288:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800634c <_svfiprintf_r+0x1f4>
 800628c:	7821      	ldrb	r1, [r4, #0]
 800628e:	2203      	movs	r2, #3
 8006290:	4650      	mov	r0, sl
 8006292:	f7f9 ffbd 	bl	8000210 <memchr>
 8006296:	b138      	cbz	r0, 80062a8 <_svfiprintf_r+0x150>
 8006298:	9b04      	ldr	r3, [sp, #16]
 800629a:	eba0 000a 	sub.w	r0, r0, sl
 800629e:	2240      	movs	r2, #64	@ 0x40
 80062a0:	4082      	lsls	r2, r0
 80062a2:	4313      	orrs	r3, r2
 80062a4:	3401      	adds	r4, #1
 80062a6:	9304      	str	r3, [sp, #16]
 80062a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ac:	4824      	ldr	r0, [pc, #144]	@ (8006340 <_svfiprintf_r+0x1e8>)
 80062ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062b2:	2206      	movs	r2, #6
 80062b4:	f7f9 ffac 	bl	8000210 <memchr>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d036      	beq.n	800632a <_svfiprintf_r+0x1d2>
 80062bc:	4b21      	ldr	r3, [pc, #132]	@ (8006344 <_svfiprintf_r+0x1ec>)
 80062be:	bb1b      	cbnz	r3, 8006308 <_svfiprintf_r+0x1b0>
 80062c0:	9b03      	ldr	r3, [sp, #12]
 80062c2:	3307      	adds	r3, #7
 80062c4:	f023 0307 	bic.w	r3, r3, #7
 80062c8:	3308      	adds	r3, #8
 80062ca:	9303      	str	r3, [sp, #12]
 80062cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ce:	4433      	add	r3, r6
 80062d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80062d2:	e76a      	b.n	80061aa <_svfiprintf_r+0x52>
 80062d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80062d8:	460c      	mov	r4, r1
 80062da:	2001      	movs	r0, #1
 80062dc:	e7a8      	b.n	8006230 <_svfiprintf_r+0xd8>
 80062de:	2300      	movs	r3, #0
 80062e0:	3401      	adds	r4, #1
 80062e2:	9305      	str	r3, [sp, #20]
 80062e4:	4619      	mov	r1, r3
 80062e6:	f04f 0c0a 	mov.w	ip, #10
 80062ea:	4620      	mov	r0, r4
 80062ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062f0:	3a30      	subs	r2, #48	@ 0x30
 80062f2:	2a09      	cmp	r2, #9
 80062f4:	d903      	bls.n	80062fe <_svfiprintf_r+0x1a6>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0c6      	beq.n	8006288 <_svfiprintf_r+0x130>
 80062fa:	9105      	str	r1, [sp, #20]
 80062fc:	e7c4      	b.n	8006288 <_svfiprintf_r+0x130>
 80062fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006302:	4604      	mov	r4, r0
 8006304:	2301      	movs	r3, #1
 8006306:	e7f0      	b.n	80062ea <_svfiprintf_r+0x192>
 8006308:	ab03      	add	r3, sp, #12
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	462a      	mov	r2, r5
 800630e:	4b0e      	ldr	r3, [pc, #56]	@ (8006348 <_svfiprintf_r+0x1f0>)
 8006310:	a904      	add	r1, sp, #16
 8006312:	4638      	mov	r0, r7
 8006314:	f3af 8000 	nop.w
 8006318:	1c42      	adds	r2, r0, #1
 800631a:	4606      	mov	r6, r0
 800631c:	d1d6      	bne.n	80062cc <_svfiprintf_r+0x174>
 800631e:	89ab      	ldrh	r3, [r5, #12]
 8006320:	065b      	lsls	r3, r3, #25
 8006322:	f53f af2d 	bmi.w	8006180 <_svfiprintf_r+0x28>
 8006326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006328:	e72c      	b.n	8006184 <_svfiprintf_r+0x2c>
 800632a:	ab03      	add	r3, sp, #12
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	462a      	mov	r2, r5
 8006330:	4b05      	ldr	r3, [pc, #20]	@ (8006348 <_svfiprintf_r+0x1f0>)
 8006332:	a904      	add	r1, sp, #16
 8006334:	4638      	mov	r0, r7
 8006336:	f000 f9bb 	bl	80066b0 <_printf_i>
 800633a:	e7ed      	b.n	8006318 <_svfiprintf_r+0x1c0>
 800633c:	0800702d 	.word	0x0800702d
 8006340:	08007037 	.word	0x08007037
 8006344:	00000000 	.word	0x00000000
 8006348:	080060a1 	.word	0x080060a1
 800634c:	08007033 	.word	0x08007033

08006350 <__sfputc_r>:
 8006350:	6893      	ldr	r3, [r2, #8]
 8006352:	3b01      	subs	r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	b410      	push	{r4}
 8006358:	6093      	str	r3, [r2, #8]
 800635a:	da08      	bge.n	800636e <__sfputc_r+0x1e>
 800635c:	6994      	ldr	r4, [r2, #24]
 800635e:	42a3      	cmp	r3, r4
 8006360:	db01      	blt.n	8006366 <__sfputc_r+0x16>
 8006362:	290a      	cmp	r1, #10
 8006364:	d103      	bne.n	800636e <__sfputc_r+0x1e>
 8006366:	f85d 4b04 	ldr.w	r4, [sp], #4
 800636a:	f7ff bc24 	b.w	8005bb6 <__swbuf_r>
 800636e:	6813      	ldr	r3, [r2, #0]
 8006370:	1c58      	adds	r0, r3, #1
 8006372:	6010      	str	r0, [r2, #0]
 8006374:	7019      	strb	r1, [r3, #0]
 8006376:	4608      	mov	r0, r1
 8006378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800637c:	4770      	bx	lr

0800637e <__sfputs_r>:
 800637e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006380:	4606      	mov	r6, r0
 8006382:	460f      	mov	r7, r1
 8006384:	4614      	mov	r4, r2
 8006386:	18d5      	adds	r5, r2, r3
 8006388:	42ac      	cmp	r4, r5
 800638a:	d101      	bne.n	8006390 <__sfputs_r+0x12>
 800638c:	2000      	movs	r0, #0
 800638e:	e007      	b.n	80063a0 <__sfputs_r+0x22>
 8006390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006394:	463a      	mov	r2, r7
 8006396:	4630      	mov	r0, r6
 8006398:	f7ff ffda 	bl	8006350 <__sfputc_r>
 800639c:	1c43      	adds	r3, r0, #1
 800639e:	d1f3      	bne.n	8006388 <__sfputs_r+0xa>
 80063a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063a4 <_vfiprintf_r>:
 80063a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a8:	460d      	mov	r5, r1
 80063aa:	b09d      	sub	sp, #116	@ 0x74
 80063ac:	4614      	mov	r4, r2
 80063ae:	4698      	mov	r8, r3
 80063b0:	4606      	mov	r6, r0
 80063b2:	b118      	cbz	r0, 80063bc <_vfiprintf_r+0x18>
 80063b4:	6a03      	ldr	r3, [r0, #32]
 80063b6:	b90b      	cbnz	r3, 80063bc <_vfiprintf_r+0x18>
 80063b8:	f7ff fade 	bl	8005978 <__sinit>
 80063bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063be:	07d9      	lsls	r1, r3, #31
 80063c0:	d405      	bmi.n	80063ce <_vfiprintf_r+0x2a>
 80063c2:	89ab      	ldrh	r3, [r5, #12]
 80063c4:	059a      	lsls	r2, r3, #22
 80063c6:	d402      	bmi.n	80063ce <_vfiprintf_r+0x2a>
 80063c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063ca:	f7ff fd60 	bl	8005e8e <__retarget_lock_acquire_recursive>
 80063ce:	89ab      	ldrh	r3, [r5, #12]
 80063d0:	071b      	lsls	r3, r3, #28
 80063d2:	d501      	bpl.n	80063d8 <_vfiprintf_r+0x34>
 80063d4:	692b      	ldr	r3, [r5, #16]
 80063d6:	b99b      	cbnz	r3, 8006400 <_vfiprintf_r+0x5c>
 80063d8:	4629      	mov	r1, r5
 80063da:	4630      	mov	r0, r6
 80063dc:	f7ff fc2a 	bl	8005c34 <__swsetup_r>
 80063e0:	b170      	cbz	r0, 8006400 <_vfiprintf_r+0x5c>
 80063e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063e4:	07dc      	lsls	r4, r3, #31
 80063e6:	d504      	bpl.n	80063f2 <_vfiprintf_r+0x4e>
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	b01d      	add	sp, #116	@ 0x74
 80063ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f2:	89ab      	ldrh	r3, [r5, #12]
 80063f4:	0598      	lsls	r0, r3, #22
 80063f6:	d4f7      	bmi.n	80063e8 <_vfiprintf_r+0x44>
 80063f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063fa:	f7ff fd49 	bl	8005e90 <__retarget_lock_release_recursive>
 80063fe:	e7f3      	b.n	80063e8 <_vfiprintf_r+0x44>
 8006400:	2300      	movs	r3, #0
 8006402:	9309      	str	r3, [sp, #36]	@ 0x24
 8006404:	2320      	movs	r3, #32
 8006406:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800640a:	f8cd 800c 	str.w	r8, [sp, #12]
 800640e:	2330      	movs	r3, #48	@ 0x30
 8006410:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80065c0 <_vfiprintf_r+0x21c>
 8006414:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006418:	f04f 0901 	mov.w	r9, #1
 800641c:	4623      	mov	r3, r4
 800641e:	469a      	mov	sl, r3
 8006420:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006424:	b10a      	cbz	r2, 800642a <_vfiprintf_r+0x86>
 8006426:	2a25      	cmp	r2, #37	@ 0x25
 8006428:	d1f9      	bne.n	800641e <_vfiprintf_r+0x7a>
 800642a:	ebba 0b04 	subs.w	fp, sl, r4
 800642e:	d00b      	beq.n	8006448 <_vfiprintf_r+0xa4>
 8006430:	465b      	mov	r3, fp
 8006432:	4622      	mov	r2, r4
 8006434:	4629      	mov	r1, r5
 8006436:	4630      	mov	r0, r6
 8006438:	f7ff ffa1 	bl	800637e <__sfputs_r>
 800643c:	3001      	adds	r0, #1
 800643e:	f000 80a7 	beq.w	8006590 <_vfiprintf_r+0x1ec>
 8006442:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006444:	445a      	add	r2, fp
 8006446:	9209      	str	r2, [sp, #36]	@ 0x24
 8006448:	f89a 3000 	ldrb.w	r3, [sl]
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 809f 	beq.w	8006590 <_vfiprintf_r+0x1ec>
 8006452:	2300      	movs	r3, #0
 8006454:	f04f 32ff 	mov.w	r2, #4294967295
 8006458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800645c:	f10a 0a01 	add.w	sl, sl, #1
 8006460:	9304      	str	r3, [sp, #16]
 8006462:	9307      	str	r3, [sp, #28]
 8006464:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006468:	931a      	str	r3, [sp, #104]	@ 0x68
 800646a:	4654      	mov	r4, sl
 800646c:	2205      	movs	r2, #5
 800646e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006472:	4853      	ldr	r0, [pc, #332]	@ (80065c0 <_vfiprintf_r+0x21c>)
 8006474:	f7f9 fecc 	bl	8000210 <memchr>
 8006478:	9a04      	ldr	r2, [sp, #16]
 800647a:	b9d8      	cbnz	r0, 80064b4 <_vfiprintf_r+0x110>
 800647c:	06d1      	lsls	r1, r2, #27
 800647e:	bf44      	itt	mi
 8006480:	2320      	movmi	r3, #32
 8006482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006486:	0713      	lsls	r3, r2, #28
 8006488:	bf44      	itt	mi
 800648a:	232b      	movmi	r3, #43	@ 0x2b
 800648c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006490:	f89a 3000 	ldrb.w	r3, [sl]
 8006494:	2b2a      	cmp	r3, #42	@ 0x2a
 8006496:	d015      	beq.n	80064c4 <_vfiprintf_r+0x120>
 8006498:	9a07      	ldr	r2, [sp, #28]
 800649a:	4654      	mov	r4, sl
 800649c:	2000      	movs	r0, #0
 800649e:	f04f 0c0a 	mov.w	ip, #10
 80064a2:	4621      	mov	r1, r4
 80064a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064a8:	3b30      	subs	r3, #48	@ 0x30
 80064aa:	2b09      	cmp	r3, #9
 80064ac:	d94b      	bls.n	8006546 <_vfiprintf_r+0x1a2>
 80064ae:	b1b0      	cbz	r0, 80064de <_vfiprintf_r+0x13a>
 80064b0:	9207      	str	r2, [sp, #28]
 80064b2:	e014      	b.n	80064de <_vfiprintf_r+0x13a>
 80064b4:	eba0 0308 	sub.w	r3, r0, r8
 80064b8:	fa09 f303 	lsl.w	r3, r9, r3
 80064bc:	4313      	orrs	r3, r2
 80064be:	9304      	str	r3, [sp, #16]
 80064c0:	46a2      	mov	sl, r4
 80064c2:	e7d2      	b.n	800646a <_vfiprintf_r+0xc6>
 80064c4:	9b03      	ldr	r3, [sp, #12]
 80064c6:	1d19      	adds	r1, r3, #4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	9103      	str	r1, [sp, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	bfbb      	ittet	lt
 80064d0:	425b      	neglt	r3, r3
 80064d2:	f042 0202 	orrlt.w	r2, r2, #2
 80064d6:	9307      	strge	r3, [sp, #28]
 80064d8:	9307      	strlt	r3, [sp, #28]
 80064da:	bfb8      	it	lt
 80064dc:	9204      	strlt	r2, [sp, #16]
 80064de:	7823      	ldrb	r3, [r4, #0]
 80064e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80064e2:	d10a      	bne.n	80064fa <_vfiprintf_r+0x156>
 80064e4:	7863      	ldrb	r3, [r4, #1]
 80064e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80064e8:	d132      	bne.n	8006550 <_vfiprintf_r+0x1ac>
 80064ea:	9b03      	ldr	r3, [sp, #12]
 80064ec:	1d1a      	adds	r2, r3, #4
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	9203      	str	r2, [sp, #12]
 80064f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064f6:	3402      	adds	r4, #2
 80064f8:	9305      	str	r3, [sp, #20]
 80064fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80065d0 <_vfiprintf_r+0x22c>
 80064fe:	7821      	ldrb	r1, [r4, #0]
 8006500:	2203      	movs	r2, #3
 8006502:	4650      	mov	r0, sl
 8006504:	f7f9 fe84 	bl	8000210 <memchr>
 8006508:	b138      	cbz	r0, 800651a <_vfiprintf_r+0x176>
 800650a:	9b04      	ldr	r3, [sp, #16]
 800650c:	eba0 000a 	sub.w	r0, r0, sl
 8006510:	2240      	movs	r2, #64	@ 0x40
 8006512:	4082      	lsls	r2, r0
 8006514:	4313      	orrs	r3, r2
 8006516:	3401      	adds	r4, #1
 8006518:	9304      	str	r3, [sp, #16]
 800651a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800651e:	4829      	ldr	r0, [pc, #164]	@ (80065c4 <_vfiprintf_r+0x220>)
 8006520:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006524:	2206      	movs	r2, #6
 8006526:	f7f9 fe73 	bl	8000210 <memchr>
 800652a:	2800      	cmp	r0, #0
 800652c:	d03f      	beq.n	80065ae <_vfiprintf_r+0x20a>
 800652e:	4b26      	ldr	r3, [pc, #152]	@ (80065c8 <_vfiprintf_r+0x224>)
 8006530:	bb1b      	cbnz	r3, 800657a <_vfiprintf_r+0x1d6>
 8006532:	9b03      	ldr	r3, [sp, #12]
 8006534:	3307      	adds	r3, #7
 8006536:	f023 0307 	bic.w	r3, r3, #7
 800653a:	3308      	adds	r3, #8
 800653c:	9303      	str	r3, [sp, #12]
 800653e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006540:	443b      	add	r3, r7
 8006542:	9309      	str	r3, [sp, #36]	@ 0x24
 8006544:	e76a      	b.n	800641c <_vfiprintf_r+0x78>
 8006546:	fb0c 3202 	mla	r2, ip, r2, r3
 800654a:	460c      	mov	r4, r1
 800654c:	2001      	movs	r0, #1
 800654e:	e7a8      	b.n	80064a2 <_vfiprintf_r+0xfe>
 8006550:	2300      	movs	r3, #0
 8006552:	3401      	adds	r4, #1
 8006554:	9305      	str	r3, [sp, #20]
 8006556:	4619      	mov	r1, r3
 8006558:	f04f 0c0a 	mov.w	ip, #10
 800655c:	4620      	mov	r0, r4
 800655e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006562:	3a30      	subs	r2, #48	@ 0x30
 8006564:	2a09      	cmp	r2, #9
 8006566:	d903      	bls.n	8006570 <_vfiprintf_r+0x1cc>
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0c6      	beq.n	80064fa <_vfiprintf_r+0x156>
 800656c:	9105      	str	r1, [sp, #20]
 800656e:	e7c4      	b.n	80064fa <_vfiprintf_r+0x156>
 8006570:	fb0c 2101 	mla	r1, ip, r1, r2
 8006574:	4604      	mov	r4, r0
 8006576:	2301      	movs	r3, #1
 8006578:	e7f0      	b.n	800655c <_vfiprintf_r+0x1b8>
 800657a:	ab03      	add	r3, sp, #12
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	462a      	mov	r2, r5
 8006580:	4b12      	ldr	r3, [pc, #72]	@ (80065cc <_vfiprintf_r+0x228>)
 8006582:	a904      	add	r1, sp, #16
 8006584:	4630      	mov	r0, r6
 8006586:	f3af 8000 	nop.w
 800658a:	4607      	mov	r7, r0
 800658c:	1c78      	adds	r0, r7, #1
 800658e:	d1d6      	bne.n	800653e <_vfiprintf_r+0x19a>
 8006590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006592:	07d9      	lsls	r1, r3, #31
 8006594:	d405      	bmi.n	80065a2 <_vfiprintf_r+0x1fe>
 8006596:	89ab      	ldrh	r3, [r5, #12]
 8006598:	059a      	lsls	r2, r3, #22
 800659a:	d402      	bmi.n	80065a2 <_vfiprintf_r+0x1fe>
 800659c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800659e:	f7ff fc77 	bl	8005e90 <__retarget_lock_release_recursive>
 80065a2:	89ab      	ldrh	r3, [r5, #12]
 80065a4:	065b      	lsls	r3, r3, #25
 80065a6:	f53f af1f 	bmi.w	80063e8 <_vfiprintf_r+0x44>
 80065aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065ac:	e71e      	b.n	80063ec <_vfiprintf_r+0x48>
 80065ae:	ab03      	add	r3, sp, #12
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	462a      	mov	r2, r5
 80065b4:	4b05      	ldr	r3, [pc, #20]	@ (80065cc <_vfiprintf_r+0x228>)
 80065b6:	a904      	add	r1, sp, #16
 80065b8:	4630      	mov	r0, r6
 80065ba:	f000 f879 	bl	80066b0 <_printf_i>
 80065be:	e7e4      	b.n	800658a <_vfiprintf_r+0x1e6>
 80065c0:	0800702d 	.word	0x0800702d
 80065c4:	08007037 	.word	0x08007037
 80065c8:	00000000 	.word	0x00000000
 80065cc:	0800637f 	.word	0x0800637f
 80065d0:	08007033 	.word	0x08007033

080065d4 <_printf_common>:
 80065d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d8:	4616      	mov	r6, r2
 80065da:	4698      	mov	r8, r3
 80065dc:	688a      	ldr	r2, [r1, #8]
 80065de:	690b      	ldr	r3, [r1, #16]
 80065e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	bfb8      	it	lt
 80065e8:	4613      	movlt	r3, r2
 80065ea:	6033      	str	r3, [r6, #0]
 80065ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065f0:	4607      	mov	r7, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	b10a      	cbz	r2, 80065fa <_printf_common+0x26>
 80065f6:	3301      	adds	r3, #1
 80065f8:	6033      	str	r3, [r6, #0]
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	0699      	lsls	r1, r3, #26
 80065fe:	bf42      	ittt	mi
 8006600:	6833      	ldrmi	r3, [r6, #0]
 8006602:	3302      	addmi	r3, #2
 8006604:	6033      	strmi	r3, [r6, #0]
 8006606:	6825      	ldr	r5, [r4, #0]
 8006608:	f015 0506 	ands.w	r5, r5, #6
 800660c:	d106      	bne.n	800661c <_printf_common+0x48>
 800660e:	f104 0a19 	add.w	sl, r4, #25
 8006612:	68e3      	ldr	r3, [r4, #12]
 8006614:	6832      	ldr	r2, [r6, #0]
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	42ab      	cmp	r3, r5
 800661a:	dc26      	bgt.n	800666a <_printf_common+0x96>
 800661c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006620:	6822      	ldr	r2, [r4, #0]
 8006622:	3b00      	subs	r3, #0
 8006624:	bf18      	it	ne
 8006626:	2301      	movne	r3, #1
 8006628:	0692      	lsls	r2, r2, #26
 800662a:	d42b      	bmi.n	8006684 <_printf_common+0xb0>
 800662c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006630:	4641      	mov	r1, r8
 8006632:	4638      	mov	r0, r7
 8006634:	47c8      	blx	r9
 8006636:	3001      	adds	r0, #1
 8006638:	d01e      	beq.n	8006678 <_printf_common+0xa4>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	6922      	ldr	r2, [r4, #16]
 800663e:	f003 0306 	and.w	r3, r3, #6
 8006642:	2b04      	cmp	r3, #4
 8006644:	bf02      	ittt	eq
 8006646:	68e5      	ldreq	r5, [r4, #12]
 8006648:	6833      	ldreq	r3, [r6, #0]
 800664a:	1aed      	subeq	r5, r5, r3
 800664c:	68a3      	ldr	r3, [r4, #8]
 800664e:	bf0c      	ite	eq
 8006650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006654:	2500      	movne	r5, #0
 8006656:	4293      	cmp	r3, r2
 8006658:	bfc4      	itt	gt
 800665a:	1a9b      	subgt	r3, r3, r2
 800665c:	18ed      	addgt	r5, r5, r3
 800665e:	2600      	movs	r6, #0
 8006660:	341a      	adds	r4, #26
 8006662:	42b5      	cmp	r5, r6
 8006664:	d11a      	bne.n	800669c <_printf_common+0xc8>
 8006666:	2000      	movs	r0, #0
 8006668:	e008      	b.n	800667c <_printf_common+0xa8>
 800666a:	2301      	movs	r3, #1
 800666c:	4652      	mov	r2, sl
 800666e:	4641      	mov	r1, r8
 8006670:	4638      	mov	r0, r7
 8006672:	47c8      	blx	r9
 8006674:	3001      	adds	r0, #1
 8006676:	d103      	bne.n	8006680 <_printf_common+0xac>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006680:	3501      	adds	r5, #1
 8006682:	e7c6      	b.n	8006612 <_printf_common+0x3e>
 8006684:	18e1      	adds	r1, r4, r3
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	2030      	movs	r0, #48	@ 0x30
 800668a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800668e:	4422      	add	r2, r4
 8006690:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006694:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006698:	3302      	adds	r3, #2
 800669a:	e7c7      	b.n	800662c <_printf_common+0x58>
 800669c:	2301      	movs	r3, #1
 800669e:	4622      	mov	r2, r4
 80066a0:	4641      	mov	r1, r8
 80066a2:	4638      	mov	r0, r7
 80066a4:	47c8      	blx	r9
 80066a6:	3001      	adds	r0, #1
 80066a8:	d0e6      	beq.n	8006678 <_printf_common+0xa4>
 80066aa:	3601      	adds	r6, #1
 80066ac:	e7d9      	b.n	8006662 <_printf_common+0x8e>
	...

080066b0 <_printf_i>:
 80066b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b4:	7e0f      	ldrb	r7, [r1, #24]
 80066b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066b8:	2f78      	cmp	r7, #120	@ 0x78
 80066ba:	4691      	mov	r9, r2
 80066bc:	4680      	mov	r8, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	469a      	mov	sl, r3
 80066c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066c6:	d807      	bhi.n	80066d8 <_printf_i+0x28>
 80066c8:	2f62      	cmp	r7, #98	@ 0x62
 80066ca:	d80a      	bhi.n	80066e2 <_printf_i+0x32>
 80066cc:	2f00      	cmp	r7, #0
 80066ce:	f000 80d1 	beq.w	8006874 <_printf_i+0x1c4>
 80066d2:	2f58      	cmp	r7, #88	@ 0x58
 80066d4:	f000 80b8 	beq.w	8006848 <_printf_i+0x198>
 80066d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066e0:	e03a      	b.n	8006758 <_printf_i+0xa8>
 80066e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066e6:	2b15      	cmp	r3, #21
 80066e8:	d8f6      	bhi.n	80066d8 <_printf_i+0x28>
 80066ea:	a101      	add	r1, pc, #4	@ (adr r1, 80066f0 <_printf_i+0x40>)
 80066ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066f0:	08006749 	.word	0x08006749
 80066f4:	0800675d 	.word	0x0800675d
 80066f8:	080066d9 	.word	0x080066d9
 80066fc:	080066d9 	.word	0x080066d9
 8006700:	080066d9 	.word	0x080066d9
 8006704:	080066d9 	.word	0x080066d9
 8006708:	0800675d 	.word	0x0800675d
 800670c:	080066d9 	.word	0x080066d9
 8006710:	080066d9 	.word	0x080066d9
 8006714:	080066d9 	.word	0x080066d9
 8006718:	080066d9 	.word	0x080066d9
 800671c:	0800685b 	.word	0x0800685b
 8006720:	08006787 	.word	0x08006787
 8006724:	08006815 	.word	0x08006815
 8006728:	080066d9 	.word	0x080066d9
 800672c:	080066d9 	.word	0x080066d9
 8006730:	0800687d 	.word	0x0800687d
 8006734:	080066d9 	.word	0x080066d9
 8006738:	08006787 	.word	0x08006787
 800673c:	080066d9 	.word	0x080066d9
 8006740:	080066d9 	.word	0x080066d9
 8006744:	0800681d 	.word	0x0800681d
 8006748:	6833      	ldr	r3, [r6, #0]
 800674a:	1d1a      	adds	r2, r3, #4
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6032      	str	r2, [r6, #0]
 8006750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006754:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006758:	2301      	movs	r3, #1
 800675a:	e09c      	b.n	8006896 <_printf_i+0x1e6>
 800675c:	6833      	ldr	r3, [r6, #0]
 800675e:	6820      	ldr	r0, [r4, #0]
 8006760:	1d19      	adds	r1, r3, #4
 8006762:	6031      	str	r1, [r6, #0]
 8006764:	0606      	lsls	r6, r0, #24
 8006766:	d501      	bpl.n	800676c <_printf_i+0xbc>
 8006768:	681d      	ldr	r5, [r3, #0]
 800676a:	e003      	b.n	8006774 <_printf_i+0xc4>
 800676c:	0645      	lsls	r5, r0, #25
 800676e:	d5fb      	bpl.n	8006768 <_printf_i+0xb8>
 8006770:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006774:	2d00      	cmp	r5, #0
 8006776:	da03      	bge.n	8006780 <_printf_i+0xd0>
 8006778:	232d      	movs	r3, #45	@ 0x2d
 800677a:	426d      	negs	r5, r5
 800677c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006780:	4858      	ldr	r0, [pc, #352]	@ (80068e4 <_printf_i+0x234>)
 8006782:	230a      	movs	r3, #10
 8006784:	e011      	b.n	80067aa <_printf_i+0xfa>
 8006786:	6821      	ldr	r1, [r4, #0]
 8006788:	6833      	ldr	r3, [r6, #0]
 800678a:	0608      	lsls	r0, r1, #24
 800678c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006790:	d402      	bmi.n	8006798 <_printf_i+0xe8>
 8006792:	0649      	lsls	r1, r1, #25
 8006794:	bf48      	it	mi
 8006796:	b2ad      	uxthmi	r5, r5
 8006798:	2f6f      	cmp	r7, #111	@ 0x6f
 800679a:	4852      	ldr	r0, [pc, #328]	@ (80068e4 <_printf_i+0x234>)
 800679c:	6033      	str	r3, [r6, #0]
 800679e:	bf14      	ite	ne
 80067a0:	230a      	movne	r3, #10
 80067a2:	2308      	moveq	r3, #8
 80067a4:	2100      	movs	r1, #0
 80067a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067aa:	6866      	ldr	r6, [r4, #4]
 80067ac:	60a6      	str	r6, [r4, #8]
 80067ae:	2e00      	cmp	r6, #0
 80067b0:	db05      	blt.n	80067be <_printf_i+0x10e>
 80067b2:	6821      	ldr	r1, [r4, #0]
 80067b4:	432e      	orrs	r6, r5
 80067b6:	f021 0104 	bic.w	r1, r1, #4
 80067ba:	6021      	str	r1, [r4, #0]
 80067bc:	d04b      	beq.n	8006856 <_printf_i+0x1a6>
 80067be:	4616      	mov	r6, r2
 80067c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80067c4:	fb03 5711 	mls	r7, r3, r1, r5
 80067c8:	5dc7      	ldrb	r7, [r0, r7]
 80067ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067ce:	462f      	mov	r7, r5
 80067d0:	42bb      	cmp	r3, r7
 80067d2:	460d      	mov	r5, r1
 80067d4:	d9f4      	bls.n	80067c0 <_printf_i+0x110>
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d10b      	bne.n	80067f2 <_printf_i+0x142>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	07df      	lsls	r7, r3, #31
 80067de:	d508      	bpl.n	80067f2 <_printf_i+0x142>
 80067e0:	6923      	ldr	r3, [r4, #16]
 80067e2:	6861      	ldr	r1, [r4, #4]
 80067e4:	4299      	cmp	r1, r3
 80067e6:	bfde      	ittt	le
 80067e8:	2330      	movle	r3, #48	@ 0x30
 80067ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067f2:	1b92      	subs	r2, r2, r6
 80067f4:	6122      	str	r2, [r4, #16]
 80067f6:	f8cd a000 	str.w	sl, [sp]
 80067fa:	464b      	mov	r3, r9
 80067fc:	aa03      	add	r2, sp, #12
 80067fe:	4621      	mov	r1, r4
 8006800:	4640      	mov	r0, r8
 8006802:	f7ff fee7 	bl	80065d4 <_printf_common>
 8006806:	3001      	adds	r0, #1
 8006808:	d14a      	bne.n	80068a0 <_printf_i+0x1f0>
 800680a:	f04f 30ff 	mov.w	r0, #4294967295
 800680e:	b004      	add	sp, #16
 8006810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	f043 0320 	orr.w	r3, r3, #32
 800681a:	6023      	str	r3, [r4, #0]
 800681c:	4832      	ldr	r0, [pc, #200]	@ (80068e8 <_printf_i+0x238>)
 800681e:	2778      	movs	r7, #120	@ 0x78
 8006820:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	6831      	ldr	r1, [r6, #0]
 8006828:	061f      	lsls	r7, r3, #24
 800682a:	f851 5b04 	ldr.w	r5, [r1], #4
 800682e:	d402      	bmi.n	8006836 <_printf_i+0x186>
 8006830:	065f      	lsls	r7, r3, #25
 8006832:	bf48      	it	mi
 8006834:	b2ad      	uxthmi	r5, r5
 8006836:	6031      	str	r1, [r6, #0]
 8006838:	07d9      	lsls	r1, r3, #31
 800683a:	bf44      	itt	mi
 800683c:	f043 0320 	orrmi.w	r3, r3, #32
 8006840:	6023      	strmi	r3, [r4, #0]
 8006842:	b11d      	cbz	r5, 800684c <_printf_i+0x19c>
 8006844:	2310      	movs	r3, #16
 8006846:	e7ad      	b.n	80067a4 <_printf_i+0xf4>
 8006848:	4826      	ldr	r0, [pc, #152]	@ (80068e4 <_printf_i+0x234>)
 800684a:	e7e9      	b.n	8006820 <_printf_i+0x170>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	f023 0320 	bic.w	r3, r3, #32
 8006852:	6023      	str	r3, [r4, #0]
 8006854:	e7f6      	b.n	8006844 <_printf_i+0x194>
 8006856:	4616      	mov	r6, r2
 8006858:	e7bd      	b.n	80067d6 <_printf_i+0x126>
 800685a:	6833      	ldr	r3, [r6, #0]
 800685c:	6825      	ldr	r5, [r4, #0]
 800685e:	6961      	ldr	r1, [r4, #20]
 8006860:	1d18      	adds	r0, r3, #4
 8006862:	6030      	str	r0, [r6, #0]
 8006864:	062e      	lsls	r6, r5, #24
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	d501      	bpl.n	800686e <_printf_i+0x1be>
 800686a:	6019      	str	r1, [r3, #0]
 800686c:	e002      	b.n	8006874 <_printf_i+0x1c4>
 800686e:	0668      	lsls	r0, r5, #25
 8006870:	d5fb      	bpl.n	800686a <_printf_i+0x1ba>
 8006872:	8019      	strh	r1, [r3, #0]
 8006874:	2300      	movs	r3, #0
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	4616      	mov	r6, r2
 800687a:	e7bc      	b.n	80067f6 <_printf_i+0x146>
 800687c:	6833      	ldr	r3, [r6, #0]
 800687e:	1d1a      	adds	r2, r3, #4
 8006880:	6032      	str	r2, [r6, #0]
 8006882:	681e      	ldr	r6, [r3, #0]
 8006884:	6862      	ldr	r2, [r4, #4]
 8006886:	2100      	movs	r1, #0
 8006888:	4630      	mov	r0, r6
 800688a:	f7f9 fcc1 	bl	8000210 <memchr>
 800688e:	b108      	cbz	r0, 8006894 <_printf_i+0x1e4>
 8006890:	1b80      	subs	r0, r0, r6
 8006892:	6060      	str	r0, [r4, #4]
 8006894:	6863      	ldr	r3, [r4, #4]
 8006896:	6123      	str	r3, [r4, #16]
 8006898:	2300      	movs	r3, #0
 800689a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800689e:	e7aa      	b.n	80067f6 <_printf_i+0x146>
 80068a0:	6923      	ldr	r3, [r4, #16]
 80068a2:	4632      	mov	r2, r6
 80068a4:	4649      	mov	r1, r9
 80068a6:	4640      	mov	r0, r8
 80068a8:	47d0      	blx	sl
 80068aa:	3001      	adds	r0, #1
 80068ac:	d0ad      	beq.n	800680a <_printf_i+0x15a>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	079b      	lsls	r3, r3, #30
 80068b2:	d413      	bmi.n	80068dc <_printf_i+0x22c>
 80068b4:	68e0      	ldr	r0, [r4, #12]
 80068b6:	9b03      	ldr	r3, [sp, #12]
 80068b8:	4298      	cmp	r0, r3
 80068ba:	bfb8      	it	lt
 80068bc:	4618      	movlt	r0, r3
 80068be:	e7a6      	b.n	800680e <_printf_i+0x15e>
 80068c0:	2301      	movs	r3, #1
 80068c2:	4632      	mov	r2, r6
 80068c4:	4649      	mov	r1, r9
 80068c6:	4640      	mov	r0, r8
 80068c8:	47d0      	blx	sl
 80068ca:	3001      	adds	r0, #1
 80068cc:	d09d      	beq.n	800680a <_printf_i+0x15a>
 80068ce:	3501      	adds	r5, #1
 80068d0:	68e3      	ldr	r3, [r4, #12]
 80068d2:	9903      	ldr	r1, [sp, #12]
 80068d4:	1a5b      	subs	r3, r3, r1
 80068d6:	42ab      	cmp	r3, r5
 80068d8:	dcf2      	bgt.n	80068c0 <_printf_i+0x210>
 80068da:	e7eb      	b.n	80068b4 <_printf_i+0x204>
 80068dc:	2500      	movs	r5, #0
 80068de:	f104 0619 	add.w	r6, r4, #25
 80068e2:	e7f5      	b.n	80068d0 <_printf_i+0x220>
 80068e4:	0800703e 	.word	0x0800703e
 80068e8:	0800704f 	.word	0x0800704f

080068ec <__sflush_r>:
 80068ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f4:	0716      	lsls	r6, r2, #28
 80068f6:	4605      	mov	r5, r0
 80068f8:	460c      	mov	r4, r1
 80068fa:	d454      	bmi.n	80069a6 <__sflush_r+0xba>
 80068fc:	684b      	ldr	r3, [r1, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	dc02      	bgt.n	8006908 <__sflush_r+0x1c>
 8006902:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006904:	2b00      	cmp	r3, #0
 8006906:	dd48      	ble.n	800699a <__sflush_r+0xae>
 8006908:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800690a:	2e00      	cmp	r6, #0
 800690c:	d045      	beq.n	800699a <__sflush_r+0xae>
 800690e:	2300      	movs	r3, #0
 8006910:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006914:	682f      	ldr	r7, [r5, #0]
 8006916:	6a21      	ldr	r1, [r4, #32]
 8006918:	602b      	str	r3, [r5, #0]
 800691a:	d030      	beq.n	800697e <__sflush_r+0x92>
 800691c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	0759      	lsls	r1, r3, #29
 8006922:	d505      	bpl.n	8006930 <__sflush_r+0x44>
 8006924:	6863      	ldr	r3, [r4, #4]
 8006926:	1ad2      	subs	r2, r2, r3
 8006928:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800692a:	b10b      	cbz	r3, 8006930 <__sflush_r+0x44>
 800692c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800692e:	1ad2      	subs	r2, r2, r3
 8006930:	2300      	movs	r3, #0
 8006932:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006934:	6a21      	ldr	r1, [r4, #32]
 8006936:	4628      	mov	r0, r5
 8006938:	47b0      	blx	r6
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	d106      	bne.n	800694e <__sflush_r+0x62>
 8006940:	6829      	ldr	r1, [r5, #0]
 8006942:	291d      	cmp	r1, #29
 8006944:	d82b      	bhi.n	800699e <__sflush_r+0xb2>
 8006946:	4a2a      	ldr	r2, [pc, #168]	@ (80069f0 <__sflush_r+0x104>)
 8006948:	40ca      	lsrs	r2, r1
 800694a:	07d6      	lsls	r6, r2, #31
 800694c:	d527      	bpl.n	800699e <__sflush_r+0xb2>
 800694e:	2200      	movs	r2, #0
 8006950:	6062      	str	r2, [r4, #4]
 8006952:	04d9      	lsls	r1, r3, #19
 8006954:	6922      	ldr	r2, [r4, #16]
 8006956:	6022      	str	r2, [r4, #0]
 8006958:	d504      	bpl.n	8006964 <__sflush_r+0x78>
 800695a:	1c42      	adds	r2, r0, #1
 800695c:	d101      	bne.n	8006962 <__sflush_r+0x76>
 800695e:	682b      	ldr	r3, [r5, #0]
 8006960:	b903      	cbnz	r3, 8006964 <__sflush_r+0x78>
 8006962:	6560      	str	r0, [r4, #84]	@ 0x54
 8006964:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006966:	602f      	str	r7, [r5, #0]
 8006968:	b1b9      	cbz	r1, 800699a <__sflush_r+0xae>
 800696a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800696e:	4299      	cmp	r1, r3
 8006970:	d002      	beq.n	8006978 <__sflush_r+0x8c>
 8006972:	4628      	mov	r0, r5
 8006974:	f7ff fa9c 	bl	8005eb0 <_free_r>
 8006978:	2300      	movs	r3, #0
 800697a:	6363      	str	r3, [r4, #52]	@ 0x34
 800697c:	e00d      	b.n	800699a <__sflush_r+0xae>
 800697e:	2301      	movs	r3, #1
 8006980:	4628      	mov	r0, r5
 8006982:	47b0      	blx	r6
 8006984:	4602      	mov	r2, r0
 8006986:	1c50      	adds	r0, r2, #1
 8006988:	d1c9      	bne.n	800691e <__sflush_r+0x32>
 800698a:	682b      	ldr	r3, [r5, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0c6      	beq.n	800691e <__sflush_r+0x32>
 8006990:	2b1d      	cmp	r3, #29
 8006992:	d001      	beq.n	8006998 <__sflush_r+0xac>
 8006994:	2b16      	cmp	r3, #22
 8006996:	d11e      	bne.n	80069d6 <__sflush_r+0xea>
 8006998:	602f      	str	r7, [r5, #0]
 800699a:	2000      	movs	r0, #0
 800699c:	e022      	b.n	80069e4 <__sflush_r+0xf8>
 800699e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069a2:	b21b      	sxth	r3, r3
 80069a4:	e01b      	b.n	80069de <__sflush_r+0xf2>
 80069a6:	690f      	ldr	r7, [r1, #16]
 80069a8:	2f00      	cmp	r7, #0
 80069aa:	d0f6      	beq.n	800699a <__sflush_r+0xae>
 80069ac:	0793      	lsls	r3, r2, #30
 80069ae:	680e      	ldr	r6, [r1, #0]
 80069b0:	bf08      	it	eq
 80069b2:	694b      	ldreq	r3, [r1, #20]
 80069b4:	600f      	str	r7, [r1, #0]
 80069b6:	bf18      	it	ne
 80069b8:	2300      	movne	r3, #0
 80069ba:	eba6 0807 	sub.w	r8, r6, r7
 80069be:	608b      	str	r3, [r1, #8]
 80069c0:	f1b8 0f00 	cmp.w	r8, #0
 80069c4:	dde9      	ble.n	800699a <__sflush_r+0xae>
 80069c6:	6a21      	ldr	r1, [r4, #32]
 80069c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80069ca:	4643      	mov	r3, r8
 80069cc:	463a      	mov	r2, r7
 80069ce:	4628      	mov	r0, r5
 80069d0:	47b0      	blx	r6
 80069d2:	2800      	cmp	r0, #0
 80069d4:	dc08      	bgt.n	80069e8 <__sflush_r+0xfc>
 80069d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e8:	4407      	add	r7, r0
 80069ea:	eba8 0800 	sub.w	r8, r8, r0
 80069ee:	e7e7      	b.n	80069c0 <__sflush_r+0xd4>
 80069f0:	20400001 	.word	0x20400001

080069f4 <_fflush_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	690b      	ldr	r3, [r1, #16]
 80069f8:	4605      	mov	r5, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	b913      	cbnz	r3, 8006a04 <_fflush_r+0x10>
 80069fe:	2500      	movs	r5, #0
 8006a00:	4628      	mov	r0, r5
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	b118      	cbz	r0, 8006a0e <_fflush_r+0x1a>
 8006a06:	6a03      	ldr	r3, [r0, #32]
 8006a08:	b90b      	cbnz	r3, 8006a0e <_fflush_r+0x1a>
 8006a0a:	f7fe ffb5 	bl	8005978 <__sinit>
 8006a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f3      	beq.n	80069fe <_fflush_r+0xa>
 8006a16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a18:	07d0      	lsls	r0, r2, #31
 8006a1a:	d404      	bmi.n	8006a26 <_fflush_r+0x32>
 8006a1c:	0599      	lsls	r1, r3, #22
 8006a1e:	d402      	bmi.n	8006a26 <_fflush_r+0x32>
 8006a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a22:	f7ff fa34 	bl	8005e8e <__retarget_lock_acquire_recursive>
 8006a26:	4628      	mov	r0, r5
 8006a28:	4621      	mov	r1, r4
 8006a2a:	f7ff ff5f 	bl	80068ec <__sflush_r>
 8006a2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a30:	07da      	lsls	r2, r3, #31
 8006a32:	4605      	mov	r5, r0
 8006a34:	d4e4      	bmi.n	8006a00 <_fflush_r+0xc>
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	059b      	lsls	r3, r3, #22
 8006a3a:	d4e1      	bmi.n	8006a00 <_fflush_r+0xc>
 8006a3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a3e:	f7ff fa27 	bl	8005e90 <__retarget_lock_release_recursive>
 8006a42:	e7dd      	b.n	8006a00 <_fflush_r+0xc>

08006a44 <__swhatbuf_r>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	460c      	mov	r4, r1
 8006a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a4c:	2900      	cmp	r1, #0
 8006a4e:	b096      	sub	sp, #88	@ 0x58
 8006a50:	4615      	mov	r5, r2
 8006a52:	461e      	mov	r6, r3
 8006a54:	da0d      	bge.n	8006a72 <__swhatbuf_r+0x2e>
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a5c:	f04f 0100 	mov.w	r1, #0
 8006a60:	bf14      	ite	ne
 8006a62:	2340      	movne	r3, #64	@ 0x40
 8006a64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a68:	2000      	movs	r0, #0
 8006a6a:	6031      	str	r1, [r6, #0]
 8006a6c:	602b      	str	r3, [r5, #0]
 8006a6e:	b016      	add	sp, #88	@ 0x58
 8006a70:	bd70      	pop	{r4, r5, r6, pc}
 8006a72:	466a      	mov	r2, sp
 8006a74:	f000 f862 	bl	8006b3c <_fstat_r>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	dbec      	blt.n	8006a56 <__swhatbuf_r+0x12>
 8006a7c:	9901      	ldr	r1, [sp, #4]
 8006a7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a86:	4259      	negs	r1, r3
 8006a88:	4159      	adcs	r1, r3
 8006a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a8e:	e7eb      	b.n	8006a68 <__swhatbuf_r+0x24>

08006a90 <__smakebuf_r>:
 8006a90:	898b      	ldrh	r3, [r1, #12]
 8006a92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a94:	079d      	lsls	r5, r3, #30
 8006a96:	4606      	mov	r6, r0
 8006a98:	460c      	mov	r4, r1
 8006a9a:	d507      	bpl.n	8006aac <__smakebuf_r+0x1c>
 8006a9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	6123      	str	r3, [r4, #16]
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	6163      	str	r3, [r4, #20]
 8006aa8:	b003      	add	sp, #12
 8006aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aac:	ab01      	add	r3, sp, #4
 8006aae:	466a      	mov	r2, sp
 8006ab0:	f7ff ffc8 	bl	8006a44 <__swhatbuf_r>
 8006ab4:	9f00      	ldr	r7, [sp, #0]
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	4639      	mov	r1, r7
 8006aba:	4630      	mov	r0, r6
 8006abc:	f7ff fa64 	bl	8005f88 <_malloc_r>
 8006ac0:	b948      	cbnz	r0, 8006ad6 <__smakebuf_r+0x46>
 8006ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac6:	059a      	lsls	r2, r3, #22
 8006ac8:	d4ee      	bmi.n	8006aa8 <__smakebuf_r+0x18>
 8006aca:	f023 0303 	bic.w	r3, r3, #3
 8006ace:	f043 0302 	orr.w	r3, r3, #2
 8006ad2:	81a3      	strh	r3, [r4, #12]
 8006ad4:	e7e2      	b.n	8006a9c <__smakebuf_r+0xc>
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	6020      	str	r0, [r4, #0]
 8006ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ade:	81a3      	strh	r3, [r4, #12]
 8006ae0:	9b01      	ldr	r3, [sp, #4]
 8006ae2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ae6:	b15b      	cbz	r3, 8006b00 <__smakebuf_r+0x70>
 8006ae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aec:	4630      	mov	r0, r6
 8006aee:	f000 f837 	bl	8006b60 <_isatty_r>
 8006af2:	b128      	cbz	r0, 8006b00 <__smakebuf_r+0x70>
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	f023 0303 	bic.w	r3, r3, #3
 8006afa:	f043 0301 	orr.w	r3, r3, #1
 8006afe:	81a3      	strh	r3, [r4, #12]
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	431d      	orrs	r5, r3
 8006b04:	81a5      	strh	r5, [r4, #12]
 8006b06:	e7cf      	b.n	8006aa8 <__smakebuf_r+0x18>

08006b08 <memmove>:
 8006b08:	4288      	cmp	r0, r1
 8006b0a:	b510      	push	{r4, lr}
 8006b0c:	eb01 0402 	add.w	r4, r1, r2
 8006b10:	d902      	bls.n	8006b18 <memmove+0x10>
 8006b12:	4284      	cmp	r4, r0
 8006b14:	4623      	mov	r3, r4
 8006b16:	d807      	bhi.n	8006b28 <memmove+0x20>
 8006b18:	1e43      	subs	r3, r0, #1
 8006b1a:	42a1      	cmp	r1, r4
 8006b1c:	d008      	beq.n	8006b30 <memmove+0x28>
 8006b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b26:	e7f8      	b.n	8006b1a <memmove+0x12>
 8006b28:	4402      	add	r2, r0
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	428a      	cmp	r2, r1
 8006b2e:	d100      	bne.n	8006b32 <memmove+0x2a>
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b3a:	e7f7      	b.n	8006b2c <memmove+0x24>

08006b3c <_fstat_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4d07      	ldr	r5, [pc, #28]	@ (8006b5c <_fstat_r+0x20>)
 8006b40:	2300      	movs	r3, #0
 8006b42:	4604      	mov	r4, r0
 8006b44:	4608      	mov	r0, r1
 8006b46:	4611      	mov	r1, r2
 8006b48:	602b      	str	r3, [r5, #0]
 8006b4a:	f7fa fa1c 	bl	8000f86 <_fstat>
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	d102      	bne.n	8006b58 <_fstat_r+0x1c>
 8006b52:	682b      	ldr	r3, [r5, #0]
 8006b54:	b103      	cbz	r3, 8006b58 <_fstat_r+0x1c>
 8006b56:	6023      	str	r3, [r4, #0]
 8006b58:	bd38      	pop	{r3, r4, r5, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20004664 	.word	0x20004664

08006b60 <_isatty_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4d06      	ldr	r5, [pc, #24]	@ (8006b7c <_isatty_r+0x1c>)
 8006b64:	2300      	movs	r3, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	4608      	mov	r0, r1
 8006b6a:	602b      	str	r3, [r5, #0]
 8006b6c:	f7fa fa1b 	bl	8000fa6 <_isatty>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d102      	bne.n	8006b7a <_isatty_r+0x1a>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b103      	cbz	r3, 8006b7a <_isatty_r+0x1a>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	20004664 	.word	0x20004664

08006b80 <_sbrk_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4d06      	ldr	r5, [pc, #24]	@ (8006b9c <_sbrk_r+0x1c>)
 8006b84:	2300      	movs	r3, #0
 8006b86:	4604      	mov	r4, r0
 8006b88:	4608      	mov	r0, r1
 8006b8a:	602b      	str	r3, [r5, #0]
 8006b8c:	f7fa fa24 	bl	8000fd8 <_sbrk>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_sbrk_r+0x1a>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_sbrk_r+0x1a>
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	20004664 	.word	0x20004664

08006ba0 <_realloc_r>:
 8006ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba4:	4607      	mov	r7, r0
 8006ba6:	4614      	mov	r4, r2
 8006ba8:	460d      	mov	r5, r1
 8006baa:	b921      	cbnz	r1, 8006bb6 <_realloc_r+0x16>
 8006bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	f7ff b9e9 	b.w	8005f88 <_malloc_r>
 8006bb6:	b92a      	cbnz	r2, 8006bc4 <_realloc_r+0x24>
 8006bb8:	f7ff f97a 	bl	8005eb0 <_free_r>
 8006bbc:	4625      	mov	r5, r4
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc4:	f000 f81a 	bl	8006bfc <_malloc_usable_size_r>
 8006bc8:	4284      	cmp	r4, r0
 8006bca:	4606      	mov	r6, r0
 8006bcc:	d802      	bhi.n	8006bd4 <_realloc_r+0x34>
 8006bce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006bd2:	d8f4      	bhi.n	8006bbe <_realloc_r+0x1e>
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	f7ff f9d6 	bl	8005f88 <_malloc_r>
 8006bdc:	4680      	mov	r8, r0
 8006bde:	b908      	cbnz	r0, 8006be4 <_realloc_r+0x44>
 8006be0:	4645      	mov	r5, r8
 8006be2:	e7ec      	b.n	8006bbe <_realloc_r+0x1e>
 8006be4:	42b4      	cmp	r4, r6
 8006be6:	4622      	mov	r2, r4
 8006be8:	4629      	mov	r1, r5
 8006bea:	bf28      	it	cs
 8006bec:	4632      	movcs	r2, r6
 8006bee:	f7ff f950 	bl	8005e92 <memcpy>
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	f7ff f95b 	bl	8005eb0 <_free_r>
 8006bfa:	e7f1      	b.n	8006be0 <_realloc_r+0x40>

08006bfc <_malloc_usable_size_r>:
 8006bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c00:	1f18      	subs	r0, r3, #4
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	bfbc      	itt	lt
 8006c06:	580b      	ldrlt	r3, [r1, r0]
 8006c08:	18c0      	addlt	r0, r0, r3
 8006c0a:	4770      	bx	lr

08006c0c <_init>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	bf00      	nop
 8006c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c12:	bc08      	pop	{r3}
 8006c14:	469e      	mov	lr, r3
 8006c16:	4770      	bx	lr

08006c18 <_fini>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	bf00      	nop
 8006c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1e:	bc08      	pop	{r3}
 8006c20:	469e      	mov	lr, r3
 8006c22:	4770      	bx	lr
