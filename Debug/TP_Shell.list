
TP_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b24  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08006cf4  08006cf4  00007cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071b0  080071b0  00009078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080071b0  080071b0  000081b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071b8  080071b8  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071b8  080071b8  000081b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071bc  080071bc  000081bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080071c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008204  20000078  08007238  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000827c  08007238  0000927c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ef7  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003562  00000000  00000000  0001cf9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00020508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b64  00000000  00000000  00021408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028606  00000000  00000000  00021f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b36  00000000  00000000  0004a572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1083  00000000  00000000  0005e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f12b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004538  00000000  00000000  0014f170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001536a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006cdc 	.word	0x08006cdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006cdc 	.word	0x08006cdc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000098 	.word	0x20000098
 800060c:	20000138 	.word	0x20000138

08000610 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_FREERTOS_Init+0x30>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fc00 	bl	8003e32 <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a03      	ldr	r2, [pc, #12]	@ (8000644 <MX_FREERTOS_Init+0x34>)
 8000636:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	08006d00 	.word	0x08006d00
 8000644:	20000094 	.word	0x20000094

08000648 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f003 fc3a 	bl	8003eca <osDelay>
 8000656:	e7fb      	b.n	8000650 <StartDefaultTask+0x8>

08000658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	@ 0x28
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b2a      	ldr	r3, [pc, #168]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a29      	ldr	r2, [pc, #164]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <MX_GPIO_Init+0xc0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a23      	ldr	r2, [pc, #140]	@ (8000718 <MX_GPIO_Init+0xc0>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800069e:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2102      	movs	r1, #2
 80006d2:	4812      	ldr	r0, [pc, #72]	@ (800071c <MX_GPIO_Init+0xc4>)
 80006d4:	f001 f9aa 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006d8:	2302      	movs	r3, #2
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	480b      	ldr	r0, [pc, #44]	@ (800071c <MX_GPIO_Init+0xc4>)
 80006f0:	f000 fff0 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80006f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_GPIO_Init+0xc4>)
 800070a:	f000 ffe3 	bl	80016d4 <HAL_GPIO_Init>

}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	@ 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40022000 	.word	0x40022000

08000720 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000728:	1d39      	adds	r1, r7, #4
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	2201      	movs	r2, #1
 8000730:	4803      	ldr	r0, [pc, #12]	@ (8000740 <__io_putchar+0x20>)
 8000732:	f002 faad 	bl	8002c90 <HAL_UART_Transmit>

	return ch;
 8000736:	687b      	ldr	r3, [r7, #4]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000758 	.word	0x20000758

08000744 <sh_led>:


uint32_t led_delay_ms = 100;

int sh_led(h_shell_t *h_shell, int argc, char **argv)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
	static int bool = 1;
	int value = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

	if (argc == 2)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	2b02      	cmp	r3, #2
 8000758:	d110      	bne.n	800077c <sh_led+0x38>
	{
		value = atoi(argv[1]);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	3304      	adds	r3, #4
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f005 f84d 	bl	8005800 <atoi>
 8000766:	6178      	str	r0, [r7, #20]
		if (value >= 30)
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	2b1d      	cmp	r3, #29
 800076c:	dd06      	ble.n	800077c <sh_led+0x38>
		{
			led_delay_ms = value;
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	4a15      	ldr	r2, [pc, #84]	@ (80007c8 <sh_led+0x84>)
 8000772:	6013      	str	r3, [r2, #0]
			printf("Value of Led Task %d\r\n", value);
 8000774:	6979      	ldr	r1, [r7, #20]
 8000776:	4815      	ldr	r0, [pc, #84]	@ (80007cc <sh_led+0x88>)
 8000778:	f005 fa4a 	bl	8005c10 <iprintf>
		}
	}
	if (bool == 0 || (argc == 2 && value != 0))
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <sh_led+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <sh_led+0x4c>
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d10b      	bne.n	80007a2 <sh_led+0x5e>
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d008      	beq.n	80007a2 <sh_led+0x5e>
	{
		vTaskResume(LedTaskHandle);
 8000790:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <sh_led+0x90>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f003 ffe9 	bl	800476c <vTaskResume>
		bool = 1;
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <sh_led+0x8c>)
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	e00c      	b.n	80007bc <sh_led+0x78>
	}
	else
	{
		vTaskSuspend(LedTaskHandle);
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <sh_led+0x90>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 ff16 	bl	80045d8 <vTaskSuspend>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2102      	movs	r1, #2
 80007b0:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <sh_led+0x94>)
 80007b2:	f001 f93b 	bl	8001a2c <HAL_GPIO_WritePin>
		bool = 0;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <sh_led+0x8c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
	}
	return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000000 	.word	0x20000000
 80007cc:	08006d1c 	.word	0x08006d1c
 80007d0:	20000004 	.word	0x20000004
 80007d4:	20000744 	.word	0x20000744
 80007d8:	40022000 	.word	0x40022000

080007dc <StartLedTask>:

void StartLedTask(void *argument) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	uint8_t ledState = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
	printf("Entering LedTask\n");
 80007e8:	4811      	ldr	r0, [pc, #68]	@ (8000830 <StartLedTask+0x54>)
 80007ea:	f005 fa79 	bl	8005ce0 <puts>
	for (;;) {
		ledState = !ledState;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf14      	ite	ne
 8000802:	2301      	movne	r3, #1
 8000804:	2300      	moveq	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	2102      	movs	r1, #2
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <StartLedTask+0x58>)
 800080e:	f001 f90d 	bl	8001a2c <HAL_GPIO_WritePin>
		//printf("LED : %s\r\n", ledState ? "ON" : "OFF");
		vTaskDelay(pdMS_TO_TICKS(led_delay_ms));
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <StartLedTask+0x5c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800081a:	fb02 f303 	mul.w	r3, r2, r3
 800081e:	4a07      	ldr	r2, [pc, #28]	@ (800083c <StartLedTask+0x60>)
 8000820:	fba2 2303 	umull	r2, r3, r2, r3
 8000824:	099b      	lsrs	r3, r3, #6
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fe9e 	bl	8004568 <vTaskDelay>
		ledState = !ledState;
 800082c:	bf00      	nop
 800082e:	e7de      	b.n	80007ee <StartLedTask+0x12>
 8000830:	08006d34 	.word	0x08006d34
 8000834:	40022000 	.word	0x40022000
 8000838:	20000000 	.word	0x20000000
 800083c:	10624dd3 	.word	0x10624dd3

08000840 <ShellTask>:
		}
	}
}

void ShellTask(void *argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		shell_run(&h_shell); // Appelle ta fonction qui lit rx_buffer et traite les commandes
 8000848:	4803      	ldr	r0, [pc, #12]	@ (8000858 <ShellTask+0x18>)
 800084a:	f000 fa99 	bl	8000d80 <shell_run>
		vTaskDelay(pdMS_TO_TICKS(10)); // Petit délai pour éviter de saturer la CPU
 800084e:	200a      	movs	r0, #10
 8000850:	f003 fe8a 	bl	8004568 <vTaskDelay>
		shell_run(&h_shell); // Appelle ta fonction qui lit rx_buffer et traite les commandes
 8000854:	bf00      	nop
 8000856:	e7f7      	b.n	8000848 <ShellTask+0x8>
 8000858:	20000338 	.word	0x20000338

0800085c <ErrorTask>:
	}
}

void ErrorTask(void *arg)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	static int size = 10;
	int *buffer = NULL;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]

    for(;;) {
    	printf("ErrorTask Malloc buffer size %d 0x%X\r\n", size, size);
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <ErrorTask+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a14      	ldr	r2, [pc, #80]	@ (80008c0 <ErrorTask+0x64>)
 800086e:	6812      	ldr	r2, [r2, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	4814      	ldr	r0, [pc, #80]	@ (80008c4 <ErrorTask+0x68>)
 8000874:	f005 f9cc 	bl	8005c10 <iprintf>
    	buffer = (int *)malloc(sizeof(int) * size);
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <ErrorTask+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4618      	mov	r0, r3
 8000880:	f004 ffc2 	bl	8005808 <malloc>
 8000884:	4603      	mov	r3, r0
 8000886:	60fb      	str	r3, [r7, #12]
    	if (buffer == NULL)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d108      	bne.n	80008a0 <ErrorTask+0x44>
    		printf("ErroTask: Malloc erreur %d 0x%X\t\n", size, size);
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <ErrorTask+0x64>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a0b      	ldr	r2, [pc, #44]	@ (80008c0 <ErrorTask+0x64>)
 8000894:	6812      	ldr	r2, [r2, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <ErrorTask+0x6c>)
 800089a:	f005 f9b9 	bl	8005c10 <iprintf>
 800089e:	e009      	b.n	80008b4 <ErrorTask+0x58>
    	else
    	{
    		size *= 2;
 80008a0:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <ErrorTask+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	4a06      	ldr	r2, [pc, #24]	@ (80008c0 <ErrorTask+0x64>)
 80008a8:	6013      	str	r3, [r2, #0]
    		free(buffer);
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f004 ffb4 	bl	8005818 <free>
    		buffer = NULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
    	}
        vTaskDelay(pdMS_TO_TICKS(1000));
 80008b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b8:	f003 fe56 	bl	8004568 <vTaskDelay>
    	printf("ErrorTask Malloc buffer size %d 0x%X\r\n", size, size);
 80008bc:	e7d4      	b.n	8000868 <ErrorTask+0xc>
 80008be:	bf00      	nop
 80008c0:	20000008 	.word	0x20000008
 80008c4:	08006e60 	.word	0x08006e60
 80008c8:	08006e88 	.word	0x08006e88

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f000 fcfe 	bl	80012d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d6:	f000 f873 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008da:	f7ff febd 	bl	8000658 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008de:	f000 fc15 	bl	800110c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	shell_init(&h_shell);
 80008e2:	4828      	ldr	r0, [pc, #160]	@ (8000984 <main+0xb8>)
 80008e4:	f000 f93e 	bl	8000b64 <shell_init>
	QueueTask = xQueueCreate(10, sizeof(uint32_t)); // Create the queue
 80008e8:	2200      	movs	r2, #0
 80008ea:	2104      	movs	r1, #4
 80008ec:	200a      	movs	r0, #10
 80008ee:	f003 fc21 	bl	8004134 <xQueueGenericCreate>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a24      	ldr	r2, [pc, #144]	@ (8000988 <main+0xbc>)
 80008f6:	6013      	str	r3, [r2, #0]
	if (QueueTask == NULL) {
 80008f8:	4b23      	ldr	r3, [pc, #140]	@ (8000988 <main+0xbc>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d104      	bne.n	800090a <main+0x3e>
		printf("Failed to create queue\r\n");
 8000900:	4822      	ldr	r0, [pc, #136]	@ (800098c <main+0xc0>)
 8000902:	f005 f9ed 	bl	8005ce0 <puts>
		Error_Handler();
 8000906:	f000 f8c7 	bl	8000a98 <Error_Handler>
	}
	//xTaskCreate(TaskGive, "TaskGive", 128, NULL, tskIDLE_PRIORITY + 5, &TaskGiveHandle);
	//xTaskCreate(TaskTake, "TaskTake", 128, NULL, tskIDLE_PRIORITY + 5, &TaskTakeHandle);
	if (xTaskCreate(StartLedTask, "LedTask", 128, NULL, tskIDLE_PRIORITY + 5, &LedTaskHandle) != pdPASS ) {
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <main+0xc4>)
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	2305      	movs	r3, #5
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2300      	movs	r3, #0
 8000914:	2280      	movs	r2, #128	@ 0x80
 8000916:	491f      	ldr	r1, [pc, #124]	@ (8000994 <main+0xc8>)
 8000918:	481f      	ldr	r0, [pc, #124]	@ (8000998 <main+0xcc>)
 800091a:	f003 fcd3 	bl	80042c4 <xTaskCreate>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	d004      	beq.n	800092e <main+0x62>
		printf("Failed to create xTaskCreate LedTask\r\n");
 8000924:	481d      	ldr	r0, [pc, #116]	@ (800099c <main+0xd0>)
 8000926:	f005 f9db 	bl	8005ce0 <puts>
		Error_Handler();
 800092a:	f000 f8b5 	bl	8000a98 <Error_Handler>
	}
	if (xTaskCreate(ShellTask, "ShellTask", 128, NULL, tskIDLE_PRIORITY + 5, &ShellTaskHandle) != pdPASS ) {
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <main+0xd4>)
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	2305      	movs	r3, #5
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2300      	movs	r3, #0
 8000938:	2280      	movs	r2, #128	@ 0x80
 800093a:	491a      	ldr	r1, [pc, #104]	@ (80009a4 <main+0xd8>)
 800093c:	481a      	ldr	r0, [pc, #104]	@ (80009a8 <main+0xdc>)
 800093e:	f003 fcc1 	bl	80042c4 <xTaskCreate>
 8000942:	4603      	mov	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	d004      	beq.n	8000952 <main+0x86>
		printf("Failed to create xTaskCreate ShellTask\r\n");
 8000948:	4818      	ldr	r0, [pc, #96]	@ (80009ac <main+0xe0>)
 800094a:	f005 f9c9 	bl	8005ce0 <puts>
		Error_Handler();
 800094e:	f000 f8a3 	bl	8000a98 <Error_Handler>
	}
	if (xTaskCreate(ErrorTask, "ErrorTask", 128, NULL, tskIDLE_PRIORITY + 5, &ErrorTaskHandle) != pdPASS ) {
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <main+0xe4>)
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	2305      	movs	r3, #5
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2300      	movs	r3, #0
 800095c:	2280      	movs	r2, #128	@ 0x80
 800095e:	4915      	ldr	r1, [pc, #84]	@ (80009b4 <main+0xe8>)
 8000960:	4815      	ldr	r0, [pc, #84]	@ (80009b8 <main+0xec>)
 8000962:	f003 fcaf 	bl	80042c4 <xTaskCreate>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	d004      	beq.n	8000976 <main+0xaa>
		printf("Failed to create xTaskCreate ErrorTask\r\n");
 800096c:	4813      	ldr	r0, [pc, #76]	@ (80009bc <main+0xf0>)
 800096e:	f005 f9b7 	bl	8005ce0 <puts>
		Error_Handler();
 8000972:	f000 f891 	bl	8000a98 <Error_Handler>
	}
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000976:	f7ff fe4b 	bl	8000610 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800097a:	f003 fa53 	bl	8003e24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800097e:	bf00      	nop
 8000980:	e7fd      	b.n	800097e <main+0xb2>
 8000982:	bf00      	nop
 8000984:	20000338 	.word	0x20000338
 8000988:	20000750 	.word	0x20000750
 800098c:	08006eac 	.word	0x08006eac
 8000990:	20000744 	.word	0x20000744
 8000994:	08006ec4 	.word	0x08006ec4
 8000998:	080007dd 	.word	0x080007dd
 800099c:	08006ecc 	.word	0x08006ecc
 80009a0:	20000748 	.word	0x20000748
 80009a4:	08006ef4 	.word	0x08006ef4
 80009a8:	08000841 	.word	0x08000841
 80009ac:	08006f00 	.word	0x08006f00
 80009b0:	2000074c 	.word	0x2000074c
 80009b4:	08006f28 	.word	0x08006f28
 80009b8:	0800085d 	.word	0x0800085d
 80009bc:	08006f34 	.word	0x08006f34

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	@ 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	@ 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f005 fa9c 	bl	8005f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a90 <SystemClock_Config+0xd0>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	4a29      	ldr	r2, [pc, #164]	@ (8000a90 <SystemClock_Config+0xd0>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f0:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <SystemClock_Config+0xd0>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009fc:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <SystemClock_Config+0xd4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a24      	ldr	r2, [pc, #144]	@ (8000a94 <SystemClock_Config+0xd4>)
 8000a02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <SystemClock_Config+0xd4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a14:	2302      	movs	r3, #2
 8000a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a20:	2302      	movs	r3, #2
 8000a22:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a2c:	23d8      	movs	r3, #216	@ 0xd8
 8000a2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a38:	f107 0320 	add.w	r3, r7, #32
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 f85f 	bl	8001b00 <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a48:	f000 f826 	bl	8000a98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a4c:	f001 f808 	bl	8001a60 <HAL_PWREx_EnableOverDrive>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a56:	f000 f81f 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a66:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	2107      	movs	r1, #7
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 fae5 	bl	8002048 <HAL_RCC_ClockConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a84:	f000 f808 	bl	8000a98 <Error_Handler>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3750      	adds	r7, #80	@ 0x50
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <Error_Handler+0x8>

08000aa4 <sh_useless_fonction>:
#include "shell.h"

#include <stdio.h>

static int sh_useless_fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <sh_useless_fonction+0x3c>)
 8000ab8:	2180      	movs	r1, #128	@ 0x80
 8000aba:	4618      	mov	r0, r3
 8000abc:	f005 f918 	bl	8005cf0 <sniprintf>
 8000ac0:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000ace:	6979      	ldr	r1, [r7, #20]
 8000ad0:	b289      	uxth	r1, r1
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4798      	blx	r3

	return 0;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	08006f5c 	.word	0x08006f5c

08000ae4 <sh_help>:
	static int bool;
	if (bool == 0)
		vTaskSuspend(xTaskToSuspend);
}*/

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b089      	sub	sp, #36	@ 0x24
 8000ae8:	af02      	add	r7, sp, #8
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e029      	b.n	8000b4a <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000afc:	68f9      	ldr	r1, [r7, #12]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	4613      	mov	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4413      	add	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461c      	mov	r4, r3
 8000b10:	68f9      	ldr	r1, [r7, #12]
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	4613      	mov	r3, r2
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	4413      	add	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	330c      	adds	r3, #12
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	4623      	mov	r3, r4
 8000b26:	4a0e      	ldr	r2, [pc, #56]	@ (8000b60 <sh_help+0x7c>)
 8000b28:	2180      	movs	r1, #128	@ 0x80
 8000b2a:	f005 f8e1 	bl	8005cf0 <sniprintf>
 8000b2e:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000b3c:	6939      	ldr	r1, [r7, #16]
 8000b3e:	b289      	uxth	r1, r1
 8000b40:	4610      	mov	r0, r2
 8000b42:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3301      	adds	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbd0      	blt.n	8000af6 <sh_help+0x12>
	}

	return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	371c      	adds	r7, #28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	08006f7c 	.word	0x08006f7c

08000b64 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	int size = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
	h_shell->drv.receive = drv_uart1_receive;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a23      	ldr	r2, [pc, #140]	@ (8000c00 <shell_init+0x9c>)
 8000b74:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
	h_shell->drv.transmit = drv_uart1_transmit;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a22      	ldr	r2, [pc, #136]	@ (8000c04 <shell_init+0xa0>)
 8000b7c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

	h_shell->func_list_size = 0;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8000c08 <shell_init+0xa4>)
 8000b8e:	2180      	movs	r1, #128	@ 0x80
 8000b90:	4618      	mov	r0, r3
 8000b92:	f005 f8ad 	bl	8005cf0 <sniprintf>
 8000b96:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000ba4:	68f9      	ldr	r1, [r7, #12]
 8000ba6:	b289      	uxth	r1, r1
 8000ba8:	4610      	mov	r0, r2
 8000baa:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000bb2:	4a16      	ldr	r2, [pc, #88]	@ (8000c0c <shell_init+0xa8>)
 8000bb4:	2180      	movs	r1, #128	@ 0x80
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f005 f89a 	bl	8005cf0 <sniprintf>
 8000bbc:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000bca:	68f9      	ldr	r1, [r7, #12]
 8000bcc:	b289      	uxth	r1, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <shell_init+0xac>)
 8000bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c14 <shell_init+0xb0>)
 8000bd6:	2168      	movs	r1, #104	@ 0x68
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f825 	bl	8000c28 <shell_add>
	shell_add(h_shell, 'f', sh_useless_fonction, "Une fonction inutile");
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <shell_init+0xb4>)
 8000be0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <shell_init+0xb8>)
 8000be2:	2166      	movs	r1, #102	@ 0x66
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f000 f81f 	bl	8000c28 <shell_add>
	shell_add(h_shell, 'l', sh_led, "Enable/Disable LedTask and first param set the led Delay");
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <shell_init+0xbc>)
 8000bec:	4a0d      	ldr	r2, [pc, #52]	@ (8000c24 <shell_init+0xc0>)
 8000bee:	216c      	movs	r1, #108	@ 0x6c
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 f819 	bl	8000c28 <shell_add>
}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	08000e9d 	.word	0x08000e9d
 8000c04:	08000ec5 	.word	0x08000ec5
 8000c08:	08006f88 	.word	0x08006f88
 8000c0c:	08006fb0 	.word	0x08006fb0
 8000c10:	08006fd4 	.word	0x08006fd4
 8000c14:	08000ae5 	.word	0x08000ae5
 8000c18:	08006fdc 	.word	0x08006fdc
 8000c1c:	08000aa5 	.word	0x08000aa5
 8000c20:	08006ff4 	.word	0x08006ff4
 8000c24:	08000745 	.word	0x08000745

08000c28 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	460b      	mov	r3, r1
 8000c36:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c3e:	dc27      	bgt.n	8000c90 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	68f9      	ldr	r1, [r7, #12]
 8000c46:	4613      	mov	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4413      	add	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	440b      	add	r3, r1
 8000c50:	3304      	adds	r3, #4
 8000c52:	7afa      	ldrb	r2, [r7, #11]
 8000c54:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68f9      	ldr	r1, [r7, #12]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	440b      	add	r3, r1
 8000c66:	3308      	adds	r3, #8
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	68f9      	ldr	r1, [r7, #12]
 8000c72:	4613      	mov	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	330c      	adds	r3, #12
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	601a      	str	r2, [r3, #0]
		return 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e001      	b.n	8000c94 <shell_add+0x6c>
	}

	return -1;
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b090      	sub	sp, #64	@ 0x40
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cb6:	e041      	b.n	8000d3c <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d131      	bne.n	8000d36 <shell_exec+0x96>
			argc = 1;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8000cde:	e013      	b.n	8000d08 <shell_exec+0x68>
				if(*p == ' ') {
 8000ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b20      	cmp	r3, #32
 8000ce6:	d10c      	bne.n	8000d02 <shell_exec+0x62>
					*p = '\0';
 8000ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8000cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000cf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cf6:	3201      	adds	r2, #1
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	3340      	adds	r3, #64	@ 0x40
 8000cfc:	443b      	add	r3, r7
 8000cfe:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d04:	3301      	adds	r3, #1
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <shell_exec+0x76>
 8000d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d12:	2b07      	cmp	r3, #7
 8000d14:	dde4      	ble.n	8000ce0 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	3308      	adds	r3, #8
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f107 020c 	add.w	r2, r7, #12
 8000d2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	4798      	blx	r3
 8000d32:	4603      	mov	r3, r0
 8000d34:	e01d      	b.n	8000d72 <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d38:	3301      	adds	r3, #1
 8000d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d42:	429a      	cmp	r2, r3
 8000d44:	dbb8      	blt.n	8000cb8 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000d4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d50:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <shell_exec+0xdc>)
 8000d52:	2180      	movs	r1, #128	@ 0x80
 8000d54:	f004 ffcc 	bl	8005cf0 <sniprintf>
 8000d58:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000d66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000d68:	b289      	uxth	r1, r1
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	4798      	blx	r3
	return -1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3740      	adds	r7, #64	@ 0x40
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	08007030 	.word	0x08007030

08000d80 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]


		h_shell->drv.transmit(prompt, 2);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000d96:	2102      	movs	r1, #2
 8000d98:	483c      	ldr	r0, [pc, #240]	@ (8000e8c <shell_run+0x10c>)
 8000d9a:	4798      	blx	r3
		reading = 1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]

		while(reading) {
 8000da0:	e064      	b.n	8000e6c <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8000da8:	f107 020b 	add.w	r2, r7, #11
 8000dac:	2101      	movs	r1, #1
 8000dae:	4610      	mov	r0, r2
 8000db0:	4798      	blx	r3
			int size;

			switch (c) {
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	2b08      	cmp	r3, #8
 8000db6:	d036      	beq.n	8000e26 <shell_run+0xa6>
 8000db8:	2b0d      	cmp	r3, #13
 8000dba:	d141      	bne.n	8000e40 <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000dc2:	4a33      	ldr	r2, [pc, #204]	@ (8000e90 <shell_run+0x110>)
 8000dc4:	2180      	movs	r1, #128	@ 0x80
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f004 ff92 	bl	8005cf0 <sniprintf>
 8000dcc:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000dda:	68f9      	ldr	r1, [r7, #12]
 8000ddc:	b289      	uxth	r1, r1
 8000dde:	4610      	mov	r0, r2
 8000de0:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	613a      	str	r2, [r7, #16]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4413      	add	r3, r2
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8000dfe:	4a25      	ldr	r2, [pc, #148]	@ (8000e94 <shell_run+0x114>)
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	f004 ff75 	bl	8005cf0 <sniprintf>
 8000e06:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000e14:	68f9      	ldr	r1, [r7, #12]
 8000e16:	b289      	uxth	r1, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4798      	blx	r3
				reading = 0;        //exit read loop
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
				break;
 8000e24:	e022      	b.n	8000e6c <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	dd1e      	ble.n	8000e6a <shell_run+0xea>
					pos--;          //remove it in buffer
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000e38:	2103      	movs	r1, #3
 8000e3a:	4817      	ldr	r0, [pc, #92]	@ (8000e98 <shell_run+0x118>)
 8000e3c:	4798      	blx	r3
				}
				break;
 8000e3e:	e014      	b.n	8000e6a <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e44:	dc12      	bgt.n	8000e6c <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000e4c:	f107 020b 	add.w	r2, r7, #11
 8000e50:	2101      	movs	r1, #1
 8000e52:	4610      	mov	r0, r2
 8000e54:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	613a      	str	r2, [r7, #16]
 8000e5c:	7af9      	ldrb	r1, [r7, #11]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	460a      	mov	r2, r1
 8000e64:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 8000e68:	e000      	b.n	8000e6c <shell_run+0xec>
				break;
 8000e6a:	bf00      	nop
		while(reading) {
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d197      	bne.n	8000da2 <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8000e78:	4619      	mov	r1, r3
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ff10 	bl	8000ca0 <shell_exec>

	return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	08007060 	.word	0x08007060
 8000e90:	08007048 	.word	0x08007048
 8000e94:	0800704c 	.word	0x0800704c
 8000e98:	0800705c 	.word	0x0800705c

08000e9c <drv_uart1_receive>:

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 8000ea8:	887a      	ldrh	r2, [r7, #2]
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	4803      	ldr	r0, [pc, #12]	@ (8000ec0 <drv_uart1_receive+0x24>)
 8000eb2:	f001 ff76 	bl	8002da2 <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000758 	.word	0x20000758

08000ec4 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8000ed0:	887a      	ldrh	r2, [r7, #2]
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <drv_uart1_transmit+0x24>)
 8000eda:	f001 fed9 	bl	8002c90 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000758 	.word	0x20000758

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	4a10      	ldr	r2, [pc, #64]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	210f      	movs	r1, #15
 8000f26:	f06f 0001 	mvn.w	r0, #1
 8000f2a:	f000 fb0a 	bl	8001542 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <NMI_Handler+0x4>

08000f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <MemManage_Handler+0x4>

08000f54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f76:	f000 f9e9 	bl	800134c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f7a:	f003 ffd9 	bl	8004f30 <xTaskGetSchedulerState>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d001      	beq.n	8000f88 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f84:	f004 fa00 	bl	8005388 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <USART1_IRQHandler+0x10>)
 8000f92:	f001 ffcf 	bl	8002f34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000758 	.word	0x20000758

08000fa0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	e00a      	b.n	8000fc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb2:	f3af 8000 	nop.w
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	60ba      	str	r2, [r7, #8]
 8000fbe:	b2ca      	uxtb	r2, r1
 8000fc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf0      	blt.n	8000fb2 <_read+0x12>
  }

  return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e009      	b.n	8001000 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	60ba      	str	r2, [r7, #8]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fb93 	bl	8000720 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf1      	blt.n	8000fec <_write+0x12>
  }
  return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_close>:

int _close(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800103a:	605a      	str	r2, [r3, #4]
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_isatty>:

int _isatty(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f004 ffea 	bl	8006084 <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20050000 	.word	0x20050000
 80010dc:	00000800 	.word	0x00000800
 80010e0:	20000754 	.word	0x20000754
 80010e4:	20008280 	.word	0x20008280

080010e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001110:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <MX_USART1_UART_Init+0x58>)
 8001112:	4a15      	ldr	r2, [pc, #84]	@ (8001168 <MX_USART1_UART_Init+0x5c>)
 8001114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001116:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <MX_USART1_UART_Init+0x58>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <MX_USART1_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <MX_USART1_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <MX_USART1_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <MX_USART1_UART_Init+0x58>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <MX_USART1_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <MX_USART1_UART_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001142:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <MX_USART1_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <MX_USART1_UART_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	@ (8001164 <MX_USART1_UART_Init+0x58>)
 8001150:	f001 fd50 	bl	8002bf4 <HAL_UART_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800115a:	f7ff fc9d 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000758 	.word	0x20000758
 8001168:	40011000 	.word	0x40011000

0800116c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0ac      	sub	sp, #176	@ 0xb0
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	2284      	movs	r2, #132	@ 0x84
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f004 febd 	bl	8005f0c <memset>
  if(uartHandle->Instance==USART1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a36      	ldr	r2, [pc, #216]	@ (8001270 <HAL_UART_MspInit+0x104>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d164      	bne.n	8001266 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800119c:	2340      	movs	r3, #64	@ 0x40
 800119e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011a0:	2300      	movs	r3, #0
 80011a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 f933 	bl	8002414 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011b4:	f7ff fc70 	bl	8000a98 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001274 <HAL_UART_MspInit+0x108>)
 80011ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001274 <HAL_UART_MspInit+0x108>)
 80011be:	f043 0310 	orr.w	r3, r3, #16
 80011c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80011c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <HAL_UART_MspInit+0x108>)
 80011c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c8:	f003 0310 	and.w	r3, r3, #16
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <HAL_UART_MspInit+0x108>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	4a27      	ldr	r2, [pc, #156]	@ (8001274 <HAL_UART_MspInit+0x108>)
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	6313      	str	r3, [r2, #48]	@ 0x30
 80011dc:	4b25      	ldr	r3, [pc, #148]	@ (8001274 <HAL_UART_MspInit+0x108>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b22      	ldr	r3, [pc, #136]	@ (8001274 <HAL_UART_MspInit+0x108>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	4a21      	ldr	r2, [pc, #132]	@ (8001274 <HAL_UART_MspInit+0x108>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <HAL_UART_MspInit+0x108>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001200:	2380      	movs	r3, #128	@ 0x80
 8001202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001218:	2307      	movs	r3, #7
 800121a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001222:	4619      	mov	r1, r3
 8001224:	4814      	ldr	r0, [pc, #80]	@ (8001278 <HAL_UART_MspInit+0x10c>)
 8001226:	f000 fa55 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800122a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800122e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001244:	2307      	movs	r3, #7
 8001246:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800124e:	4619      	mov	r1, r3
 8001250:	480a      	ldr	r0, [pc, #40]	@ (800127c <HAL_UART_MspInit+0x110>)
 8001252:	f000 fa3f 	bl	80016d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2105      	movs	r1, #5
 800125a:	2025      	movs	r0, #37	@ 0x25
 800125c:	f000 f971 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001260:	2025      	movs	r0, #37	@ 0x25
 8001262:	f000 f98a 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001266:	bf00      	nop
 8001268:	37b0      	adds	r7, #176	@ 0xb0
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40011000 	.word	0x40011000
 8001274:	40023800 	.word	0x40023800
 8001278:	40020400 	.word	0x40020400
 800127c:	40020000 	.word	0x40020000

08001280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001284:	f7ff ff30 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800128a:	490d      	ldr	r1, [pc, #52]	@ (80012c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800128c:	4a0d      	ldr	r2, [pc, #52]	@ (80012c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a0:	4c0a      	ldr	r4, [pc, #40]	@ (80012cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012ae:	f004 feef 	bl	8006090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b2:	f7ff fb0b 	bl	80008cc <main>
  bx  lr    
 80012b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80012c4:	080071c0 	.word	0x080071c0
  ldr r2, =_sbss
 80012c8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80012cc:	2000827c 	.word	0x2000827c

080012d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC_IRQHandler>

080012d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d6:	2003      	movs	r0, #3
 80012d8:	f000 f928 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012dc:	200f      	movs	r0, #15
 80012de:	f000 f805 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e2:	f7ff fe03 	bl	8000eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <HAL_InitTick+0x54>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HAL_InitTick+0x58>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f943 	bl	8001596 <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 f90b 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	@ (8001348 <HAL_InitTick+0x5c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000000c 	.word	0x2000000c
 8001344:	20000014 	.word	0x20000014
 8001348:	20000010 	.word	0x20000010

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000014 	.word	0x20000014
 8001370:	200007e0 	.word	0x200007e0

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	200007e0 	.word	0x200007e0

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <__NVIC_SetPriorityGrouping+0x40>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <__NVIC_SetPriorityGrouping+0x40>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	05fa0000 	.word	0x05fa0000

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	@ (8001428 <__NVIC_EnableIRQ+0x38>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	@ (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	@ (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	@ 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff29 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff3e 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff8e 	bl	8001480 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5d 	bl	800142c <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff31 	bl	80013f0 <__NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffa2 	bl	80014e8 <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff feda 	bl	8001374 <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d008      	beq.n	80015e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2280      	movs	r2, #128	@ 0x80
 80015d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e052      	b.n	8001686 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0216 	bic.w	r2, r2, #22
 80015ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	2b00      	cmp	r3, #0
 8001606:	d103      	bne.n	8001610 <HAL_DMA_Abort+0x62>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0208 	bic.w	r2, r2, #8
 800161e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0201 	bic.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001630:	e013      	b.n	800165a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001632:	f7ff fe9f 	bl	8001374 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b05      	cmp	r3, #5
 800163e:	d90c      	bls.n	800165a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2220      	movs	r2, #32
 8001644:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2203      	movs	r2, #3
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e015      	b.n	8001686 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1e4      	bne.n	8001632 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166c:	223f      	movs	r2, #63	@ 0x3f
 800166e:	409a      	lsls	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d004      	beq.n	80016ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2280      	movs	r2, #128	@ 0x80
 80016a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e00c      	b.n	80016c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2205      	movs	r2, #5
 80016b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0201 	bic.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	@ 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	e175      	b.n	80019e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8164 	bne.w	80019da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b01      	cmp	r3, #1
 800171c:	d005      	beq.n	800172a <HAL_GPIO_Init+0x56>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d130      	bne.n	800178c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	2203      	movs	r2, #3
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001760:	2201      	movs	r2, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 0201 	and.w	r2, r3, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b03      	cmp	r3, #3
 8001796:	d017      	beq.n	80017c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d123      	bne.n	800181c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	08da      	lsrs	r2, r3, #3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3208      	adds	r2, #8
 80017dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	08da      	lsrs	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3208      	adds	r2, #8
 8001816:	69b9      	ldr	r1, [r7, #24]
 8001818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0203 	and.w	r2, r3, #3
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80be 	beq.w	80019da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b66      	ldr	r3, [pc, #408]	@ (80019f8 <HAL_GPIO_Init+0x324>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	4a65      	ldr	r2, [pc, #404]	@ (80019f8 <HAL_GPIO_Init+0x324>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001868:	6453      	str	r3, [r2, #68]	@ 0x44
 800186a:	4b63      	ldr	r3, [pc, #396]	@ (80019f8 <HAL_GPIO_Init+0x324>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001876:	4a61      	ldr	r2, [pc, #388]	@ (80019fc <HAL_GPIO_Init+0x328>)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a58      	ldr	r2, [pc, #352]	@ (8001a00 <HAL_GPIO_Init+0x32c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d037      	beq.n	8001912 <HAL_GPIO_Init+0x23e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <HAL_GPIO_Init+0x330>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d031      	beq.n	800190e <HAL_GPIO_Init+0x23a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <HAL_GPIO_Init+0x334>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d02b      	beq.n	800190a <HAL_GPIO_Init+0x236>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a55      	ldr	r2, [pc, #340]	@ (8001a0c <HAL_GPIO_Init+0x338>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d025      	beq.n	8001906 <HAL_GPIO_Init+0x232>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a54      	ldr	r2, [pc, #336]	@ (8001a10 <HAL_GPIO_Init+0x33c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01f      	beq.n	8001902 <HAL_GPIO_Init+0x22e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a53      	ldr	r2, [pc, #332]	@ (8001a14 <HAL_GPIO_Init+0x340>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d019      	beq.n	80018fe <HAL_GPIO_Init+0x22a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a52      	ldr	r2, [pc, #328]	@ (8001a18 <HAL_GPIO_Init+0x344>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x226>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a51      	ldr	r2, [pc, #324]	@ (8001a1c <HAL_GPIO_Init+0x348>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x222>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a50      	ldr	r2, [pc, #320]	@ (8001a20 <HAL_GPIO_Init+0x34c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x21e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a24 <HAL_GPIO_Init+0x350>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x21a>
 80018ea:	2309      	movs	r3, #9
 80018ec:	e012      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018ee:	230a      	movs	r3, #10
 80018f0:	e010      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018f2:	2308      	movs	r3, #8
 80018f4:	e00e      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018f6:	2307      	movs	r3, #7
 80018f8:	e00c      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018fa:	2306      	movs	r3, #6
 80018fc:	e00a      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018fe:	2305      	movs	r3, #5
 8001900:	e008      	b.n	8001914 <HAL_GPIO_Init+0x240>
 8001902:	2304      	movs	r3, #4
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x240>
 8001906:	2303      	movs	r3, #3
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x240>
 800190a:	2302      	movs	r3, #2
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x240>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x240>
 8001912:	2300      	movs	r3, #0
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f002 0203 	and.w	r2, r2, #3
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001924:	4935      	ldr	r1, [pc, #212]	@ (80019fc <HAL_GPIO_Init+0x328>)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001932:	4b3d      	ldr	r3, [pc, #244]	@ (8001a28 <HAL_GPIO_Init+0x354>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001956:	4a34      	ldr	r2, [pc, #208]	@ (8001a28 <HAL_GPIO_Init+0x354>)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800195c:	4b32      	ldr	r3, [pc, #200]	@ (8001a28 <HAL_GPIO_Init+0x354>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001980:	4a29      	ldr	r2, [pc, #164]	@ (8001a28 <HAL_GPIO_Init+0x354>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001986:	4b28      	ldr	r3, [pc, #160]	@ (8001a28 <HAL_GPIO_Init+0x354>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001a28 <HAL_GPIO_Init+0x354>)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <HAL_GPIO_Init+0x354>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019d4:	4a14      	ldr	r2, [pc, #80]	@ (8001a28 <HAL_GPIO_Init+0x354>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3301      	adds	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2b0f      	cmp	r3, #15
 80019e4:	f67f ae86 	bls.w	80016f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3724      	adds	r7, #36	@ 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40013800 	.word	0x40013800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40020c00 	.word	0x40020c00
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40021400 	.word	0x40021400
 8001a18:	40021800 	.word	0x40021800
 8001a1c:	40021c00 	.word	0x40021c00
 8001a20:	40022000 	.word	0x40022000
 8001a24:	40022400 	.word	0x40022400
 8001a28:	40013c00 	.word	0x40013c00

08001a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a3c:	787b      	ldrb	r3, [r7, #1]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a48:	e003      	b.n	8001a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	041a      	lsls	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	619a      	str	r2, [r3, #24]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	4b23      	ldr	r3, [pc, #140]	@ (8001af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	4a22      	ldr	r2, [pc, #136]	@ (8001af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a76:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a82:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1d      	ldr	r2, [pc, #116]	@ (8001afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a8e:	f7ff fc71 	bl	8001374 <HAL_GetTick>
 8001a92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a94:	e009      	b.n	8001aaa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a96:	f7ff fc6d 	bl	8001374 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001aa4:	d901      	bls.n	8001aaa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e022      	b.n	8001af0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001aaa:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ab8:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0f      	ldr	r2, [pc, #60]	@ (8001afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac4:	f7ff fc56 	bl	8001374 <HAL_GetTick>
 8001ac8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001aca:	e009      	b.n	8001ae0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001acc:	f7ff fc52 	bl	8001374 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ada:	d901      	bls.n	8001ae0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e007      	b.n	8001af0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001aec:	d1ee      	bne.n	8001acc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007000 	.word	0x40007000

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e291      	b.n	800203a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8087 	beq.w	8001c32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b24:	4b96      	ldr	r3, [pc, #600]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d00c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b30:	4b93      	ldr	r3, [pc, #588]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d112      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62>
 8001b3c:	4b90      	ldr	r3, [pc, #576]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b48:	d10b      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4a:	4b8d      	ldr	r3, [pc, #564]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d06c      	beq.n	8001c30 <HAL_RCC_OscConfig+0x130>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d168      	bne.n	8001c30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e26b      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x7a>
 8001b6c:	4b84      	ldr	r3, [pc, #528]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a83      	ldr	r2, [pc, #524]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e02e      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd8>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x9c>
 8001b82:	4b7f      	ldr	r3, [pc, #508]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7e      	ldr	r2, [pc, #504]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a7b      	ldr	r2, [pc, #492]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e01d      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xc0>
 8001ba6:	4b76      	ldr	r3, [pc, #472]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a75      	ldr	r2, [pc, #468]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b73      	ldr	r3, [pc, #460]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a72      	ldr	r2, [pc, #456]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd8>
 8001bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6e      	ldr	r2, [pc, #440]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b6c      	ldr	r3, [pc, #432]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a6b      	ldr	r2, [pc, #428]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff fbc8 	bl	8001374 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fbc4 	bl	8001374 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	@ 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e21f      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b61      	ldr	r3, [pc, #388]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0xe8>
 8001c06:	e014      	b.n	8001c32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff fbb4 	bl	8001374 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fbb0 	bl	8001374 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	@ 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e20b      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	4b57      	ldr	r3, [pc, #348]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x110>
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d069      	beq.n	8001d12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3e:	4b50      	ldr	r3, [pc, #320]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4a:	4b4d      	ldr	r3, [pc, #308]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d11c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x190>
 8001c56:	4b4a      	ldr	r3, [pc, #296]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	4b47      	ldr	r3, [pc, #284]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_OscConfig+0x17a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e1df      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7a:	4b41      	ldr	r3, [pc, #260]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	493d      	ldr	r1, [pc, #244]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	e040      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d023      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c98:	4b39      	ldr	r3, [pc, #228]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a38      	ldr	r2, [pc, #224]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fb66 	bl	8001374 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff fb62 	bl	8001374 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1bd      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	4b30      	ldr	r3, [pc, #192]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cca:	4b2d      	ldr	r3, [pc, #180]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4929      	ldr	r1, [pc, #164]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
 8001cde:	e018      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce0:	4b27      	ldr	r3, [pc, #156]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a26      	ldr	r2, [pc, #152]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff fb42 	bl	8001374 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fb3e 	bl	8001374 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e199      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d038      	beq.n	8001d90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d019      	beq.n	8001d5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d26:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d2a:	4a15      	ldr	r2, [pc, #84]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d32:	f7ff fb1f 	bl	8001374 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fb1b 	bl	8001374 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e176      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x23a>
 8001d58:	e01a      	b.n	8001d90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d5e:	4a08      	ldr	r2, [pc, #32]	@ (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d66:	f7ff fb05 	bl	8001374 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fb01 	bl	8001374 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d903      	bls.n	8001d84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e15c      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
 8001d80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d84:	4b91      	ldr	r3, [pc, #580]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1ee      	bne.n	8001d6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80a4 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9e:	4b8b      	ldr	r3, [pc, #556]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b88      	ldr	r3, [pc, #544]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	4a87      	ldr	r2, [pc, #540]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db6:	4b85      	ldr	r3, [pc, #532]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc6:	4b82      	ldr	r3, [pc, #520]	@ (8001fd0 <HAL_RCC_OscConfig+0x4d0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001dd2:	4b7f      	ldr	r3, [pc, #508]	@ (8001fd0 <HAL_RCC_OscConfig+0x4d0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a7e      	ldr	r2, [pc, #504]	@ (8001fd0 <HAL_RCC_OscConfig+0x4d0>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7ff fac9 	bl	8001374 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7ff fac5 	bl	8001374 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b64      	cmp	r3, #100	@ 0x64
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e120      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df8:	4b75      	ldr	r3, [pc, #468]	@ (8001fd0 <HAL_RCC_OscConfig+0x4d0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x31a>
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e10:	4a6e      	ldr	r2, [pc, #440]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e18:	e02d      	b.n	8001e76 <HAL_RCC_OscConfig+0x376>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x33c>
 8001e22:	4b6a      	ldr	r3, [pc, #424]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e26:	4a69      	ldr	r2, [pc, #420]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2e:	4b67      	ldr	r3, [pc, #412]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e32:	4a66      	ldr	r2, [pc, #408]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e3a:	e01c      	b.n	8001e76 <HAL_RCC_OscConfig+0x376>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0x35e>
 8001e44:	4b61      	ldr	r3, [pc, #388]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	4a60      	ldr	r2, [pc, #384]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e50:	4b5e      	ldr	r3, [pc, #376]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e54:	4a5d      	ldr	r2, [pc, #372]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCC_OscConfig+0x376>
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e62:	4a5a      	ldr	r2, [pc, #360]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e6a:	4b58      	ldr	r3, [pc, #352]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6e:	4a57      	ldr	r2, [pc, #348]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d015      	beq.n	8001eaa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fa79 	bl	8001374 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7ff fa75 	bl	8001374 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0ce      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	4b4b      	ldr	r3, [pc, #300]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ee      	beq.n	8001e86 <HAL_RCC_OscConfig+0x386>
 8001ea8:	e014      	b.n	8001ed4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fa63 	bl	8001374 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7ff fa5f 	bl	8001374 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e0b8      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	4b40      	ldr	r3, [pc, #256]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ee      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d105      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eda:	4b3c      	ldr	r3, [pc, #240]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	4a3b      	ldr	r2, [pc, #236]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001ee0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80a4 	beq.w	8002038 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef0:	4b36      	ldr	r3, [pc, #216]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d06b      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d149      	bne.n	8001f98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f04:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a30      	ldr	r2, [pc, #192]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff fa30 	bl	8001374 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff fa2c 	bl	8001374 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e087      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2a:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	019b      	lsls	r3, r3, #6
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	041b      	lsls	r3, r3, #16
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f58:	061b      	lsls	r3, r3, #24
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001f62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a18      	ldr	r2, [pc, #96]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff fa00 	bl	8001374 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f78:	f7ff f9fc 	bl	8001374 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e057      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x478>
 8001f96:	e04f      	b.n	8002038 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f9e6 	bl	8001374 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7ff f9e2 	bl	8001374 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e03d      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	4b03      	ldr	r3, [pc, #12]	@ (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x4ac>
 8001fca:	e035      	b.n	8002038 <HAL_RCC_OscConfig+0x538>
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <HAL_RCC_OscConfig+0x544>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d028      	beq.n	8002034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d121      	bne.n	8002034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d11a      	bne.n	8002034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002004:	4013      	ands	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800200a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800200c:	4293      	cmp	r3, r2
 800200e:	d111      	bne.n	8002034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	3b01      	subs	r3, #1
 800201e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800

08002048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0d0      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002060:	4b6a      	ldr	r3, [pc, #424]	@ (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d910      	bls.n	8002090 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b67      	ldr	r3, [pc, #412]	@ (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 020f 	bic.w	r2, r3, #15
 8002076:	4965      	ldr	r1, [pc, #404]	@ (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b63      	ldr	r3, [pc, #396]	@ (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0b8      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d020      	beq.n	80020de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a8:	4b59      	ldr	r3, [pc, #356]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4a58      	ldr	r2, [pc, #352]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c0:	4b53      	ldr	r3, [pc, #332]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4a52      	ldr	r2, [pc, #328]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020cc:	4b50      	ldr	r3, [pc, #320]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	494d      	ldr	r1, [pc, #308]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d040      	beq.n	800216c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4b47      	ldr	r3, [pc, #284]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d115      	bne.n	800212a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e07f      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	4b41      	ldr	r3, [pc, #260]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e073      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211a:	4b3d      	ldr	r3, [pc, #244]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e06b      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212a:	4b39      	ldr	r3, [pc, #228]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f023 0203 	bic.w	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4936      	ldr	r1, [pc, #216]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 8002138:	4313      	orrs	r3, r2
 800213a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800213c:	f7ff f91a 	bl	8001374 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7ff f916 	bl	8001374 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e053      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	4b2d      	ldr	r3, [pc, #180]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 020c 	and.w	r2, r3, #12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	429a      	cmp	r2, r3
 800216a:	d1eb      	bne.n	8002144 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800216c:	4b27      	ldr	r3, [pc, #156]	@ (800220c <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d210      	bcs.n	800219c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b24      	ldr	r3, [pc, #144]	@ (800220c <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 020f 	bic.w	r2, r3, #15
 8002182:	4922      	ldr	r1, [pc, #136]	@ (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b20      	ldr	r3, [pc, #128]	@ (800220c <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e032      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a8:	4b19      	ldr	r3, [pc, #100]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4916      	ldr	r1, [pc, #88]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021c6:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	490e      	ldr	r1, [pc, #56]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021da:	f000 f821 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80021de:	4602      	mov	r2, r0
 80021e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	490a      	ldr	r1, [pc, #40]	@ (8002214 <HAL_RCC_ClockConfig+0x1cc>)
 80021ec:	5ccb      	ldrb	r3, [r1, r3]
 80021ee:	fa22 f303 	lsr.w	r3, r2, r3
 80021f2:	4a09      	ldr	r2, [pc, #36]	@ (8002218 <HAL_RCC_ClockConfig+0x1d0>)
 80021f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021f6:	4b09      	ldr	r3, [pc, #36]	@ (800221c <HAL_RCC_ClockConfig+0x1d4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff f876 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023c00 	.word	0x40023c00
 8002210:	40023800 	.word	0x40023800
 8002214:	08007064 	.word	0x08007064
 8002218:	2000000c 	.word	0x2000000c
 800221c:	20000010 	.word	0x20000010

08002220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002224:	b090      	sub	sp, #64	@ 0x40
 8002226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
 800222c:	2300      	movs	r3, #0
 800222e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002230:	2300      	movs	r3, #0
 8002232:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002238:	4b59      	ldr	r3, [pc, #356]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d00d      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x40>
 8002244:	2b08      	cmp	r3, #8
 8002246:	f200 80a1 	bhi.w	800238c <HAL_RCC_GetSysClockFreq+0x16c>
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x34>
 800224e:	2b04      	cmp	r3, #4
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x3a>
 8002252:	e09b      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002254:	4b53      	ldr	r3, [pc, #332]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002256:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002258:	e09b      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800225a:	4b53      	ldr	r3, [pc, #332]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800225c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800225e:	e098      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002260:	4b4f      	ldr	r3, [pc, #316]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002268:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800226a:	4b4d      	ldr	r3, [pc, #308]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d028      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002276:	4b4a      	ldr	r3, [pc, #296]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	099b      	lsrs	r3, r3, #6
 800227c:	2200      	movs	r2, #0
 800227e:	623b      	str	r3, [r7, #32]
 8002280:	627a      	str	r2, [r7, #36]	@ 0x24
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002288:	2100      	movs	r1, #0
 800228a:	4b47      	ldr	r3, [pc, #284]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800228c:	fb03 f201 	mul.w	r2, r3, r1
 8002290:	2300      	movs	r3, #0
 8002292:	fb00 f303 	mul.w	r3, r0, r3
 8002296:	4413      	add	r3, r2
 8002298:	4a43      	ldr	r2, [pc, #268]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800229a:	fba0 1202 	umull	r1, r2, r0, r2
 800229e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022a0:	460a      	mov	r2, r1
 80022a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80022a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022a6:	4413      	add	r3, r2
 80022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ac:	2200      	movs	r2, #0
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	61fa      	str	r2, [r7, #28]
 80022b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80022ba:	f7fd fff9 	bl	80002b0 <__aeabi_uldivmod>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4613      	mov	r3, r2
 80022c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022c6:	e053      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c8:	4b35      	ldr	r3, [pc, #212]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	2200      	movs	r2, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	617a      	str	r2, [r7, #20]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022da:	f04f 0b00 	mov.w	fp, #0
 80022de:	4652      	mov	r2, sl
 80022e0:	465b      	mov	r3, fp
 80022e2:	f04f 0000 	mov.w	r0, #0
 80022e6:	f04f 0100 	mov.w	r1, #0
 80022ea:	0159      	lsls	r1, r3, #5
 80022ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f0:	0150      	lsls	r0, r2, #5
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	ebb2 080a 	subs.w	r8, r2, sl
 80022fa:	eb63 090b 	sbc.w	r9, r3, fp
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800230a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800230e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002312:	ebb2 0408 	subs.w	r4, r2, r8
 8002316:	eb63 0509 	sbc.w	r5, r3, r9
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	00eb      	lsls	r3, r5, #3
 8002324:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002328:	00e2      	lsls	r2, r4, #3
 800232a:	4614      	mov	r4, r2
 800232c:	461d      	mov	r5, r3
 800232e:	eb14 030a 	adds.w	r3, r4, sl
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	eb45 030b 	adc.w	r3, r5, fp
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002346:	4629      	mov	r1, r5
 8002348:	028b      	lsls	r3, r1, #10
 800234a:	4621      	mov	r1, r4
 800234c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002350:	4621      	mov	r1, r4
 8002352:	028a      	lsls	r2, r1, #10
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800235a:	2200      	movs	r2, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	60fa      	str	r2, [r7, #12]
 8002360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002364:	f7fd ffa4 	bl	80002b0 <__aeabi_uldivmod>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4613      	mov	r3, r2
 800236e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	3301      	adds	r3, #1
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002380:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800238a:	e002      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800238e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002394:	4618      	mov	r0, r3
 8002396:	3740      	adds	r7, #64	@ 0x40
 8002398:	46bd      	mov	sp, r7
 800239a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	00f42400 	.word	0x00f42400
 80023a8:	017d7840 	.word	0x017d7840

080023ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	2000000c 	.word	0x2000000c

080023c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023c8:	f7ff fff0 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0a9b      	lsrs	r3, r3, #10
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4903      	ldr	r1, [pc, #12]	@ (80023e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	08007074 	.word	0x08007074

080023ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023f0:	f7ff ffdc 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b05      	ldr	r3, [pc, #20]	@ (800240c <HAL_RCC_GetPCLK2Freq+0x20>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0b5b      	lsrs	r3, r3, #13
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4903      	ldr	r1, [pc, #12]	@ (8002410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40023800 	.word	0x40023800
 8002410:	08007074 	.word	0x08007074

08002414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d012      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800243c:	4b69      	ldr	r3, [pc, #420]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a68      	ldr	r2, [pc, #416]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002442:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002446:	6093      	str	r3, [r2, #8]
 8002448:	4b66      	ldr	r3, [pc, #408]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002450:	4964      	ldr	r1, [pc, #400]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800245e:	2301      	movs	r3, #1
 8002460:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d017      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800246e:	4b5d      	ldr	r3, [pc, #372]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002474:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247c:	4959      	ldr	r1, [pc, #356]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002488:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800248c:	d101      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800248e:	2301      	movs	r3, #1
 8002490:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800249a:	2301      	movs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d017      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024aa:	4b4e      	ldr	r3, [pc, #312]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b8:	494a      	ldr	r1, [pc, #296]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024c8:	d101      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024d6:	2301      	movs	r3, #1
 80024d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 808b 	beq.w	800260e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f8:	4b3a      	ldr	r3, [pc, #232]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	4a39      	ldr	r2, [pc, #228]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002502:	6413      	str	r3, [r2, #64]	@ 0x40
 8002504:	4b37      	ldr	r3, [pc, #220]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002510:	4b35      	ldr	r3, [pc, #212]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a34      	ldr	r2, [pc, #208]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800251a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800251c:	f7fe ff2a 	bl	8001374 <HAL_GetTick>
 8002520:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002524:	f7fe ff26 	bl	8001374 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e357      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002536:	4b2c      	ldr	r3, [pc, #176]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002542:	4b28      	ldr	r3, [pc, #160]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800254a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d035      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	429a      	cmp	r2, r3
 800255e:	d02e      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002560:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002568:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800256a:	4b1e      	ldr	r3, [pc, #120]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256e:	4a1d      	ldr	r2, [pc, #116]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002574:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002576:	4b1b      	ldr	r3, [pc, #108]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257a:	4a1a      	ldr	r2, [pc, #104]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002580:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002582:	4a18      	ldr	r2, [pc, #96]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002588:	4b16      	ldr	r3, [pc, #88]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b01      	cmp	r3, #1
 8002592:	d114      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe feee 	bl	8001374 <HAL_GetTick>
 8002598:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259a:	e00a      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259c:	f7fe feea 	bl	8001374 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e319      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b2:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0ee      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025ca:	d111      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025cc:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025d8:	4b04      	ldr	r3, [pc, #16]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025da:	400b      	ands	r3, r1
 80025dc:	4901      	ldr	r1, [pc, #4]	@ (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
 80025e2:	e00b      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40007000 	.word	0x40007000
 80025ec:	0ffffcff 	.word	0x0ffffcff
 80025f0:	4baa      	ldr	r3, [pc, #680]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4aa9      	ldr	r2, [pc, #676]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80025fa:	6093      	str	r3, [r2, #8]
 80025fc:	4ba7      	ldr	r3, [pc, #668]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002608:	49a4      	ldr	r1, [pc, #656]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800260a:	4313      	orrs	r3, r2
 800260c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800261a:	4ba0      	ldr	r3, [pc, #640]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800261c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002620:	4a9e      	ldr	r2, [pc, #632]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002626:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800262a:	4b9c      	ldr	r3, [pc, #624]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800262c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002634:	4999      	ldr	r1, [pc, #612]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002648:	4b94      	ldr	r3, [pc, #592]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002656:	4991      	ldr	r1, [pc, #580]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800266a:	4b8c      	ldr	r3, [pc, #560]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002670:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002678:	4988      	ldr	r1, [pc, #544]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800268c:	4b83      	ldr	r3, [pc, #524]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002692:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800269a:	4980      	ldr	r1, [pc, #512]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026ae:	4b7b      	ldr	r3, [pc, #492]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026bc:	4977      	ldr	r1, [pc, #476]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026d0:	4b72      	ldr	r3, [pc, #456]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d6:	f023 0203 	bic.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	496f      	ldr	r1, [pc, #444]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026f2:	4b6a      	ldr	r3, [pc, #424]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f8:	f023 020c 	bic.w	r2, r3, #12
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002700:	4966      	ldr	r1, [pc, #408]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002714:	4b61      	ldr	r3, [pc, #388]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	495e      	ldr	r1, [pc, #376]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002736:	4b59      	ldr	r3, [pc, #356]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002744:	4955      	ldr	r1, [pc, #340]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002758:	4b50      	ldr	r3, [pc, #320]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002766:	494d      	ldr	r1, [pc, #308]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800277a:	4b48      	ldr	r3, [pc, #288]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002780:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	4944      	ldr	r1, [pc, #272]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800279c:	4b3f      	ldr	r3, [pc, #252]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	493c      	ldr	r1, [pc, #240]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027be:	4b37      	ldr	r3, [pc, #220]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027cc:	4933      	ldr	r1, [pc, #204]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027e0:	4b2e      	ldr	r3, [pc, #184]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027ee:	492b      	ldr	r1, [pc, #172]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d011      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002802:	4b26      	ldr	r3, [pc, #152]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002808:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002810:	4922      	ldr	r1, [pc, #136]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800281c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002820:	d101      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002822:	2301      	movs	r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002842:	4b16      	ldr	r3, [pc, #88]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002848:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002850:	4912      	ldr	r1, [pc, #72]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002864:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002874:	4909      	ldr	r1, [pc, #36]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d006      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80d9 	beq.w	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002890:	4b02      	ldr	r3, [pc, #8]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a01      	ldr	r2, [pc, #4]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002896:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800289a:	e001      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800289c:	40023800 	.word	0x40023800
 80028a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a2:	f7fe fd67 	bl	8001374 <HAL_GetTick>
 80028a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028aa:	f7fe fd63 	bl	8001374 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b64      	cmp	r3, #100	@ 0x64
 80028b6:	d901      	bls.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e194      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d021      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d11d      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028dc:	4b64      	ldr	r3, [pc, #400]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028ea:	4b61      	ldr	r3, [pc, #388]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028f0:	0e1b      	lsrs	r3, r3, #24
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	019a      	lsls	r2, r3, #6
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	041b      	lsls	r3, r3, #16
 8002902:	431a      	orrs	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	061b      	lsls	r3, r3, #24
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	071b      	lsls	r3, r3, #28
 8002910:	4957      	ldr	r1, [pc, #348]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002928:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002936:	2b00      	cmp	r3, #0
 8002938:	d02e      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002942:	d129      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002944:	4b4a      	ldr	r3, [pc, #296]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002946:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800294a:	0c1b      	lsrs	r3, r3, #16
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002952:	4b47      	ldr	r3, [pc, #284]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002958:	0f1b      	lsrs	r3, r3, #28
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	019a      	lsls	r2, r3, #6
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	041b      	lsls	r3, r3, #16
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	431a      	orrs	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	071b      	lsls	r3, r3, #28
 8002978:	493d      	ldr	r1, [pc, #244]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002980:	4b3b      	ldr	r3, [pc, #236]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002986:	f023 021f 	bic.w	r2, r3, #31
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	3b01      	subs	r3, #1
 8002990:	4937      	ldr	r1, [pc, #220]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d01d      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029a4:	4b32      	ldr	r3, [pc, #200]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029aa:	0e1b      	lsrs	r3, r3, #24
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029b8:	0f1b      	lsrs	r3, r3, #28
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	019a      	lsls	r2, r3, #6
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	041b      	lsls	r3, r3, #16
 80029cc:	431a      	orrs	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	431a      	orrs	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	071b      	lsls	r3, r3, #28
 80029d8:	4925      	ldr	r1, [pc, #148]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d011      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	019a      	lsls	r2, r3, #6
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	041b      	lsls	r3, r3, #16
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	061b      	lsls	r3, r3, #24
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	071b      	lsls	r3, r3, #28
 8002a08:	4919      	ldr	r1, [pc, #100]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a10:	4b17      	ldr	r3, [pc, #92]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a16      	ldr	r2, [pc, #88]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a1c:	f7fe fcaa 	bl	8001374 <HAL_GetTick>
 8002a20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a24:	f7fe fca6 	bl	8001374 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	@ 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e0d7      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a36:	4b0e      	ldr	r3, [pc, #56]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	f040 80cd 	bne.w	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a4a:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a08      	ldr	r2, [pc, #32]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a56:	f7fe fc8d 	bl	8001374 <HAL_GetTick>
 8002a5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a5e:	f7fe fc89 	bl	8001374 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b64      	cmp	r3, #100	@ 0x64
 8002a6a:	d903      	bls.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e0ba      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002a70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a74:	4b5e      	ldr	r3, [pc, #376]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a80:	d0ed      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d02e      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d12a      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002aaa:	4b51      	ldr	r3, [pc, #324]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002abe:	0f1b      	lsrs	r3, r3, #28
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	019a      	lsls	r2, r3, #6
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	041b      	lsls	r3, r3, #16
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	061b      	lsls	r3, r3, #24
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	071b      	lsls	r3, r3, #28
 8002ade:	4944      	ldr	r1, [pc, #272]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ae6:	4b42      	ldr	r3, [pc, #264]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	3b01      	subs	r3, #1
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	493d      	ldr	r1, [pc, #244]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d022      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b14:	d11d      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b16:	4b36      	ldr	r3, [pc, #216]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1c:	0e1b      	lsrs	r3, r3, #24
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b24:	4b32      	ldr	r3, [pc, #200]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2a:	0f1b      	lsrs	r3, r3, #28
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	019a      	lsls	r2, r3, #6
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	061b      	lsls	r3, r3, #24
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	071b      	lsls	r3, r3, #28
 8002b4a:	4929      	ldr	r1, [pc, #164]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d028      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b5e:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b64:	0e1b      	lsrs	r3, r3, #24
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b6c:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b72:	0c1b      	lsrs	r3, r3, #16
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	019a      	lsls	r2, r3, #6
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	041b      	lsls	r3, r3, #16
 8002b84:	431a      	orrs	r2, r3
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	071b      	lsls	r3, r3, #28
 8002b92:	4917      	ldr	r1, [pc, #92]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b9a:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ba0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba8:	4911      	ldr	r1, [pc, #68]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fbda 	bl	8001374 <HAL_GetTick>
 8002bc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bc4:	f7fe fbd6 	bl	8001374 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	@ 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e007      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002be2:	d1ef      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800

08002bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e040      	b.n	8002c88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fe faa8 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2224      	movs	r2, #36	@ 0x24
 8002c20:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fed0 	bl	80039e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fc69 	bl	8003518 <UART_SetConfig>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e01b      	b.n	8002c88 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 ff4f 	bl	8003b24 <UART_CheckIdleState>
 8002c86:	4603      	mov	r3, r0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	@ 0x28
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d177      	bne.n	8002d98 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_UART_Transmit+0x24>
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e070      	b.n	8002d9a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2221      	movs	r2, #33	@ 0x21
 8002cc4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cc6:	f7fe fb55 	bl	8001374 <HAL_GetTick>
 8002cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	88fa      	ldrh	r2, [r7, #6]
 8002cd0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	88fa      	ldrh	r2, [r7, #6]
 8002cd8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ce4:	d108      	bne.n	8002cf8 <HAL_UART_Transmit+0x68>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d104      	bne.n	8002cf8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	e003      	b.n	8002d00 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d00:	e02f      	b.n	8002d62 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2180      	movs	r1, #128	@ 0x80
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 ff60 	bl	8003bd2 <UART_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e03b      	b.n	8002d9a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10b      	bne.n	8002d40 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d36:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	e007      	b.n	8002d50 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	781a      	ldrb	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1c9      	bne.n	8002d02 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2140      	movs	r1, #64	@ 0x40
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 ff2a 	bl	8003bd2 <UART_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e005      	b.n	8002d9a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b08a      	sub	sp, #40	@ 0x28
 8002da6:	af02      	add	r7, sp, #8
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	f040 80b5 	bne.w	8002f28 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_UART_Receive+0x28>
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0ad      	b.n	8002f2a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2222      	movs	r2, #34	@ 0x22
 8002dda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002de4:	f7fe fac6 	bl	8001374 <HAL_GetTick>
 8002de8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	88fa      	ldrh	r2, [r7, #6]
 8002df6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e02:	d10e      	bne.n	8002e22 <HAL_UART_Receive+0x80>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <HAL_UART_Receive+0x76>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002e12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e16:	e02d      	b.n	8002e74 <HAL_UART_Receive+0xd2>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	22ff      	movs	r2, #255	@ 0xff
 8002e1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e20:	e028      	b.n	8002e74 <HAL_UART_Receive+0xd2>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10d      	bne.n	8002e46 <HAL_UART_Receive+0xa4>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d104      	bne.n	8002e3c <HAL_UART_Receive+0x9a>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	22ff      	movs	r2, #255	@ 0xff
 8002e36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e3a:	e01b      	b.n	8002e74 <HAL_UART_Receive+0xd2>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	227f      	movs	r2, #127	@ 0x7f
 8002e40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e44:	e016      	b.n	8002e74 <HAL_UART_Receive+0xd2>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e4e:	d10d      	bne.n	8002e6c <HAL_UART_Receive+0xca>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <HAL_UART_Receive+0xc0>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	227f      	movs	r2, #127	@ 0x7f
 8002e5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e60:	e008      	b.n	8002e74 <HAL_UART_Receive+0xd2>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	223f      	movs	r2, #63	@ 0x3f
 8002e66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e6a:	e003      	b.n	8002e74 <HAL_UART_Receive+0xd2>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002e7a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e84:	d108      	bne.n	8002e98 <HAL_UART_Receive+0xf6>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d104      	bne.n	8002e98 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	e003      	b.n	8002ea0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002ea0:	e036      	b.n	8002f10 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2120      	movs	r1, #32
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fe90 	bl	8003bd2 <UART_WaitOnFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e032      	b.n	8002f2a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	8a7b      	ldrh	r3, [r7, #18]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	3302      	adds	r3, #2
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e00c      	b.n	8002efe <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	8a7b      	ldrh	r3, [r7, #18]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1c2      	bne.n	8002ea2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e000      	b.n	8002f2a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b0ba      	sub	sp, #232	@ 0xe8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002f5e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002f62:	4013      	ands	r3, r2
 8002f64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002f68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d115      	bne.n	8002f9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00f      	beq.n	8002f9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d009      	beq.n	8002f9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8297 	beq.w	80034c0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
      }
      return;
 8002f9a:	e291      	b.n	80034c0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8117 	beq.w	80031d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002fb6:	4b85      	ldr	r3, [pc, #532]	@ (80031cc <HAL_UART_IRQHandler+0x298>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 810a 	beq.w	80031d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d011      	beq.n	8002ff0 <HAL_UART_IRQHandler+0xbc>
 8002fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d011      	beq.n	8003020 <HAL_UART_IRQHandler+0xec>
 8002ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2202      	movs	r2, #2
 800300e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003016:	f043 0204 	orr.w	r2, r3, #4
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d011      	beq.n	8003050 <HAL_UART_IRQHandler+0x11c>
 800302c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00b      	beq.n	8003050 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2204      	movs	r2, #4
 800303e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003046:	f043 0202 	orr.w	r2, r3, #2
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d017      	beq.n	800308c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800305c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800306c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00b      	beq.n	800308c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2208      	movs	r2, #8
 800307a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003082:	f043 0208 	orr.w	r2, r3, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800308c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003094:	2b00      	cmp	r3, #0
 8003096:	d012      	beq.n	80030be <HAL_UART_IRQHandler+0x18a>
 8003098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800309c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00c      	beq.n	80030be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 81fd 	beq.w	80034c4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003106:	2b40      	cmp	r3, #64	@ 0x40
 8003108:	d005      	beq.n	8003116 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800310a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800310e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003112:	2b00      	cmp	r3, #0
 8003114:	d04f      	beq.n	80031b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fdc8 	bl	8003cac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003126:	2b40      	cmp	r3, #64	@ 0x40
 8003128:	d141      	bne.n	80031ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3308      	adds	r3, #8
 8003130:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003134:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003138:	e853 3f00 	ldrex	r3, [r3]
 800313c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003140:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003148:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3308      	adds	r3, #8
 8003152:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003156:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800315a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800316e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1d9      	bne.n	800312a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800317a:	2b00      	cmp	r3, #0
 800317c:	d013      	beq.n	80031a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003182:	4a13      	ldr	r2, [pc, #76]	@ (80031d0 <HAL_UART_IRQHandler+0x29c>)
 8003184:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fa7f 	bl	800168e <HAL_DMA_Abort_IT>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d017      	beq.n	80031c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800319a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031a0:	4610      	mov	r0, r2
 80031a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a4:	e00f      	b.n	80031c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f9a0 	bl	80034ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ac:	e00b      	b.n	80031c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f99c 	bl	80034ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b4:	e007      	b.n	80031c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f998 	bl	80034ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80031c4:	e17e      	b.n	80034c4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c6:	bf00      	nop
    return;
 80031c8:	e17c      	b.n	80034c4 <HAL_UART_IRQHandler+0x590>
 80031ca:	bf00      	nop
 80031cc:	04000120 	.word	0x04000120
 80031d0:	08003d75 	.word	0x08003d75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d8:	2b01      	cmp	r3, #1
 80031da:	f040 814c 	bne.w	8003476 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8145 	beq.w	8003476 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 813e 	beq.w	8003476 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2210      	movs	r2, #16
 8003200:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320c:	2b40      	cmp	r3, #64	@ 0x40
 800320e:	f040 80b6 	bne.w	800337e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800321e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8150 	beq.w	80034c8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800322e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003232:	429a      	cmp	r2, r3
 8003234:	f080 8148 	bcs.w	80034c8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800323e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800324c:	f000 8086 	beq.w	800335c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003258:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003264:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800326c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800327a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800327e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003282:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003286:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003292:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1da      	bne.n	8003250 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3308      	adds	r3, #8
 80032a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80032aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3308      	adds	r3, #8
 80032ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80032c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80032c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80032d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e1      	bne.n	800329a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3308      	adds	r3, #8
 80032dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032e0:	e853 3f00 	ldrex	r3, [r3]
 80032e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3308      	adds	r3, #8
 80032f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003300:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003308:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e3      	bne.n	80032d6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2220      	movs	r2, #32
 8003312:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800332a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800332c:	f023 0310 	bic.w	r3, r3, #16
 8003330:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800333e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003340:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003342:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003344:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003346:	e841 2300 	strex	r3, r2, [r1]
 800334a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800334c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e4      	bne.n	800331c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe f929 	bl	80015ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800336e:	b29b      	uxth	r3, r3
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	b29b      	uxth	r3, r3
 8003374:	4619      	mov	r1, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f8c2 	bl	8003500 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800337c:	e0a4      	b.n	80034c8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800338a:	b29b      	uxth	r3, r3
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 8096 	beq.w	80034cc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80033a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8091 	beq.w	80034cc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e4      	bne.n	80033aa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3308      	adds	r3, #8
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	623b      	str	r3, [r7, #32]
   return(result);
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3308      	adds	r3, #8
 8003400:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003404:	633a      	str	r2, [r7, #48]	@ 0x30
 8003406:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003408:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800340a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800340c:	e841 2300 	strex	r3, r2, [r1]
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e3      	bne.n	80033e0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	e853 3f00 	ldrex	r3, [r3]
 8003438:	60fb      	str	r3, [r7, #12]
   return(result);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f023 0310 	bic.w	r3, r3, #16
 8003440:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003452:	69b9      	ldr	r1, [r7, #24]
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	e841 2300 	strex	r3, r2, [r1]
 800345a:	617b      	str	r3, [r7, #20]
   return(result);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e4      	bne.n	800342c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800346c:	4619      	mov	r1, r3
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f846 	bl	8003500 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003474:	e02a      	b.n	80034cc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800347a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00e      	beq.n	80034a0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01c      	beq.n	80034d0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
    }
    return;
 800349e:	e017      	b.n	80034d0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d012      	beq.n	80034d2 <HAL_UART_IRQHandler+0x59e>
 80034ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00c      	beq.n	80034d2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fc71 	bl	8003da0 <UART_EndTransmit_IT>
    return;
 80034be:	e008      	b.n	80034d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80034c0:	bf00      	nop
 80034c2:	e006      	b.n	80034d2 <HAL_UART_IRQHandler+0x59e>
    return;
 80034c4:	bf00      	nop
 80034c6:	e004      	b.n	80034d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80034c8:	bf00      	nop
 80034ca:	e002      	b.n	80034d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80034cc:	bf00      	nop
 80034ce:	e000      	b.n	80034d2 <HAL_UART_IRQHandler+0x59e>
    return;
 80034d0:	bf00      	nop
  }

}
 80034d2:	37e8      	adds	r7, #232	@ 0xe8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4ba6      	ldr	r3, [pc, #664]	@ (80037dc <UART_SetConfig+0x2c4>)
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	6979      	ldr	r1, [r7, #20]
 800354c:	430b      	orrs	r3, r1
 800354e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	430a      	orrs	r2, r1
 8003588:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a94      	ldr	r2, [pc, #592]	@ (80037e0 <UART_SetConfig+0x2c8>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d120      	bne.n	80035d6 <UART_SetConfig+0xbe>
 8003594:	4b93      	ldr	r3, [pc, #588]	@ (80037e4 <UART_SetConfig+0x2cc>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d816      	bhi.n	80035d0 <UART_SetConfig+0xb8>
 80035a2:	a201      	add	r2, pc, #4	@ (adr r2, 80035a8 <UART_SetConfig+0x90>)
 80035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a8:	080035b9 	.word	0x080035b9
 80035ac:	080035c5 	.word	0x080035c5
 80035b0:	080035bf 	.word	0x080035bf
 80035b4:	080035cb 	.word	0x080035cb
 80035b8:	2301      	movs	r3, #1
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e150      	b.n	8003860 <UART_SetConfig+0x348>
 80035be:	2302      	movs	r3, #2
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e14d      	b.n	8003860 <UART_SetConfig+0x348>
 80035c4:	2304      	movs	r3, #4
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e14a      	b.n	8003860 <UART_SetConfig+0x348>
 80035ca:	2308      	movs	r3, #8
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e147      	b.n	8003860 <UART_SetConfig+0x348>
 80035d0:	2310      	movs	r3, #16
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e144      	b.n	8003860 <UART_SetConfig+0x348>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a83      	ldr	r2, [pc, #524]	@ (80037e8 <UART_SetConfig+0x2d0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d132      	bne.n	8003646 <UART_SetConfig+0x12e>
 80035e0:	4b80      	ldr	r3, [pc, #512]	@ (80037e4 <UART_SetConfig+0x2cc>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b0c      	cmp	r3, #12
 80035ec:	d828      	bhi.n	8003640 <UART_SetConfig+0x128>
 80035ee:	a201      	add	r2, pc, #4	@ (adr r2, 80035f4 <UART_SetConfig+0xdc>)
 80035f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f4:	08003629 	.word	0x08003629
 80035f8:	08003641 	.word	0x08003641
 80035fc:	08003641 	.word	0x08003641
 8003600:	08003641 	.word	0x08003641
 8003604:	08003635 	.word	0x08003635
 8003608:	08003641 	.word	0x08003641
 800360c:	08003641 	.word	0x08003641
 8003610:	08003641 	.word	0x08003641
 8003614:	0800362f 	.word	0x0800362f
 8003618:	08003641 	.word	0x08003641
 800361c:	08003641 	.word	0x08003641
 8003620:	08003641 	.word	0x08003641
 8003624:	0800363b 	.word	0x0800363b
 8003628:	2300      	movs	r3, #0
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e118      	b.n	8003860 <UART_SetConfig+0x348>
 800362e:	2302      	movs	r3, #2
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e115      	b.n	8003860 <UART_SetConfig+0x348>
 8003634:	2304      	movs	r3, #4
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e112      	b.n	8003860 <UART_SetConfig+0x348>
 800363a:	2308      	movs	r3, #8
 800363c:	77fb      	strb	r3, [r7, #31]
 800363e:	e10f      	b.n	8003860 <UART_SetConfig+0x348>
 8003640:	2310      	movs	r3, #16
 8003642:	77fb      	strb	r3, [r7, #31]
 8003644:	e10c      	b.n	8003860 <UART_SetConfig+0x348>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a68      	ldr	r2, [pc, #416]	@ (80037ec <UART_SetConfig+0x2d4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d120      	bne.n	8003692 <UART_SetConfig+0x17a>
 8003650:	4b64      	ldr	r3, [pc, #400]	@ (80037e4 <UART_SetConfig+0x2cc>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003656:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800365a:	2b30      	cmp	r3, #48	@ 0x30
 800365c:	d013      	beq.n	8003686 <UART_SetConfig+0x16e>
 800365e:	2b30      	cmp	r3, #48	@ 0x30
 8003660:	d814      	bhi.n	800368c <UART_SetConfig+0x174>
 8003662:	2b20      	cmp	r3, #32
 8003664:	d009      	beq.n	800367a <UART_SetConfig+0x162>
 8003666:	2b20      	cmp	r3, #32
 8003668:	d810      	bhi.n	800368c <UART_SetConfig+0x174>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <UART_SetConfig+0x15c>
 800366e:	2b10      	cmp	r3, #16
 8003670:	d006      	beq.n	8003680 <UART_SetConfig+0x168>
 8003672:	e00b      	b.n	800368c <UART_SetConfig+0x174>
 8003674:	2300      	movs	r3, #0
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e0f2      	b.n	8003860 <UART_SetConfig+0x348>
 800367a:	2302      	movs	r3, #2
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e0ef      	b.n	8003860 <UART_SetConfig+0x348>
 8003680:	2304      	movs	r3, #4
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e0ec      	b.n	8003860 <UART_SetConfig+0x348>
 8003686:	2308      	movs	r3, #8
 8003688:	77fb      	strb	r3, [r7, #31]
 800368a:	e0e9      	b.n	8003860 <UART_SetConfig+0x348>
 800368c:	2310      	movs	r3, #16
 800368e:	77fb      	strb	r3, [r7, #31]
 8003690:	e0e6      	b.n	8003860 <UART_SetConfig+0x348>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a56      	ldr	r2, [pc, #344]	@ (80037f0 <UART_SetConfig+0x2d8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d120      	bne.n	80036de <UART_SetConfig+0x1c6>
 800369c:	4b51      	ldr	r3, [pc, #324]	@ (80037e4 <UART_SetConfig+0x2cc>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80036a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80036a8:	d013      	beq.n	80036d2 <UART_SetConfig+0x1ba>
 80036aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80036ac:	d814      	bhi.n	80036d8 <UART_SetConfig+0x1c0>
 80036ae:	2b80      	cmp	r3, #128	@ 0x80
 80036b0:	d009      	beq.n	80036c6 <UART_SetConfig+0x1ae>
 80036b2:	2b80      	cmp	r3, #128	@ 0x80
 80036b4:	d810      	bhi.n	80036d8 <UART_SetConfig+0x1c0>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <UART_SetConfig+0x1a8>
 80036ba:	2b40      	cmp	r3, #64	@ 0x40
 80036bc:	d006      	beq.n	80036cc <UART_SetConfig+0x1b4>
 80036be:	e00b      	b.n	80036d8 <UART_SetConfig+0x1c0>
 80036c0:	2300      	movs	r3, #0
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e0cc      	b.n	8003860 <UART_SetConfig+0x348>
 80036c6:	2302      	movs	r3, #2
 80036c8:	77fb      	strb	r3, [r7, #31]
 80036ca:	e0c9      	b.n	8003860 <UART_SetConfig+0x348>
 80036cc:	2304      	movs	r3, #4
 80036ce:	77fb      	strb	r3, [r7, #31]
 80036d0:	e0c6      	b.n	8003860 <UART_SetConfig+0x348>
 80036d2:	2308      	movs	r3, #8
 80036d4:	77fb      	strb	r3, [r7, #31]
 80036d6:	e0c3      	b.n	8003860 <UART_SetConfig+0x348>
 80036d8:	2310      	movs	r3, #16
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	e0c0      	b.n	8003860 <UART_SetConfig+0x348>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a44      	ldr	r2, [pc, #272]	@ (80037f4 <UART_SetConfig+0x2dc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d125      	bne.n	8003734 <UART_SetConfig+0x21c>
 80036e8:	4b3e      	ldr	r3, [pc, #248]	@ (80037e4 <UART_SetConfig+0x2cc>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036f6:	d017      	beq.n	8003728 <UART_SetConfig+0x210>
 80036f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036fc:	d817      	bhi.n	800372e <UART_SetConfig+0x216>
 80036fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003702:	d00b      	beq.n	800371c <UART_SetConfig+0x204>
 8003704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003708:	d811      	bhi.n	800372e <UART_SetConfig+0x216>
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <UART_SetConfig+0x1fe>
 800370e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003712:	d006      	beq.n	8003722 <UART_SetConfig+0x20a>
 8003714:	e00b      	b.n	800372e <UART_SetConfig+0x216>
 8003716:	2300      	movs	r3, #0
 8003718:	77fb      	strb	r3, [r7, #31]
 800371a:	e0a1      	b.n	8003860 <UART_SetConfig+0x348>
 800371c:	2302      	movs	r3, #2
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e09e      	b.n	8003860 <UART_SetConfig+0x348>
 8003722:	2304      	movs	r3, #4
 8003724:	77fb      	strb	r3, [r7, #31]
 8003726:	e09b      	b.n	8003860 <UART_SetConfig+0x348>
 8003728:	2308      	movs	r3, #8
 800372a:	77fb      	strb	r3, [r7, #31]
 800372c:	e098      	b.n	8003860 <UART_SetConfig+0x348>
 800372e:	2310      	movs	r3, #16
 8003730:	77fb      	strb	r3, [r7, #31]
 8003732:	e095      	b.n	8003860 <UART_SetConfig+0x348>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2f      	ldr	r2, [pc, #188]	@ (80037f8 <UART_SetConfig+0x2e0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d125      	bne.n	800378a <UART_SetConfig+0x272>
 800373e:	4b29      	ldr	r3, [pc, #164]	@ (80037e4 <UART_SetConfig+0x2cc>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003744:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003748:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800374c:	d017      	beq.n	800377e <UART_SetConfig+0x266>
 800374e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003752:	d817      	bhi.n	8003784 <UART_SetConfig+0x26c>
 8003754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003758:	d00b      	beq.n	8003772 <UART_SetConfig+0x25a>
 800375a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800375e:	d811      	bhi.n	8003784 <UART_SetConfig+0x26c>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <UART_SetConfig+0x254>
 8003764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003768:	d006      	beq.n	8003778 <UART_SetConfig+0x260>
 800376a:	e00b      	b.n	8003784 <UART_SetConfig+0x26c>
 800376c:	2301      	movs	r3, #1
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e076      	b.n	8003860 <UART_SetConfig+0x348>
 8003772:	2302      	movs	r3, #2
 8003774:	77fb      	strb	r3, [r7, #31]
 8003776:	e073      	b.n	8003860 <UART_SetConfig+0x348>
 8003778:	2304      	movs	r3, #4
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e070      	b.n	8003860 <UART_SetConfig+0x348>
 800377e:	2308      	movs	r3, #8
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e06d      	b.n	8003860 <UART_SetConfig+0x348>
 8003784:	2310      	movs	r3, #16
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e06a      	b.n	8003860 <UART_SetConfig+0x348>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a1b      	ldr	r2, [pc, #108]	@ (80037fc <UART_SetConfig+0x2e4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d138      	bne.n	8003806 <UART_SetConfig+0x2ee>
 8003794:	4b13      	ldr	r3, [pc, #76]	@ (80037e4 <UART_SetConfig+0x2cc>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800379e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037a2:	d017      	beq.n	80037d4 <UART_SetConfig+0x2bc>
 80037a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037a8:	d82a      	bhi.n	8003800 <UART_SetConfig+0x2e8>
 80037aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ae:	d00b      	beq.n	80037c8 <UART_SetConfig+0x2b0>
 80037b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037b4:	d824      	bhi.n	8003800 <UART_SetConfig+0x2e8>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <UART_SetConfig+0x2aa>
 80037ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037be:	d006      	beq.n	80037ce <UART_SetConfig+0x2b6>
 80037c0:	e01e      	b.n	8003800 <UART_SetConfig+0x2e8>
 80037c2:	2300      	movs	r3, #0
 80037c4:	77fb      	strb	r3, [r7, #31]
 80037c6:	e04b      	b.n	8003860 <UART_SetConfig+0x348>
 80037c8:	2302      	movs	r3, #2
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e048      	b.n	8003860 <UART_SetConfig+0x348>
 80037ce:	2304      	movs	r3, #4
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e045      	b.n	8003860 <UART_SetConfig+0x348>
 80037d4:	2308      	movs	r3, #8
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e042      	b.n	8003860 <UART_SetConfig+0x348>
 80037da:	bf00      	nop
 80037dc:	efff69f3 	.word	0xefff69f3
 80037e0:	40011000 	.word	0x40011000
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40004400 	.word	0x40004400
 80037ec:	40004800 	.word	0x40004800
 80037f0:	40004c00 	.word	0x40004c00
 80037f4:	40005000 	.word	0x40005000
 80037f8:	40011400 	.word	0x40011400
 80037fc:	40007800 	.word	0x40007800
 8003800:	2310      	movs	r3, #16
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	e02c      	b.n	8003860 <UART_SetConfig+0x348>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a72      	ldr	r2, [pc, #456]	@ (80039d4 <UART_SetConfig+0x4bc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d125      	bne.n	800385c <UART_SetConfig+0x344>
 8003810:	4b71      	ldr	r3, [pc, #452]	@ (80039d8 <UART_SetConfig+0x4c0>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003816:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800381a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800381e:	d017      	beq.n	8003850 <UART_SetConfig+0x338>
 8003820:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003824:	d817      	bhi.n	8003856 <UART_SetConfig+0x33e>
 8003826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800382a:	d00b      	beq.n	8003844 <UART_SetConfig+0x32c>
 800382c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003830:	d811      	bhi.n	8003856 <UART_SetConfig+0x33e>
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <UART_SetConfig+0x326>
 8003836:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800383a:	d006      	beq.n	800384a <UART_SetConfig+0x332>
 800383c:	e00b      	b.n	8003856 <UART_SetConfig+0x33e>
 800383e:	2300      	movs	r3, #0
 8003840:	77fb      	strb	r3, [r7, #31]
 8003842:	e00d      	b.n	8003860 <UART_SetConfig+0x348>
 8003844:	2302      	movs	r3, #2
 8003846:	77fb      	strb	r3, [r7, #31]
 8003848:	e00a      	b.n	8003860 <UART_SetConfig+0x348>
 800384a:	2304      	movs	r3, #4
 800384c:	77fb      	strb	r3, [r7, #31]
 800384e:	e007      	b.n	8003860 <UART_SetConfig+0x348>
 8003850:	2308      	movs	r3, #8
 8003852:	77fb      	strb	r3, [r7, #31]
 8003854:	e004      	b.n	8003860 <UART_SetConfig+0x348>
 8003856:	2310      	movs	r3, #16
 8003858:	77fb      	strb	r3, [r7, #31]
 800385a:	e001      	b.n	8003860 <UART_SetConfig+0x348>
 800385c:	2310      	movs	r3, #16
 800385e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003868:	d15b      	bne.n	8003922 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800386a:	7ffb      	ldrb	r3, [r7, #31]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d828      	bhi.n	80038c2 <UART_SetConfig+0x3aa>
 8003870:	a201      	add	r2, pc, #4	@ (adr r2, 8003878 <UART_SetConfig+0x360>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	0800389d 	.word	0x0800389d
 800387c:	080038a5 	.word	0x080038a5
 8003880:	080038ad 	.word	0x080038ad
 8003884:	080038c3 	.word	0x080038c3
 8003888:	080038b3 	.word	0x080038b3
 800388c:	080038c3 	.word	0x080038c3
 8003890:	080038c3 	.word	0x080038c3
 8003894:	080038c3 	.word	0x080038c3
 8003898:	080038bb 	.word	0x080038bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800389c:	f7fe fd92 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 80038a0:	61b8      	str	r0, [r7, #24]
        break;
 80038a2:	e013      	b.n	80038cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a4:	f7fe fda2 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 80038a8:	61b8      	str	r0, [r7, #24]
        break;
 80038aa:	e00f      	b.n	80038cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ac:	4b4b      	ldr	r3, [pc, #300]	@ (80039dc <UART_SetConfig+0x4c4>)
 80038ae:	61bb      	str	r3, [r7, #24]
        break;
 80038b0:	e00c      	b.n	80038cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b2:	f7fe fcb5 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80038b6:	61b8      	str	r0, [r7, #24]
        break;
 80038b8:	e008      	b.n	80038cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038be:	61bb      	str	r3, [r7, #24]
        break;
 80038c0:	e004      	b.n	80038cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	77bb      	strb	r3, [r7, #30]
        break;
 80038ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d074      	beq.n	80039bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	005a      	lsls	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	085b      	lsrs	r3, r3, #1
 80038dc:	441a      	add	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	d916      	bls.n	800391c <UART_SetConfig+0x404>
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038f4:	d212      	bcs.n	800391c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	f023 030f 	bic.w	r3, r3, #15
 80038fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	b29b      	uxth	r3, r3
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	b29a      	uxth	r2, r3
 800390c:	89fb      	ldrh	r3, [r7, #14]
 800390e:	4313      	orrs	r3, r2
 8003910:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	89fa      	ldrh	r2, [r7, #14]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	e04f      	b.n	80039bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	77bb      	strb	r3, [r7, #30]
 8003920:	e04c      	b.n	80039bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003922:	7ffb      	ldrb	r3, [r7, #31]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d828      	bhi.n	800397a <UART_SetConfig+0x462>
 8003928:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <UART_SetConfig+0x418>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003955 	.word	0x08003955
 8003934:	0800395d 	.word	0x0800395d
 8003938:	08003965 	.word	0x08003965
 800393c:	0800397b 	.word	0x0800397b
 8003940:	0800396b 	.word	0x0800396b
 8003944:	0800397b 	.word	0x0800397b
 8003948:	0800397b 	.word	0x0800397b
 800394c:	0800397b 	.word	0x0800397b
 8003950:	08003973 	.word	0x08003973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003954:	f7fe fd36 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8003958:	61b8      	str	r0, [r7, #24]
        break;
 800395a:	e013      	b.n	8003984 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800395c:	f7fe fd46 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 8003960:	61b8      	str	r0, [r7, #24]
        break;
 8003962:	e00f      	b.n	8003984 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003964:	4b1d      	ldr	r3, [pc, #116]	@ (80039dc <UART_SetConfig+0x4c4>)
 8003966:	61bb      	str	r3, [r7, #24]
        break;
 8003968:	e00c      	b.n	8003984 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396a:	f7fe fc59 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 800396e:	61b8      	str	r0, [r7, #24]
        break;
 8003970:	e008      	b.n	8003984 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003976:	61bb      	str	r3, [r7, #24]
        break;
 8003978:	e004      	b.n	8003984 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	77bb      	strb	r3, [r7, #30]
        break;
 8003982:	bf00      	nop
    }

    if (pclk != 0U)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d018      	beq.n	80039bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	085a      	lsrs	r2, r3, #1
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	441a      	add	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b0f      	cmp	r3, #15
 80039a2:	d909      	bls.n	80039b8 <UART_SetConfig+0x4a0>
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039aa:	d205      	bcs.n	80039b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	e001      	b.n	80039bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80039c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40007c00 	.word	0x40007c00
 80039d8:	40023800 	.word	0x40023800
 80039dc:	00f42400 	.word	0x00f42400

080039e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01a      	beq.n	8003af6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ade:	d10a      	bne.n	8003af6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
  }
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	@ 0x30
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b34:	f7fd fc1e 	bl	8001374 <HAL_GetTick>
 8003b38:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d12e      	bne.n	8003ba6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	2200      	movs	r2, #0
 8003b52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f83b 	bl	8003bd2 <UART_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d021      	beq.n	8003ba6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	69b9      	ldr	r1, [r7, #24]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e6      	bne.n	8003b62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e011      	b.n	8003bca <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3728      	adds	r7, #40	@ 0x28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	603b      	str	r3, [r7, #0]
 8003bde:	4613      	mov	r3, r2
 8003be0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be2:	e04f      	b.n	8003c84 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d04b      	beq.n	8003c84 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bec:	f7fd fbc2 	bl	8001374 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d302      	bcc.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e04e      	b.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d037      	beq.n	8003c84 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b80      	cmp	r3, #128	@ 0x80
 8003c18:	d034      	beq.n	8003c84 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b40      	cmp	r3, #64	@ 0x40
 8003c1e:	d031      	beq.n	8003c84 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d110      	bne.n	8003c50 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2208      	movs	r2, #8
 8003c34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f838 	bl	8003cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2208      	movs	r2, #8
 8003c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e029      	b.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c5e:	d111      	bne.n	8003c84 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f81e 	bl	8003cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e00f      	b.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d0a0      	beq.n	8003be4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b095      	sub	sp, #84	@ 0x54
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e6      	bne.n	8003cb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3308      	adds	r3, #8
 8003cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3308      	adds	r3, #8
 8003d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e5      	bne.n	8003ce6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d118      	bne.n	8003d54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f023 0310 	bic.w	r3, r3, #16
 8003d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6979      	ldr	r1, [r7, #20]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e6      	bne.n	8003d22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d68:	bf00      	nop
 8003d6a:	3754      	adds	r7, #84	@ 0x54
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff fbaa 	bl	80034ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6979      	ldr	r1, [r7, #20]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e6      	bne.n	8003da8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff fb76 	bl	80034d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dec:	bf00      	nop
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e06:	2b84      	cmp	r3, #132	@ 0x84
 8003e08:	d005      	beq.n	8003e16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4413      	add	r3, r2
 8003e12:	3303      	adds	r3, #3
 8003e14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e16:	68fb      	ldr	r3, [r7, #12]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e28:	f000 fd00 	bl	800482c <vTaskStartScheduler>
  
  return osOK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e34:	b089      	sub	sp, #36	@ 0x24
 8003e36:	af04      	add	r7, sp, #16
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <osThreadCreate+0x54>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01c      	beq.n	8003e86 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685c      	ldr	r4, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691e      	ldr	r6, [r3, #16]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff ffc8 	bl	8003df4 <makeFreeRtosPriority>
 8003e64:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e6e:	9202      	str	r2, [sp, #8]
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	9100      	str	r1, [sp, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	4632      	mov	r2, r6
 8003e78:	4629      	mov	r1, r5
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f000 f9bc 	bl	80041f8 <xTaskCreateStatic>
 8003e80:	4603      	mov	r3, r0
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e01c      	b.n	8003ec0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685c      	ldr	r4, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e92:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff ffaa 	bl	8003df4 <makeFreeRtosPriority>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f107 030c 	add.w	r3, r7, #12
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	9200      	str	r2, [sp, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	4632      	mov	r2, r6
 8003eae:	4629      	mov	r1, r5
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f000 fa07 	bl	80042c4 <xTaskCreate>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d001      	beq.n	8003ec0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <osDelay+0x16>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	e000      	b.n	8003ee2 <osDelay+0x18>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fb40 	bl	8004568 <vTaskDelay>
  
  return osOK;
 8003ee8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f103 0208 	add.w	r2, r3, #8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f103 0208 	add.w	r2, r3, #8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f103 0208 	add.w	r2, r3, #8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	601a      	str	r2, [r3, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003faa:	d103      	bne.n	8003fb4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	e00c      	b.n	8003fce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	e002      	b.n	8003fc2 <vListInsert+0x2e>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d2f6      	bcs.n	8003fbc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	601a      	str	r2, [r3, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6892      	ldr	r2, [r2, #8]
 800401c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6852      	ldr	r2, [r2, #4]
 8004026:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	d103      	bne.n	800403a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	1e5a      	subs	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10d      	bne.n	800408c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004074:	b672      	cpsid	i
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	b662      	cpsie	i
 8004084:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004086:	bf00      	nop
 8004088:	bf00      	nop
 800408a:	e7fd      	b.n	8004088 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800408c:	f001 f8e6 	bl	800525c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004098:	68f9      	ldr	r1, [r7, #12]
 800409a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	441a      	add	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040bc:	3b01      	subs	r3, #1
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	441a      	add	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	22ff      	movs	r2, #255	@ 0xff
 80040d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	22ff      	movs	r2, #255	@ 0xff
 80040d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d114      	bne.n	800410c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d01a      	beq.n	8004120 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3310      	adds	r3, #16
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fdda 	bl	8004ca8 <xTaskRemoveFromEventList>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d012      	beq.n	8004120 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004130 <xQueueGenericReset+0xd4>)
 80040fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	e009      	b.n	8004120 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3310      	adds	r3, #16
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff feee 	bl	8003ef2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3324      	adds	r3, #36	@ 0x24
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fee9 	bl	8003ef2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004120:	f001 f8d2 	bl	80052c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004124:	2301      	movs	r3, #1
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	e000ed04 	.word	0xe000ed04

08004134 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	@ 0x28
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	4613      	mov	r3, r2
 8004140:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10d      	bne.n	8004164 <xQueueGenericCreate+0x30>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414c:	b672      	cpsid	i
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	b662      	cpsie	i
 800415c:	613b      	str	r3, [r7, #16]
}
 800415e:	bf00      	nop
 8004160:	bf00      	nop
 8004162:	e7fd      	b.n	8004160 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d102      	bne.n	8004170 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	e004      	b.n	800417a <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	fb02 f303 	mul.w	r3, r2, r3
 8004178:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3348      	adds	r3, #72	@ 0x48
 800417e:	4618      	mov	r0, r3
 8004180:	f001 f954 	bl	800542c <pvPortMalloc>
 8004184:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d011      	beq.n	80041b0 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	3348      	adds	r3, #72	@ 0x48
 8004194:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800419e:	79fa      	ldrb	r2, [r7, #7]
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f805 	bl	80041ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041b0:	69bb      	ldr	r3, [r7, #24]
	}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3720      	adds	r7, #32
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	e002      	b.n	80041dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041e8:	2101      	movs	r1, #1
 80041ea:	69b8      	ldr	r0, [r7, #24]
 80041ec:	f7ff ff36 	bl	800405c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08e      	sub	sp, #56	@ 0x38
 80041fc:	af04      	add	r7, sp, #16
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10d      	bne.n	8004228 <xTaskCreateStatic+0x30>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004210:	b672      	cpsid	i
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	b662      	cpsie	i
 8004220:	623b      	str	r3, [r7, #32]
}
 8004222:	bf00      	nop
 8004224:	bf00      	nop
 8004226:	e7fd      	b.n	8004224 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10d      	bne.n	800424a <xTaskCreateStatic+0x52>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004232:	b672      	cpsid	i
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	b662      	cpsie	i
 8004242:	61fb      	str	r3, [r7, #28]
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop
 8004248:	e7fd      	b.n	8004246 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800424a:	23a0      	movs	r3, #160	@ 0xa0
 800424c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2ba0      	cmp	r3, #160	@ 0xa0
 8004252:	d00d      	beq.n	8004270 <xTaskCreateStatic+0x78>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004258:	b672      	cpsid	i
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	b662      	cpsie	i
 8004268:	61bb      	str	r3, [r7, #24]
}
 800426a:	bf00      	nop
 800426c:	bf00      	nop
 800426e:	e7fd      	b.n	800426c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004270:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01e      	beq.n	80042b6 <xTaskCreateStatic+0xbe>
 8004278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01b      	beq.n	80042b6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800427e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	2202      	movs	r2, #2
 800428c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004290:	2300      	movs	r3, #0
 8004292:	9303      	str	r3, [sp, #12]
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	9302      	str	r3, [sp, #8]
 8004298:	f107 0314 	add.w	r3, r7, #20
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f851 	bl	8004350 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80042b0:	f000 f8f0 	bl	8004494 <prvAddNewTaskToReadyList>
 80042b4:	e001      	b.n	80042ba <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042ba:	697b      	ldr	r3, [r7, #20]
	}
 80042bc:	4618      	mov	r0, r3
 80042be:	3728      	adds	r7, #40	@ 0x28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08c      	sub	sp, #48	@ 0x30
 80042c8:	af04      	add	r7, sp, #16
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	4613      	mov	r3, r2
 80042d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4618      	mov	r0, r3
 80042da:	f001 f8a7 	bl	800542c <pvPortMalloc>
 80042de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00e      	beq.n	8004304 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042e6:	20a0      	movs	r0, #160	@ 0xa0
 80042e8:	f001 f8a0 	bl	800542c <pvPortMalloc>
 80042ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80042fa:	e005      	b.n	8004308 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042fc:	6978      	ldr	r0, [r7, #20]
 80042fe:	f001 f963 	bl	80055c8 <vPortFree>
 8004302:	e001      	b.n	8004308 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d017      	beq.n	800433e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	2300      	movs	r3, #0
 800431a:	9303      	str	r3, [sp, #12]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	9302      	str	r3, [sp, #8]
 8004320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f80f 	bl	8004350 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004332:	69f8      	ldr	r0, [r7, #28]
 8004334:	f000 f8ae 	bl	8004494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004338:	2301      	movs	r3, #1
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	e002      	b.n	8004344 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800433e:	f04f 33ff 	mov.w	r3, #4294967295
 8004342:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004344:	69bb      	ldr	r3, [r7, #24]
	}
 8004346:	4618      	mov	r0, r3
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800435e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004368:	440b      	add	r3, r1
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	f023 0307 	bic.w	r3, r3, #7
 8004376:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00d      	beq.n	800439e <prvInitialiseNewTask+0x4e>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004386:	b672      	cpsid	i
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	b662      	cpsie	i
 8004396:	617b      	str	r3, [r7, #20]
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	e7fd      	b.n	800439a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01f      	beq.n	80043e4 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	e012      	b.n	80043d0 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	4413      	add	r3, r2
 80043b0:	7819      	ldrb	r1, [r3, #0]
 80043b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	4413      	add	r3, r2
 80043b8:	3334      	adds	r3, #52	@ 0x34
 80043ba:	460a      	mov	r2, r1
 80043bc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	4413      	add	r3, r2
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d006      	beq.n	80043d8 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	3301      	adds	r3, #1
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b0f      	cmp	r3, #15
 80043d4:	d9e9      	bls.n	80043aa <prvInitialiseNewTask+0x5a>
 80043d6:	e000      	b.n	80043da <prvInitialiseNewTask+0x8a>
			{
				break;
 80043d8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043e2:	e003      	b.n	80043ec <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ee:	2b06      	cmp	r3, #6
 80043f0:	d901      	bls.n	80043f6 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043f2:	2306      	movs	r3, #6
 80043f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004400:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004404:	2200      	movs	r2, #0
 8004406:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440a:	3304      	adds	r3, #4
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff fd90 	bl	8003f32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	3318      	adds	r3, #24
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fd8b 	bl	8003f32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800441c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004420:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004424:	f1c3 0207 	rsb	r2, r3, #7
 8004428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	2200      	movs	r2, #0
 8004436:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	2200      	movs	r2, #0
 800443e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	334c      	adds	r3, #76	@ 0x4c
 8004446:	224c      	movs	r2, #76	@ 0x4c
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f001 fd5e 	bl	8005f0c <memset>
 8004450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004452:	4a0d      	ldr	r2, [pc, #52]	@ (8004488 <prvInitialiseNewTask+0x138>)
 8004454:	651a      	str	r2, [r3, #80]	@ 0x50
 8004456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004458:	4a0c      	ldr	r2, [pc, #48]	@ (800448c <prvInitialiseNewTask+0x13c>)
 800445a:	655a      	str	r2, [r3, #84]	@ 0x54
 800445c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445e:	4a0c      	ldr	r2, [pc, #48]	@ (8004490 <prvInitialiseNewTask+0x140>)
 8004460:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	68f9      	ldr	r1, [r7, #12]
 8004466:	69b8      	ldr	r0, [r7, #24]
 8004468:	f000 fde6 	bl	8005038 <pxPortInitialiseStack>
 800446c:	4602      	mov	r2, r0
 800446e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004470:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800447c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800447e:	bf00      	nop
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20008138 	.word	0x20008138
 800448c:	200081a0 	.word	0x200081a0
 8004490:	20008208 	.word	0x20008208

08004494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800449c:	f000 fede 	bl	800525c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044a0:	4b2a      	ldr	r3, [pc, #168]	@ (800454c <prvAddNewTaskToReadyList+0xb8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	4a29      	ldr	r2, [pc, #164]	@ (800454c <prvAddNewTaskToReadyList+0xb8>)
 80044a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044aa:	4b29      	ldr	r3, [pc, #164]	@ (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044b2:	4a27      	ldr	r2, [pc, #156]	@ (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044b8:	4b24      	ldr	r3, [pc, #144]	@ (800454c <prvAddNewTaskToReadyList+0xb8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d110      	bne.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044c0:	f000 fc70 	bl	8004da4 <prvInitialiseTaskLists>
 80044c4:	e00d      	b.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044c6:	4b23      	ldr	r3, [pc, #140]	@ (8004554 <prvAddNewTaskToReadyList+0xc0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044ce:	4b20      	ldr	r3, [pc, #128]	@ (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d8:	429a      	cmp	r2, r3
 80044da:	d802      	bhi.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004550 <prvAddNewTaskToReadyList+0xbc>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	2201      	movs	r2, #1
 80044f2:	409a      	lsls	r2, r3
 80044f4:	4b19      	ldr	r3, [pc, #100]	@ (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	4a18      	ldr	r2, [pc, #96]	@ (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4a15      	ldr	r2, [pc, #84]	@ (8004560 <prvAddNewTaskToReadyList+0xcc>)
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3304      	adds	r3, #4
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7ff fd19 	bl	8003f4c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800451a:	f000 fed5 	bl	80052c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800451e:	4b0d      	ldr	r3, [pc, #52]	@ (8004554 <prvAddNewTaskToReadyList+0xc0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00e      	beq.n	8004544 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004526:	4b0a      	ldr	r3, [pc, #40]	@ (8004550 <prvAddNewTaskToReadyList+0xbc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004530:	429a      	cmp	r2, r3
 8004532:	d207      	bcs.n	8004544 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004534:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <prvAddNewTaskToReadyList+0xd0>)
 8004536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004544:	bf00      	nop
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	200008e4 	.word	0x200008e4
 8004550:	200007e4 	.word	0x200007e4
 8004554:	200008f0 	.word	0x200008f0
 8004558:	20000900 	.word	0x20000900
 800455c:	200008ec 	.word	0x200008ec
 8004560:	200007e8 	.word	0x200007e8
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01a      	beq.n	80045b0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800457a:	4b15      	ldr	r3, [pc, #84]	@ (80045d0 <vTaskDelay+0x68>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00d      	beq.n	800459e <vTaskDelay+0x36>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004586:	b672      	cpsid	i
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	b662      	cpsie	i
 8004596:	60bb      	str	r3, [r7, #8]
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	e7fd      	b.n	800459a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800459e:	f000 f9b3 	bl	8004908 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045a2:	2100      	movs	r1, #0
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fce1 	bl	8004f6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045aa:	f000 f9bb 	bl	8004924 <xTaskResumeAll>
 80045ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d107      	bne.n	80045c6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80045b6:	4b07      	ldr	r3, [pc, #28]	@ (80045d4 <vTaskDelay+0x6c>)
 80045b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045c6:	bf00      	nop
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	2000090c 	.word	0x2000090c
 80045d4:	e000ed04 	.word	0xe000ed04

080045d8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80045e0:	f000 fe3c 	bl	800525c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d102      	bne.n	80045f0 <vTaskSuspend+0x18>
 80045ea:	4b3e      	ldr	r3, [pc, #248]	@ (80046e4 <vTaskSuspend+0x10c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	e000      	b.n	80045f2 <vTaskSuspend+0x1a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fd04 	bl	8004006 <uxListRemove>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d115      	bne.n	8004630 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004608:	4937      	ldr	r1, [pc, #220]	@ (80046e8 <vTaskSuspend+0x110>)
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <vTaskSuspend+0x58>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461e:	2201      	movs	r2, #1
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43da      	mvns	r2, r3
 8004626:	4b31      	ldr	r3, [pc, #196]	@ (80046ec <vTaskSuspend+0x114>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4013      	ands	r3, r2
 800462c:	4a2f      	ldr	r2, [pc, #188]	@ (80046ec <vTaskSuspend+0x114>)
 800462e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004634:	2b00      	cmp	r3, #0
 8004636:	d004      	beq.n	8004642 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3318      	adds	r3, #24
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fce2 	bl	8004006 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3304      	adds	r3, #4
 8004646:	4619      	mov	r1, r3
 8004648:	4829      	ldr	r0, [pc, #164]	@ (80046f0 <vTaskSuspend+0x118>)
 800464a:	f7ff fc7f 	bl	8003f4c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b01      	cmp	r3, #1
 8004658:	d103      	bne.n	8004662 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004662:	f000 fe31 	bl	80052c8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004666:	4b23      	ldr	r3, [pc, #140]	@ (80046f4 <vTaskSuspend+0x11c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800466e:	f000 fdf5 	bl	800525c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004672:	f000 fc3d 	bl	8004ef0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004676:	f000 fe27 	bl	80052c8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800467a:	4b1a      	ldr	r3, [pc, #104]	@ (80046e4 <vTaskSuspend+0x10c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	429a      	cmp	r2, r3
 8004682:	d12a      	bne.n	80046da <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 8004684:	4b1b      	ldr	r3, [pc, #108]	@ (80046f4 <vTaskSuspend+0x11c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01a      	beq.n	80046c2 <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800468c:	4b1a      	ldr	r3, [pc, #104]	@ (80046f8 <vTaskSuspend+0x120>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <vTaskSuspend+0xd8>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004698:	b672      	cpsid	i
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	b662      	cpsie	i
 80046a8:	60bb      	str	r3, [r7, #8]
}
 80046aa:	bf00      	nop
 80046ac:	bf00      	nop
 80046ae:	e7fd      	b.n	80046ac <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 80046b0:	4b12      	ldr	r3, [pc, #72]	@ (80046fc <vTaskSuspend+0x124>)
 80046b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046c0:	e00b      	b.n	80046da <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80046c2:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <vTaskSuspend+0x118>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004700 <vTaskSuspend+0x128>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d103      	bne.n	80046d6 <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 80046ce:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <vTaskSuspend+0x10c>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
	}
 80046d4:	e001      	b.n	80046da <vTaskSuspend+0x102>
					vTaskSwitchContext();
 80046d6:	f000 fa81 	bl	8004bdc <vTaskSwitchContext>
	}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200007e4 	.word	0x200007e4
 80046e8:	200007e8 	.word	0x200007e8
 80046ec:	200008ec 	.word	0x200008ec
 80046f0:	200008d0 	.word	0x200008d0
 80046f4:	200008f0 	.word	0x200008f0
 80046f8:	2000090c 	.word	0x2000090c
 80046fc:	e000ed04 	.word	0xe000ed04
 8004700:	200008e4 	.word	0x200008e4

08004704 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10d      	bne.n	8004736 <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471e:	b672      	cpsid	i
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	b662      	cpsie	i
 800472e:	60fb      	str	r3, [r7, #12]
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	e7fd      	b.n	8004732 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	4a0a      	ldr	r2, [pc, #40]	@ (8004764 <prvTaskIsTaskSuspended+0x60>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d10a      	bne.n	8004756 <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004744:	4a08      	ldr	r2, [pc, #32]	@ (8004768 <prvTaskIsTaskSuspended+0x64>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d005      	beq.n	8004756 <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 8004752:	2301      	movs	r3, #1
 8004754:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004756:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004758:	4618      	mov	r0, r3
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	200008d0 	.word	0x200008d0
 8004768:	200008a4 	.word	0x200008a4

0800476c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10d      	bne.n	800479a <vTaskResume+0x2e>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004782:	b672      	cpsid	i
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	b662      	cpsie	i
 8004792:	60bb      	str	r3, [r7, #8]
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	e7fd      	b.n	8004796 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800479a:	4b20      	ldr	r3, [pc, #128]	@ (800481c <vTaskResume+0xb0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d037      	beq.n	8004814 <vTaskResume+0xa8>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d034      	beq.n	8004814 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 80047aa:	f000 fd57 	bl	800525c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7ff ffa8 	bl	8004704 <prvTaskIsTaskSuspended>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d02a      	beq.n	8004810 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3304      	adds	r3, #4
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fc21 	bl	8004006 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	2201      	movs	r2, #1
 80047ca:	409a      	lsls	r2, r3
 80047cc:	4b14      	ldr	r3, [pc, #80]	@ (8004820 <vTaskResume+0xb4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	4a13      	ldr	r2, [pc, #76]	@ (8004820 <vTaskResume+0xb4>)
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4a10      	ldr	r2, [pc, #64]	@ (8004824 <vTaskResume+0xb8>)
 80047e4:	441a      	add	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f7ff fbad 	bl	8003f4c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f6:	4b09      	ldr	r3, [pc, #36]	@ (800481c <vTaskResume+0xb0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d307      	bcc.n	8004810 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8004800:	4b09      	ldr	r3, [pc, #36]	@ (8004828 <vTaskResume+0xbc>)
 8004802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8004810:	f000 fd5a 	bl	80052c8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	200007e4 	.word	0x200007e4
 8004820:	200008ec 	.word	0x200008ec
 8004824:	200007e8 	.word	0x200007e8
 8004828:	e000ed04 	.word	0xe000ed04

0800482c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08a      	sub	sp, #40	@ 0x28
 8004830:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004832:	2300      	movs	r3, #0
 8004834:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800483a:	463a      	mov	r2, r7
 800483c:	1d39      	adds	r1, r7, #4
 800483e:	f107 0308 	add.w	r3, r7, #8
 8004842:	4618      	mov	r0, r3
 8004844:	f7fb feca 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004848:	6839      	ldr	r1, [r7, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	9202      	str	r2, [sp, #8]
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	2300      	movs	r3, #0
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	2300      	movs	r3, #0
 8004858:	460a      	mov	r2, r1
 800485a:	4923      	ldr	r1, [pc, #140]	@ (80048e8 <vTaskStartScheduler+0xbc>)
 800485c:	4823      	ldr	r0, [pc, #140]	@ (80048ec <vTaskStartScheduler+0xc0>)
 800485e:	f7ff fccb 	bl	80041f8 <xTaskCreateStatic>
 8004862:	4603      	mov	r3, r0
 8004864:	4a22      	ldr	r2, [pc, #136]	@ (80048f0 <vTaskStartScheduler+0xc4>)
 8004866:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004868:	4b21      	ldr	r3, [pc, #132]	@ (80048f0 <vTaskStartScheduler+0xc4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004870:	2301      	movs	r3, #1
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e001      	b.n	800487a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d11d      	bne.n	80048bc <vTaskStartScheduler+0x90>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004884:	b672      	cpsid	i
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	b662      	cpsie	i
 8004894:	613b      	str	r3, [r7, #16]
}
 8004896:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004898:	4b16      	ldr	r3, [pc, #88]	@ (80048f4 <vTaskStartScheduler+0xc8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	334c      	adds	r3, #76	@ 0x4c
 800489e:	4a16      	ldr	r2, [pc, #88]	@ (80048f8 <vTaskStartScheduler+0xcc>)
 80048a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048a2:	4b16      	ldr	r3, [pc, #88]	@ (80048fc <vTaskStartScheduler+0xd0>)
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295
 80048a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048aa:	4b15      	ldr	r3, [pc, #84]	@ (8004900 <vTaskStartScheduler+0xd4>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048b0:	4b14      	ldr	r3, [pc, #80]	@ (8004904 <vTaskStartScheduler+0xd8>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048b6:	f000 fc53 	bl	8005160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048ba:	e011      	b.n	80048e0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d10d      	bne.n	80048e0 <vTaskStartScheduler+0xb4>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c8:	b672      	cpsid	i
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	b662      	cpsie	i
 80048d8:	60fb      	str	r3, [r7, #12]
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	e7fd      	b.n	80048dc <vTaskStartScheduler+0xb0>
}
 80048e0:	bf00      	nop
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	08007054 	.word	0x08007054
 80048ec:	08004d75 	.word	0x08004d75
 80048f0:	20000908 	.word	0x20000908
 80048f4:	200007e4 	.word	0x200007e4
 80048f8:	20000028 	.word	0x20000028
 80048fc:	20000904 	.word	0x20000904
 8004900:	200008f0 	.word	0x200008f0
 8004904:	200008e8 	.word	0x200008e8

08004908 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800490c:	4b04      	ldr	r3, [pc, #16]	@ (8004920 <vTaskSuspendAll+0x18>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	4a03      	ldr	r2, [pc, #12]	@ (8004920 <vTaskSuspendAll+0x18>)
 8004914:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004916:	bf00      	nop
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	2000090c 	.word	0x2000090c

08004924 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004932:	4b43      	ldr	r3, [pc, #268]	@ (8004a40 <xTaskResumeAll+0x11c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10d      	bne.n	8004956 <xTaskResumeAll+0x32>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	b672      	cpsid	i
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	b662      	cpsie	i
 800494e:	603b      	str	r3, [r7, #0]
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004956:	f000 fc81 	bl	800525c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800495a:	4b39      	ldr	r3, [pc, #228]	@ (8004a40 <xTaskResumeAll+0x11c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3b01      	subs	r3, #1
 8004960:	4a37      	ldr	r2, [pc, #220]	@ (8004a40 <xTaskResumeAll+0x11c>)
 8004962:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004964:	4b36      	ldr	r3, [pc, #216]	@ (8004a40 <xTaskResumeAll+0x11c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d161      	bne.n	8004a30 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800496c:	4b35      	ldr	r3, [pc, #212]	@ (8004a44 <xTaskResumeAll+0x120>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d05d      	beq.n	8004a30 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004974:	e02e      	b.n	80049d4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004976:	4b34      	ldr	r3, [pc, #208]	@ (8004a48 <xTaskResumeAll+0x124>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3318      	adds	r3, #24
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fb3f 	bl	8004006 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3304      	adds	r3, #4
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff fb3a 	bl	8004006 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004996:	2201      	movs	r2, #1
 8004998:	409a      	lsls	r2, r3
 800499a:	4b2c      	ldr	r3, [pc, #176]	@ (8004a4c <xTaskResumeAll+0x128>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4313      	orrs	r3, r2
 80049a0:	4a2a      	ldr	r2, [pc, #168]	@ (8004a4c <xTaskResumeAll+0x128>)
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4a27      	ldr	r2, [pc, #156]	@ (8004a50 <xTaskResumeAll+0x12c>)
 80049b2:	441a      	add	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f7ff fac6 	bl	8003f4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c4:	4b23      	ldr	r3, [pc, #140]	@ (8004a54 <xTaskResumeAll+0x130>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d302      	bcc.n	80049d4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80049ce:	4b22      	ldr	r3, [pc, #136]	@ (8004a58 <xTaskResumeAll+0x134>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004a48 <xTaskResumeAll+0x124>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1cc      	bne.n	8004976 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049e2:	f000 fa85 	bl	8004ef0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80049e6:	4b1d      	ldr	r3, [pc, #116]	@ (8004a5c <xTaskResumeAll+0x138>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d010      	beq.n	8004a14 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049f2:	f000 f837 	bl	8004a64 <xTaskIncrementTick>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80049fc:	4b16      	ldr	r3, [pc, #88]	@ (8004a58 <xTaskResumeAll+0x134>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f1      	bne.n	80049f2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8004a0e:	4b13      	ldr	r3, [pc, #76]	@ (8004a5c <xTaskResumeAll+0x138>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a14:	4b10      	ldr	r3, [pc, #64]	@ (8004a58 <xTaskResumeAll+0x134>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d009      	beq.n	8004a30 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a20:	4b0f      	ldr	r3, [pc, #60]	@ (8004a60 <xTaskResumeAll+0x13c>)
 8004a22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a30:	f000 fc4a 	bl	80052c8 <vPortExitCritical>

	return xAlreadyYielded;
 8004a34:	68bb      	ldr	r3, [r7, #8]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	2000090c 	.word	0x2000090c
 8004a44:	200008e4 	.word	0x200008e4
 8004a48:	200008a4 	.word	0x200008a4
 8004a4c:	200008ec 	.word	0x200008ec
 8004a50:	200007e8 	.word	0x200007e8
 8004a54:	200007e4 	.word	0x200007e4
 8004a58:	200008f8 	.word	0x200008f8
 8004a5c:	200008f4 	.word	0x200008f4
 8004a60:	e000ed04 	.word	0xe000ed04

08004a64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a6e:	4b50      	ldr	r3, [pc, #320]	@ (8004bb0 <xTaskIncrementTick+0x14c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f040 808b 	bne.w	8004b8e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a78:	4b4e      	ldr	r3, [pc, #312]	@ (8004bb4 <xTaskIncrementTick+0x150>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a80:	4a4c      	ldr	r2, [pc, #304]	@ (8004bb4 <xTaskIncrementTick+0x150>)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d123      	bne.n	8004ad4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8004bb8 <xTaskIncrementTick+0x154>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00d      	beq.n	8004ab2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9a:	b672      	cpsid	i
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	b662      	cpsie	i
 8004aaa:	603b      	str	r3, [r7, #0]
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	e7fd      	b.n	8004aae <xTaskIncrementTick+0x4a>
 8004ab2:	4b41      	ldr	r3, [pc, #260]	@ (8004bb8 <xTaskIncrementTick+0x154>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	4b40      	ldr	r3, [pc, #256]	@ (8004bbc <xTaskIncrementTick+0x158>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a3e      	ldr	r2, [pc, #248]	@ (8004bb8 <xTaskIncrementTick+0x154>)
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	4a3e      	ldr	r2, [pc, #248]	@ (8004bbc <xTaskIncrementTick+0x158>)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8004bc0 <xTaskIncrementTick+0x15c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3301      	adds	r3, #1
 8004acc:	4a3c      	ldr	r2, [pc, #240]	@ (8004bc0 <xTaskIncrementTick+0x15c>)
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	f000 fa0e 	bl	8004ef0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc4 <xTaskIncrementTick+0x160>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d348      	bcc.n	8004b70 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ade:	4b36      	ldr	r3, [pc, #216]	@ (8004bb8 <xTaskIncrementTick+0x154>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d104      	bne.n	8004af2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ae8:	4b36      	ldr	r3, [pc, #216]	@ (8004bc4 <xTaskIncrementTick+0x160>)
 8004aea:	f04f 32ff 	mov.w	r2, #4294967295
 8004aee:	601a      	str	r2, [r3, #0]
					break;
 8004af0:	e03e      	b.n	8004b70 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af2:	4b31      	ldr	r3, [pc, #196]	@ (8004bb8 <xTaskIncrementTick+0x154>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d203      	bcs.n	8004b12 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc4 <xTaskIncrementTick+0x160>)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b10:	e02e      	b.n	8004b70 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	3304      	adds	r3, #4
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fa75 	bl	8004006 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	3318      	adds	r3, #24
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff fa6c 	bl	8004006 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b32:	2201      	movs	r2, #1
 8004b34:	409a      	lsls	r2, r3
 8004b36:	4b24      	ldr	r3, [pc, #144]	@ (8004bc8 <xTaskIncrementTick+0x164>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	4a22      	ldr	r2, [pc, #136]	@ (8004bc8 <xTaskIncrementTick+0x164>)
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bcc <xTaskIncrementTick+0x168>)
 8004b4e:	441a      	add	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4610      	mov	r0, r2
 8004b58:	f7ff f9f8 	bl	8003f4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b60:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd0 <xTaskIncrementTick+0x16c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d3b9      	bcc.n	8004ade <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b6e:	e7b6      	b.n	8004ade <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b70:	4b17      	ldr	r3, [pc, #92]	@ (8004bd0 <xTaskIncrementTick+0x16c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b76:	4915      	ldr	r1, [pc, #84]	@ (8004bcc <xTaskIncrementTick+0x168>)
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d907      	bls.n	8004b98 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e004      	b.n	8004b98 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004b8e:	4b11      	ldr	r3, [pc, #68]	@ (8004bd4 <xTaskIncrementTick+0x170>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	4a0f      	ldr	r2, [pc, #60]	@ (8004bd4 <xTaskIncrementTick+0x170>)
 8004b96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004b98:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd8 <xTaskIncrementTick+0x174>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ba4:	697b      	ldr	r3, [r7, #20]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	2000090c 	.word	0x2000090c
 8004bb4:	200008e8 	.word	0x200008e8
 8004bb8:	2000089c 	.word	0x2000089c
 8004bbc:	200008a0 	.word	0x200008a0
 8004bc0:	200008fc 	.word	0x200008fc
 8004bc4:	20000904 	.word	0x20000904
 8004bc8:	200008ec 	.word	0x200008ec
 8004bcc:	200007e8 	.word	0x200007e8
 8004bd0:	200007e4 	.word	0x200007e4
 8004bd4:	200008f4 	.word	0x200008f4
 8004bd8:	200008f8 	.word	0x200008f8

08004bdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004be2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c90 <vTaskSwitchContext+0xb4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bea:	4b2a      	ldr	r3, [pc, #168]	@ (8004c94 <vTaskSwitchContext+0xb8>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004bf0:	e047      	b.n	8004c82 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004bf2:	4b28      	ldr	r3, [pc, #160]	@ (8004c94 <vTaskSwitchContext+0xb8>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf8:	4b27      	ldr	r3, [pc, #156]	@ (8004c98 <vTaskSwitchContext+0xbc>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	fab3 f383 	clz	r3, r3
 8004c04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c06:	7afb      	ldrb	r3, [r7, #11]
 8004c08:	f1c3 031f 	rsb	r3, r3, #31
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	4923      	ldr	r1, [pc, #140]	@ (8004c9c <vTaskSwitchContext+0xc0>)
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10d      	bne.n	8004c3e <vTaskSwitchContext+0x62>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	b672      	cpsid	i
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	b662      	cpsie	i
 8004c36:	607b      	str	r3, [r7, #4]
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	e7fd      	b.n	8004c3a <vTaskSwitchContext+0x5e>
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4a14      	ldr	r2, [pc, #80]	@ (8004c9c <vTaskSwitchContext+0xc0>)
 8004c4a:	4413      	add	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	605a      	str	r2, [r3, #4]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d104      	bne.n	8004c6e <vTaskSwitchContext+0x92>
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	605a      	str	r2, [r3, #4]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca0 <vTaskSwitchContext+0xc4>)
 8004c76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c78:	4b09      	ldr	r3, [pc, #36]	@ (8004ca0 <vTaskSwitchContext+0xc4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	334c      	adds	r3, #76	@ 0x4c
 8004c7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ca4 <vTaskSwitchContext+0xc8>)
 8004c80:	6013      	str	r3, [r2, #0]
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	2000090c 	.word	0x2000090c
 8004c94:	200008f8 	.word	0x200008f8
 8004c98:	200008ec 	.word	0x200008ec
 8004c9c:	200007e8 	.word	0x200007e8
 8004ca0:	200007e4 	.word	0x200007e4
 8004ca4:	20000028 	.word	0x20000028

08004ca8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10d      	bne.n	8004cda <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc2:	b672      	cpsid	i
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	b662      	cpsie	i
 8004cd2:	60fb      	str	r3, [r7, #12]
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	e7fd      	b.n	8004cd6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	3318      	adds	r3, #24
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff f991 	bl	8004006 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d5c <xTaskRemoveFromEventList+0xb4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d11c      	bne.n	8004d26 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff f988 	bl	8004006 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	4b18      	ldr	r3, [pc, #96]	@ (8004d60 <xTaskRemoveFromEventList+0xb8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	4a16      	ldr	r2, [pc, #88]	@ (8004d60 <xTaskRemoveFromEventList+0xb8>)
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4a13      	ldr	r2, [pc, #76]	@ (8004d64 <xTaskRemoveFromEventList+0xbc>)
 8004d16:	441a      	add	r2, r3
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f7ff f914 	bl	8003f4c <vListInsertEnd>
 8004d24:	e005      	b.n	8004d32 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	3318      	adds	r3, #24
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	480e      	ldr	r0, [pc, #56]	@ (8004d68 <xTaskRemoveFromEventList+0xc0>)
 8004d2e:	f7ff f90d 	bl	8003f4c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d36:	4b0d      	ldr	r3, [pc, #52]	@ (8004d6c <xTaskRemoveFromEventList+0xc4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d905      	bls.n	8004d4c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d40:	2301      	movs	r3, #1
 8004d42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d44:	4b0a      	ldr	r3, [pc, #40]	@ (8004d70 <xTaskRemoveFromEventList+0xc8>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	e001      	b.n	8004d50 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d50:	697b      	ldr	r3, [r7, #20]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	2000090c 	.word	0x2000090c
 8004d60:	200008ec 	.word	0x200008ec
 8004d64:	200007e8 	.word	0x200007e8
 8004d68:	200008a4 	.word	0x200008a4
 8004d6c:	200007e4 	.word	0x200007e4
 8004d70:	200008f8 	.word	0x200008f8

08004d74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d7c:	f000 f852 	bl	8004e24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d80:	4b06      	ldr	r3, [pc, #24]	@ (8004d9c <prvIdleTask+0x28>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d9f9      	bls.n	8004d7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d88:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <prvIdleTask+0x2c>)
 8004d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d98:	e7f0      	b.n	8004d7c <prvIdleTask+0x8>
 8004d9a:	bf00      	nop
 8004d9c:	200007e8 	.word	0x200007e8
 8004da0:	e000ed04 	.word	0xe000ed04

08004da4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004daa:	2300      	movs	r3, #0
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	e00c      	b.n	8004dca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4a12      	ldr	r2, [pc, #72]	@ (8004e04 <prvInitialiseTaskLists+0x60>)
 8004dbc:	4413      	add	r3, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff f897 	bl	8003ef2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b06      	cmp	r3, #6
 8004dce:	d9ef      	bls.n	8004db0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004dd0:	480d      	ldr	r0, [pc, #52]	@ (8004e08 <prvInitialiseTaskLists+0x64>)
 8004dd2:	f7ff f88e 	bl	8003ef2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dd6:	480d      	ldr	r0, [pc, #52]	@ (8004e0c <prvInitialiseTaskLists+0x68>)
 8004dd8:	f7ff f88b 	bl	8003ef2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ddc:	480c      	ldr	r0, [pc, #48]	@ (8004e10 <prvInitialiseTaskLists+0x6c>)
 8004dde:	f7ff f888 	bl	8003ef2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004de2:	480c      	ldr	r0, [pc, #48]	@ (8004e14 <prvInitialiseTaskLists+0x70>)
 8004de4:	f7ff f885 	bl	8003ef2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004de8:	480b      	ldr	r0, [pc, #44]	@ (8004e18 <prvInitialiseTaskLists+0x74>)
 8004dea:	f7ff f882 	bl	8003ef2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dee:	4b0b      	ldr	r3, [pc, #44]	@ (8004e1c <prvInitialiseTaskLists+0x78>)
 8004df0:	4a05      	ldr	r2, [pc, #20]	@ (8004e08 <prvInitialiseTaskLists+0x64>)
 8004df2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004df4:	4b0a      	ldr	r3, [pc, #40]	@ (8004e20 <prvInitialiseTaskLists+0x7c>)
 8004df6:	4a05      	ldr	r2, [pc, #20]	@ (8004e0c <prvInitialiseTaskLists+0x68>)
 8004df8:	601a      	str	r2, [r3, #0]
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	200007e8 	.word	0x200007e8
 8004e08:	20000874 	.word	0x20000874
 8004e0c:	20000888 	.word	0x20000888
 8004e10:	200008a4 	.word	0x200008a4
 8004e14:	200008b8 	.word	0x200008b8
 8004e18:	200008d0 	.word	0x200008d0
 8004e1c:	2000089c 	.word	0x2000089c
 8004e20:	200008a0 	.word	0x200008a0

08004e24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e2a:	e019      	b.n	8004e60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e2c:	f000 fa16 	bl	800525c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e30:	4b10      	ldr	r3, [pc, #64]	@ (8004e74 <prvCheckTasksWaitingTermination+0x50>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff f8e2 	bl	8004006 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e42:	4b0d      	ldr	r3, [pc, #52]	@ (8004e78 <prvCheckTasksWaitingTermination+0x54>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	4a0b      	ldr	r2, [pc, #44]	@ (8004e78 <prvCheckTasksWaitingTermination+0x54>)
 8004e4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e7c <prvCheckTasksWaitingTermination+0x58>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	4a0a      	ldr	r2, [pc, #40]	@ (8004e7c <prvCheckTasksWaitingTermination+0x58>)
 8004e54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e56:	f000 fa37 	bl	80052c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f810 	bl	8004e80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e60:	4b06      	ldr	r3, [pc, #24]	@ (8004e7c <prvCheckTasksWaitingTermination+0x58>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e1      	bne.n	8004e2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	200008b8 	.word	0x200008b8
 8004e78:	200008e4 	.word	0x200008e4
 8004e7c:	200008cc 	.word	0x200008cc

08004e80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	334c      	adds	r3, #76	@ 0x4c
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f001 f855 	bl	8005f3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d108      	bne.n	8004eae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fb91 	bl	80055c8 <vPortFree>
				vPortFree( pxTCB );
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fb8e 	bl	80055c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004eac:	e01b      	b.n	8004ee6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d103      	bne.n	8004ec0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fb85 	bl	80055c8 <vPortFree>
	}
 8004ebe:	e012      	b.n	8004ee6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d00d      	beq.n	8004ee6 <prvDeleteTCB+0x66>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ece:	b672      	cpsid	i
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	b662      	cpsie	i
 8004ede:	60fb      	str	r3, [r7, #12]
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	e7fd      	b.n	8004ee2 <prvDeleteTCB+0x62>
	}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f28 <prvResetNextTaskUnblockTime+0x38>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d104      	bne.n	8004f0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f00:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <prvResetNextTaskUnblockTime+0x3c>)
 8004f02:	f04f 32ff 	mov.w	r2, #4294967295
 8004f06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f08:	e008      	b.n	8004f1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0a:	4b07      	ldr	r3, [pc, #28]	@ (8004f28 <prvResetNextTaskUnblockTime+0x38>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	4a04      	ldr	r2, [pc, #16]	@ (8004f2c <prvResetNextTaskUnblockTime+0x3c>)
 8004f1a:	6013      	str	r3, [r2, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	2000089c 	.word	0x2000089c
 8004f2c:	20000904 	.word	0x20000904

08004f30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f36:	4b0b      	ldr	r3, [pc, #44]	@ (8004f64 <xTaskGetSchedulerState+0x34>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	607b      	str	r3, [r7, #4]
 8004f42:	e008      	b.n	8004f56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f44:	4b08      	ldr	r3, [pc, #32]	@ (8004f68 <xTaskGetSchedulerState+0x38>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	607b      	str	r3, [r7, #4]
 8004f50:	e001      	b.n	8004f56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f56:	687b      	ldr	r3, [r7, #4]
	}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	200008f0 	.word	0x200008f0
 8004f68:	2000090c 	.word	0x2000090c

08004f6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f76:	4b29      	ldr	r3, [pc, #164]	@ (800501c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f7c:	4b28      	ldr	r3, [pc, #160]	@ (8005020 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3304      	adds	r3, #4
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff f83f 	bl	8004006 <uxListRemove>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10b      	bne.n	8004fa6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f8e:	4b24      	ldr	r3, [pc, #144]	@ (8005020 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	2201      	movs	r2, #1
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43da      	mvns	r2, r3
 8004f9c:	4b21      	ldr	r3, [pc, #132]	@ (8005024 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	4a20      	ldr	r2, [pc, #128]	@ (8005024 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fa4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d10a      	bne.n	8004fc4 <prvAddCurrentTaskToDelayedList+0x58>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005020 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4619      	mov	r1, r3
 8004fbc:	481a      	ldr	r0, [pc, #104]	@ (8005028 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004fbe:	f7fe ffc5 	bl	8003f4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fc2:	e026      	b.n	8005012 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4413      	add	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fcc:	4b14      	ldr	r3, [pc, #80]	@ (8005020 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d209      	bcs.n	8004ff0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fdc:	4b13      	ldr	r3, [pc, #76]	@ (800502c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8005020 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f7fe ffd3 	bl	8003f94 <vListInsert>
}
 8004fee:	e010      	b.n	8005012 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8005030 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8005020 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	f7fe ffc9 	bl	8003f94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005002:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	429a      	cmp	r2, r3
 800500a:	d202      	bcs.n	8005012 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800500c:	4a09      	ldr	r2, [pc, #36]	@ (8005034 <prvAddCurrentTaskToDelayedList+0xc8>)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	6013      	str	r3, [r2, #0]
}
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	200008e8 	.word	0x200008e8
 8005020:	200007e4 	.word	0x200007e4
 8005024:	200008ec 	.word	0x200008ec
 8005028:	200008d0 	.word	0x200008d0
 800502c:	200008a0 	.word	0x200008a0
 8005030:	2000089c 	.word	0x2000089c
 8005034:	20000904 	.word	0x20000904

08005038 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3b04      	subs	r3, #4
 8005048:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3b04      	subs	r3, #4
 8005056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f023 0201 	bic.w	r2, r3, #1
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3b04      	subs	r3, #4
 8005066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005068:	4a0c      	ldr	r2, [pc, #48]	@ (800509c <pxPortInitialiseStack+0x64>)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3b14      	subs	r3, #20
 8005072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3b04      	subs	r3, #4
 800507e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f06f 0202 	mvn.w	r2, #2
 8005086:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3b20      	subs	r3, #32
 800508c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800508e:	68fb      	ldr	r3, [r7, #12]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	080050a1 	.word	0x080050a1

080050a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050aa:	4b15      	ldr	r3, [pc, #84]	@ (8005100 <prvTaskExitError+0x60>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	d00d      	beq.n	80050d0 <prvTaskExitError+0x30>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b8:	b672      	cpsid	i
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	b662      	cpsie	i
 80050c8:	60fb      	str	r3, [r7, #12]
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	e7fd      	b.n	80050cc <prvTaskExitError+0x2c>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d4:	b672      	cpsid	i
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	b662      	cpsie	i
 80050e4:	60bb      	str	r3, [r7, #8]
}
 80050e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050e8:	bf00      	nop
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0fc      	beq.n	80050ea <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20000018 	.word	0x20000018
	...

08005110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005110:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <pxCurrentTCBConst2>)
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	6808      	ldr	r0, [r1, #0]
 8005116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511a:	f380 8809 	msr	PSP, r0
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f04f 0000 	mov.w	r0, #0
 8005126:	f380 8811 	msr	BASEPRI, r0
 800512a:	4770      	bx	lr
 800512c:	f3af 8000 	nop.w

08005130 <pxCurrentTCBConst2>:
 8005130:	200007e4 	.word	0x200007e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop

08005138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005138:	4808      	ldr	r0, [pc, #32]	@ (800515c <prvPortStartFirstTask+0x24>)
 800513a:	6800      	ldr	r0, [r0, #0]
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f380 8808 	msr	MSP, r0
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8814 	msr	CONTROL, r0
 800514a:	b662      	cpsie	i
 800514c:	b661      	cpsie	f
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	df00      	svc	0
 8005158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800515a:	bf00      	nop
 800515c:	e000ed08 	.word	0xe000ed08

08005160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005166:	4b37      	ldr	r3, [pc, #220]	@ (8005244 <xPortStartScheduler+0xe4>)
 8005168:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	22ff      	movs	r2, #255	@ 0xff
 8005176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005188:	b2da      	uxtb	r2, r3
 800518a:	4b2f      	ldr	r3, [pc, #188]	@ (8005248 <xPortStartScheduler+0xe8>)
 800518c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800518e:	4b2f      	ldr	r3, [pc, #188]	@ (800524c <xPortStartScheduler+0xec>)
 8005190:	2207      	movs	r2, #7
 8005192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005194:	e009      	b.n	80051aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005196:	4b2d      	ldr	r3, [pc, #180]	@ (800524c <xPortStartScheduler+0xec>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3b01      	subs	r3, #1
 800519c:	4a2b      	ldr	r2, [pc, #172]	@ (800524c <xPortStartScheduler+0xec>)
 800519e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b2:	2b80      	cmp	r3, #128	@ 0x80
 80051b4:	d0ef      	beq.n	8005196 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051b6:	4b25      	ldr	r3, [pc, #148]	@ (800524c <xPortStartScheduler+0xec>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f1c3 0307 	rsb	r3, r3, #7
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d00d      	beq.n	80051de <xPortStartScheduler+0x7e>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c6:	b672      	cpsid	i
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	b662      	cpsie	i
 80051d6:	60bb      	str	r3, [r7, #8]
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	e7fd      	b.n	80051da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051de:	4b1b      	ldr	r3, [pc, #108]	@ (800524c <xPortStartScheduler+0xec>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	4a19      	ldr	r2, [pc, #100]	@ (800524c <xPortStartScheduler+0xec>)
 80051e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051e8:	4b18      	ldr	r3, [pc, #96]	@ (800524c <xPortStartScheduler+0xec>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051f0:	4a16      	ldr	r2, [pc, #88]	@ (800524c <xPortStartScheduler+0xec>)
 80051f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051fc:	4b14      	ldr	r3, [pc, #80]	@ (8005250 <xPortStartScheduler+0xf0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a13      	ldr	r2, [pc, #76]	@ (8005250 <xPortStartScheduler+0xf0>)
 8005202:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005206:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005208:	4b11      	ldr	r3, [pc, #68]	@ (8005250 <xPortStartScheduler+0xf0>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a10      	ldr	r2, [pc, #64]	@ (8005250 <xPortStartScheduler+0xf0>)
 800520e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005212:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005214:	f000 f8dc 	bl	80053d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005218:	4b0e      	ldr	r3, [pc, #56]	@ (8005254 <xPortStartScheduler+0xf4>)
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800521e:	f000 f8fb 	bl	8005418 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005222:	4b0d      	ldr	r3, [pc, #52]	@ (8005258 <xPortStartScheduler+0xf8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a0c      	ldr	r2, [pc, #48]	@ (8005258 <xPortStartScheduler+0xf8>)
 8005228:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800522c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800522e:	f7ff ff83 	bl	8005138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005232:	f7ff fcd3 	bl	8004bdc <vTaskSwitchContext>
	prvTaskExitError();
 8005236:	f7ff ff33 	bl	80050a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	e000e400 	.word	0xe000e400
 8005248:	20000910 	.word	0x20000910
 800524c:	20000914 	.word	0x20000914
 8005250:	e000ed20 	.word	0xe000ed20
 8005254:	20000018 	.word	0x20000018
 8005258:	e000ef34 	.word	0xe000ef34

0800525c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005266:	b672      	cpsid	i
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	b662      	cpsie	i
 8005276:	607b      	str	r3, [r7, #4]
}
 8005278:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800527a:	4b11      	ldr	r3, [pc, #68]	@ (80052c0 <vPortEnterCritical+0x64>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3301      	adds	r3, #1
 8005280:	4a0f      	ldr	r2, [pc, #60]	@ (80052c0 <vPortEnterCritical+0x64>)
 8005282:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005284:	4b0e      	ldr	r3, [pc, #56]	@ (80052c0 <vPortEnterCritical+0x64>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d112      	bne.n	80052b2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800528c:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <vPortEnterCritical+0x68>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00d      	beq.n	80052b2 <vPortEnterCritical+0x56>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529a:	b672      	cpsid	i
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	b662      	cpsie	i
 80052aa:	603b      	str	r3, [r7, #0]
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	e7fd      	b.n	80052ae <vPortEnterCritical+0x52>
	}
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000018 	.word	0x20000018
 80052c4:	e000ed04 	.word	0xe000ed04

080052c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052ce:	4b13      	ldr	r3, [pc, #76]	@ (800531c <vPortExitCritical+0x54>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10d      	bne.n	80052f2 <vPortExitCritical+0x2a>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	b672      	cpsid	i
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	b662      	cpsie	i
 80052ea:	607b      	str	r3, [r7, #4]
}
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
 80052f0:	e7fd      	b.n	80052ee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80052f2:	4b0a      	ldr	r3, [pc, #40]	@ (800531c <vPortExitCritical+0x54>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	4a08      	ldr	r2, [pc, #32]	@ (800531c <vPortExitCritical+0x54>)
 80052fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052fc:	4b07      	ldr	r3, [pc, #28]	@ (800531c <vPortExitCritical+0x54>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d105      	bne.n	8005310 <vPortExitCritical+0x48>
 8005304:	2300      	movs	r3, #0
 8005306:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800530e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	20000018 	.word	0x20000018

08005320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005320:	f3ef 8009 	mrs	r0, PSP
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	4b15      	ldr	r3, [pc, #84]	@ (8005380 <pxCurrentTCBConst>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	f01e 0f10 	tst.w	lr, #16
 8005330:	bf08      	it	eq
 8005332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533a:	6010      	str	r0, [r2, #0]
 800533c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005340:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005344:	b672      	cpsid	i
 8005346:	f380 8811 	msr	BASEPRI, r0
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	b662      	cpsie	i
 8005354:	f7ff fc42 	bl	8004bdc <vTaskSwitchContext>
 8005358:	f04f 0000 	mov.w	r0, #0
 800535c:	f380 8811 	msr	BASEPRI, r0
 8005360:	bc09      	pop	{r0, r3}
 8005362:	6819      	ldr	r1, [r3, #0]
 8005364:	6808      	ldr	r0, [r1, #0]
 8005366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536a:	f01e 0f10 	tst.w	lr, #16
 800536e:	bf08      	it	eq
 8005370:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005374:	f380 8809 	msr	PSP, r0
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop

08005380 <pxCurrentTCBConst>:
 8005380:	200007e4 	.word	0x200007e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop

08005388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	b672      	cpsid	i
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	b662      	cpsie	i
 80053a2:	607b      	str	r3, [r7, #4]
}
 80053a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053a6:	f7ff fb5d 	bl	8004a64 <xTaskIncrementTick>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053b0:	4b06      	ldr	r3, [pc, #24]	@ (80053cc <xPortSysTickHandler+0x44>)
 80053b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	2300      	movs	r3, #0
 80053ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	f383 8811 	msr	BASEPRI, r3
}
 80053c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	e000ed04 	.word	0xe000ed04

080053d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <vPortSetupTimerInterrupt+0x34>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053da:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <vPortSetupTimerInterrupt+0x38>)
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053e0:	4b0a      	ldr	r3, [pc, #40]	@ (800540c <vPortSetupTimerInterrupt+0x3c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005410 <vPortSetupTimerInterrupt+0x40>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	099b      	lsrs	r3, r3, #6
 80053ec:	4a09      	ldr	r2, [pc, #36]	@ (8005414 <vPortSetupTimerInterrupt+0x44>)
 80053ee:	3b01      	subs	r3, #1
 80053f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053f2:	4b04      	ldr	r3, [pc, #16]	@ (8005404 <vPortSetupTimerInterrupt+0x34>)
 80053f4:	2207      	movs	r2, #7
 80053f6:	601a      	str	r2, [r3, #0]
}
 80053f8:	bf00      	nop
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	e000e010 	.word	0xe000e010
 8005408:	e000e018 	.word	0xe000e018
 800540c:	2000000c 	.word	0x2000000c
 8005410:	10624dd3 	.word	0x10624dd3
 8005414:	e000e014 	.word	0xe000e014

08005418 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005418:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005428 <vPortEnableVFP+0x10>
 800541c:	6801      	ldr	r1, [r0, #0]
 800541e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005422:	6001      	str	r1, [r0, #0]
 8005424:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005426:	bf00      	nop
 8005428:	e000ed88 	.word	0xe000ed88

0800542c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	@ 0x28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005434:	2300      	movs	r3, #0
 8005436:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005438:	f7ff fa66 	bl	8004908 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800543c:	4b5d      	ldr	r3, [pc, #372]	@ (80055b4 <pvPortMalloc+0x188>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005444:	f000 f920 	bl	8005688 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005448:	4b5b      	ldr	r3, [pc, #364]	@ (80055b8 <pvPortMalloc+0x18c>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4013      	ands	r3, r2
 8005450:	2b00      	cmp	r3, #0
 8005452:	f040 8094 	bne.w	800557e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d020      	beq.n	800549e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800545c:	2208      	movs	r2, #8
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4413      	add	r3, r2
 8005462:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	2b00      	cmp	r3, #0
 800546c:	d017      	beq.n	800549e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f023 0307 	bic.w	r3, r3, #7
 8005474:	3308      	adds	r3, #8
 8005476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <pvPortMalloc+0x72>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005486:	b672      	cpsid	i
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	b662      	cpsie	i
 8005496:	617b      	str	r3, [r7, #20]
}
 8005498:	bf00      	nop
 800549a:	bf00      	nop
 800549c:	e7fd      	b.n	800549a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d06c      	beq.n	800557e <pvPortMalloc+0x152>
 80054a4:	4b45      	ldr	r3, [pc, #276]	@ (80055bc <pvPortMalloc+0x190>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d867      	bhi.n	800557e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054ae:	4b44      	ldr	r3, [pc, #272]	@ (80055c0 <pvPortMalloc+0x194>)
 80054b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054b2:	4b43      	ldr	r3, [pc, #268]	@ (80055c0 <pvPortMalloc+0x194>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054b8:	e004      	b.n	80054c4 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d903      	bls.n	80054d6 <pvPortMalloc+0xaa>
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f1      	bne.n	80054ba <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054d6:	4b37      	ldr	r3, [pc, #220]	@ (80055b4 <pvPortMalloc+0x188>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054dc:	429a      	cmp	r2, r3
 80054de:	d04e      	beq.n	800557e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2208      	movs	r2, #8
 80054e6:	4413      	add	r3, r2
 80054e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	1ad2      	subs	r2, r2, r3
 80054fa:	2308      	movs	r3, #8
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	429a      	cmp	r2, r3
 8005500:	d922      	bls.n	8005548 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4413      	add	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00d      	beq.n	8005530 <pvPortMalloc+0x104>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	b672      	cpsid	i
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	b662      	cpsie	i
 8005528:	613b      	str	r3, [r7, #16]
}
 800552a:	bf00      	nop
 800552c:	bf00      	nop
 800552e:	e7fd      	b.n	800552c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	1ad2      	subs	r2, r2, r3
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005542:	69b8      	ldr	r0, [r7, #24]
 8005544:	f000 f902 	bl	800574c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005548:	4b1c      	ldr	r3, [pc, #112]	@ (80055bc <pvPortMalloc+0x190>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	4a1a      	ldr	r2, [pc, #104]	@ (80055bc <pvPortMalloc+0x190>)
 8005554:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005556:	4b19      	ldr	r3, [pc, #100]	@ (80055bc <pvPortMalloc+0x190>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4b1a      	ldr	r3, [pc, #104]	@ (80055c4 <pvPortMalloc+0x198>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d203      	bcs.n	800556a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005562:	4b16      	ldr	r3, [pc, #88]	@ (80055bc <pvPortMalloc+0x190>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a17      	ldr	r2, [pc, #92]	@ (80055c4 <pvPortMalloc+0x198>)
 8005568:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	4b12      	ldr	r3, [pc, #72]	@ (80055b8 <pvPortMalloc+0x18c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	431a      	orrs	r2, r3
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800557e:	f7ff f9d1 	bl	8004924 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00d      	beq.n	80055a8 <pvPortMalloc+0x17c>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005590:	b672      	cpsid	i
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	b662      	cpsie	i
 80055a0:	60fb      	str	r3, [r7, #12]
}
 80055a2:	bf00      	nop
 80055a4:	bf00      	nop
 80055a6:	e7fd      	b.n	80055a4 <pvPortMalloc+0x178>
	return pvReturn;
 80055a8:	69fb      	ldr	r3, [r7, #28]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3728      	adds	r7, #40	@ 0x28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20008120 	.word	0x20008120
 80055b8:	2000812c 	.word	0x2000812c
 80055bc:	20008124 	.word	0x20008124
 80055c0:	20008118 	.word	0x20008118
 80055c4:	20008128 	.word	0x20008128

080055c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d04e      	beq.n	8005678 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055da:	2308      	movs	r3, #8
 80055dc:	425b      	negs	r3, r3
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4413      	add	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	4b24      	ldr	r3, [pc, #144]	@ (8005680 <vPortFree+0xb8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10d      	bne.n	8005612 <vPortFree+0x4a>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fa:	b672      	cpsid	i
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	b662      	cpsie	i
 800560a:	60fb      	str	r3, [r7, #12]
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	e7fd      	b.n	800560e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00d      	beq.n	8005636 <vPortFree+0x6e>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561e:	b672      	cpsid	i
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	b662      	cpsie	i
 800562e:	60bb      	str	r3, [r7, #8]
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	4b11      	ldr	r3, [pc, #68]	@ (8005680 <vPortFree+0xb8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d019      	beq.n	8005678 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d115      	bne.n	8005678 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	4b0b      	ldr	r3, [pc, #44]	@ (8005680 <vPortFree+0xb8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	43db      	mvns	r3, r3
 8005656:	401a      	ands	r2, r3
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800565c:	f7ff f954 	bl	8004908 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	4b07      	ldr	r3, [pc, #28]	@ (8005684 <vPortFree+0xbc>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4413      	add	r3, r2
 800566a:	4a06      	ldr	r2, [pc, #24]	@ (8005684 <vPortFree+0xbc>)
 800566c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800566e:	6938      	ldr	r0, [r7, #16]
 8005670:	f000 f86c 	bl	800574c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005674:	f7ff f956 	bl	8004924 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005678:	bf00      	nop
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	2000812c 	.word	0x2000812c
 8005684:	20008124 	.word	0x20008124

08005688 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800568e:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8005692:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005694:	4b27      	ldr	r3, [pc, #156]	@ (8005734 <prvHeapInit+0xac>)
 8005696:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3307      	adds	r3, #7
 80056a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0307 	bic.w	r3, r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005734 <prvHeapInit+0xac>)
 80056b8:	4413      	add	r3, r2
 80056ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005738 <prvHeapInit+0xb0>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005738 <prvHeapInit+0xb0>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	4413      	add	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056d4:	2208      	movs	r2, #8
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0307 	bic.w	r3, r3, #7
 80056e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4a15      	ldr	r2, [pc, #84]	@ (800573c <prvHeapInit+0xb4>)
 80056e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056ea:	4b14      	ldr	r3, [pc, #80]	@ (800573c <prvHeapInit+0xb4>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2200      	movs	r2, #0
 80056f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056f2:	4b12      	ldr	r3, [pc, #72]	@ (800573c <prvHeapInit+0xb4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	1ad2      	subs	r2, r2, r3
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005708:	4b0c      	ldr	r3, [pc, #48]	@ (800573c <prvHeapInit+0xb4>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	4a0a      	ldr	r2, [pc, #40]	@ (8005740 <prvHeapInit+0xb8>)
 8005716:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	4a09      	ldr	r2, [pc, #36]	@ (8005744 <prvHeapInit+0xbc>)
 800571e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005720:	4b09      	ldr	r3, [pc, #36]	@ (8005748 <prvHeapInit+0xc0>)
 8005722:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005726:	601a      	str	r2, [r3, #0]
}
 8005728:	bf00      	nop
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	20000918 	.word	0x20000918
 8005738:	20008118 	.word	0x20008118
 800573c:	20008120 	.word	0x20008120
 8005740:	20008128 	.word	0x20008128
 8005744:	20008124 	.word	0x20008124
 8005748:	2000812c 	.word	0x2000812c

0800574c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005754:	4b28      	ldr	r3, [pc, #160]	@ (80057f8 <prvInsertBlockIntoFreeList+0xac>)
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e002      	b.n	8005760 <prvInsertBlockIntoFreeList+0x14>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	d8f7      	bhi.n	800575a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	4413      	add	r3, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	429a      	cmp	r2, r3
 800577a:	d108      	bne.n	800578e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	441a      	add	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	441a      	add	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d118      	bne.n	80057d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	4b15      	ldr	r3, [pc, #84]	@ (80057fc <prvInsertBlockIntoFreeList+0xb0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d00d      	beq.n	80057ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	441a      	add	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	e008      	b.n	80057dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057ca:	4b0c      	ldr	r3, [pc, #48]	@ (80057fc <prvInsertBlockIntoFreeList+0xb0>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e003      	b.n	80057dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d002      	beq.n	80057ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	20008118 	.word	0x20008118
 80057fc:	20008120 	.word	0x20008120

08005800 <atoi>:
 8005800:	220a      	movs	r2, #10
 8005802:	2100      	movs	r1, #0
 8005804:	f000 b938 	b.w	8005a78 <strtol>

08005808 <malloc>:
 8005808:	4b02      	ldr	r3, [pc, #8]	@ (8005814 <malloc+0xc>)
 800580a:	4601      	mov	r1, r0
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	f000 b82d 	b.w	800586c <_malloc_r>
 8005812:	bf00      	nop
 8005814:	20000028 	.word	0x20000028

08005818 <free>:
 8005818:	4b02      	ldr	r3, [pc, #8]	@ (8005824 <free+0xc>)
 800581a:	4601      	mov	r1, r0
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	f000 bc6d 	b.w	80060fc <_free_r>
 8005822:	bf00      	nop
 8005824:	20000028 	.word	0x20000028

08005828 <sbrk_aligned>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	4e0f      	ldr	r6, [pc, #60]	@ (8005868 <sbrk_aligned+0x40>)
 800582c:	460c      	mov	r4, r1
 800582e:	6831      	ldr	r1, [r6, #0]
 8005830:	4605      	mov	r5, r0
 8005832:	b911      	cbnz	r1, 800583a <sbrk_aligned+0x12>
 8005834:	f000 fc04 	bl	8006040 <_sbrk_r>
 8005838:	6030      	str	r0, [r6, #0]
 800583a:	4621      	mov	r1, r4
 800583c:	4628      	mov	r0, r5
 800583e:	f000 fbff 	bl	8006040 <_sbrk_r>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	d103      	bne.n	800584e <sbrk_aligned+0x26>
 8005846:	f04f 34ff 	mov.w	r4, #4294967295
 800584a:	4620      	mov	r0, r4
 800584c:	bd70      	pop	{r4, r5, r6, pc}
 800584e:	1cc4      	adds	r4, r0, #3
 8005850:	f024 0403 	bic.w	r4, r4, #3
 8005854:	42a0      	cmp	r0, r4
 8005856:	d0f8      	beq.n	800584a <sbrk_aligned+0x22>
 8005858:	1a21      	subs	r1, r4, r0
 800585a:	4628      	mov	r0, r5
 800585c:	f000 fbf0 	bl	8006040 <_sbrk_r>
 8005860:	3001      	adds	r0, #1
 8005862:	d1f2      	bne.n	800584a <sbrk_aligned+0x22>
 8005864:	e7ef      	b.n	8005846 <sbrk_aligned+0x1e>
 8005866:	bf00      	nop
 8005868:	20008130 	.word	0x20008130

0800586c <_malloc_r>:
 800586c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005870:	1ccd      	adds	r5, r1, #3
 8005872:	f025 0503 	bic.w	r5, r5, #3
 8005876:	3508      	adds	r5, #8
 8005878:	2d0c      	cmp	r5, #12
 800587a:	bf38      	it	cc
 800587c:	250c      	movcc	r5, #12
 800587e:	2d00      	cmp	r5, #0
 8005880:	4606      	mov	r6, r0
 8005882:	db01      	blt.n	8005888 <_malloc_r+0x1c>
 8005884:	42a9      	cmp	r1, r5
 8005886:	d904      	bls.n	8005892 <_malloc_r+0x26>
 8005888:	230c      	movs	r3, #12
 800588a:	6033      	str	r3, [r6, #0]
 800588c:	2000      	movs	r0, #0
 800588e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005892:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005968 <_malloc_r+0xfc>
 8005896:	f000 f869 	bl	800596c <__malloc_lock>
 800589a:	f8d8 3000 	ldr.w	r3, [r8]
 800589e:	461c      	mov	r4, r3
 80058a0:	bb44      	cbnz	r4, 80058f4 <_malloc_r+0x88>
 80058a2:	4629      	mov	r1, r5
 80058a4:	4630      	mov	r0, r6
 80058a6:	f7ff ffbf 	bl	8005828 <sbrk_aligned>
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	4604      	mov	r4, r0
 80058ae:	d158      	bne.n	8005962 <_malloc_r+0xf6>
 80058b0:	f8d8 4000 	ldr.w	r4, [r8]
 80058b4:	4627      	mov	r7, r4
 80058b6:	2f00      	cmp	r7, #0
 80058b8:	d143      	bne.n	8005942 <_malloc_r+0xd6>
 80058ba:	2c00      	cmp	r4, #0
 80058bc:	d04b      	beq.n	8005956 <_malloc_r+0xea>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	4639      	mov	r1, r7
 80058c2:	4630      	mov	r0, r6
 80058c4:	eb04 0903 	add.w	r9, r4, r3
 80058c8:	f000 fbba 	bl	8006040 <_sbrk_r>
 80058cc:	4581      	cmp	r9, r0
 80058ce:	d142      	bne.n	8005956 <_malloc_r+0xea>
 80058d0:	6821      	ldr	r1, [r4, #0]
 80058d2:	1a6d      	subs	r5, r5, r1
 80058d4:	4629      	mov	r1, r5
 80058d6:	4630      	mov	r0, r6
 80058d8:	f7ff ffa6 	bl	8005828 <sbrk_aligned>
 80058dc:	3001      	adds	r0, #1
 80058de:	d03a      	beq.n	8005956 <_malloc_r+0xea>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	442b      	add	r3, r5
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	f8d8 3000 	ldr.w	r3, [r8]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	bb62      	cbnz	r2, 8005948 <_malloc_r+0xdc>
 80058ee:	f8c8 7000 	str.w	r7, [r8]
 80058f2:	e00f      	b.n	8005914 <_malloc_r+0xa8>
 80058f4:	6822      	ldr	r2, [r4, #0]
 80058f6:	1b52      	subs	r2, r2, r5
 80058f8:	d420      	bmi.n	800593c <_malloc_r+0xd0>
 80058fa:	2a0b      	cmp	r2, #11
 80058fc:	d917      	bls.n	800592e <_malloc_r+0xc2>
 80058fe:	1961      	adds	r1, r4, r5
 8005900:	42a3      	cmp	r3, r4
 8005902:	6025      	str	r5, [r4, #0]
 8005904:	bf18      	it	ne
 8005906:	6059      	strne	r1, [r3, #4]
 8005908:	6863      	ldr	r3, [r4, #4]
 800590a:	bf08      	it	eq
 800590c:	f8c8 1000 	streq.w	r1, [r8]
 8005910:	5162      	str	r2, [r4, r5]
 8005912:	604b      	str	r3, [r1, #4]
 8005914:	4630      	mov	r0, r6
 8005916:	f000 f82f 	bl	8005978 <__malloc_unlock>
 800591a:	f104 000b 	add.w	r0, r4, #11
 800591e:	1d23      	adds	r3, r4, #4
 8005920:	f020 0007 	bic.w	r0, r0, #7
 8005924:	1ac2      	subs	r2, r0, r3
 8005926:	bf1c      	itt	ne
 8005928:	1a1b      	subne	r3, r3, r0
 800592a:	50a3      	strne	r3, [r4, r2]
 800592c:	e7af      	b.n	800588e <_malloc_r+0x22>
 800592e:	6862      	ldr	r2, [r4, #4]
 8005930:	42a3      	cmp	r3, r4
 8005932:	bf0c      	ite	eq
 8005934:	f8c8 2000 	streq.w	r2, [r8]
 8005938:	605a      	strne	r2, [r3, #4]
 800593a:	e7eb      	b.n	8005914 <_malloc_r+0xa8>
 800593c:	4623      	mov	r3, r4
 800593e:	6864      	ldr	r4, [r4, #4]
 8005940:	e7ae      	b.n	80058a0 <_malloc_r+0x34>
 8005942:	463c      	mov	r4, r7
 8005944:	687f      	ldr	r7, [r7, #4]
 8005946:	e7b6      	b.n	80058b6 <_malloc_r+0x4a>
 8005948:	461a      	mov	r2, r3
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	42a3      	cmp	r3, r4
 800594e:	d1fb      	bne.n	8005948 <_malloc_r+0xdc>
 8005950:	2300      	movs	r3, #0
 8005952:	6053      	str	r3, [r2, #4]
 8005954:	e7de      	b.n	8005914 <_malloc_r+0xa8>
 8005956:	230c      	movs	r3, #12
 8005958:	6033      	str	r3, [r6, #0]
 800595a:	4630      	mov	r0, r6
 800595c:	f000 f80c 	bl	8005978 <__malloc_unlock>
 8005960:	e794      	b.n	800588c <_malloc_r+0x20>
 8005962:	6005      	str	r5, [r0, #0]
 8005964:	e7d6      	b.n	8005914 <_malloc_r+0xa8>
 8005966:	bf00      	nop
 8005968:	20008134 	.word	0x20008134

0800596c <__malloc_lock>:
 800596c:	4801      	ldr	r0, [pc, #4]	@ (8005974 <__malloc_lock+0x8>)
 800596e:	f000 bbb4 	b.w	80060da <__retarget_lock_acquire_recursive>
 8005972:	bf00      	nop
 8005974:	20008278 	.word	0x20008278

08005978 <__malloc_unlock>:
 8005978:	4801      	ldr	r0, [pc, #4]	@ (8005980 <__malloc_unlock+0x8>)
 800597a:	f000 bbaf 	b.w	80060dc <__retarget_lock_release_recursive>
 800597e:	bf00      	nop
 8005980:	20008278 	.word	0x20008278

08005984 <_strtol_l.isra.0>:
 8005984:	2b24      	cmp	r3, #36	@ 0x24
 8005986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800598a:	4686      	mov	lr, r0
 800598c:	4690      	mov	r8, r2
 800598e:	d801      	bhi.n	8005994 <_strtol_l.isra.0+0x10>
 8005990:	2b01      	cmp	r3, #1
 8005992:	d106      	bne.n	80059a2 <_strtol_l.isra.0+0x1e>
 8005994:	f000 fb76 	bl	8006084 <__errno>
 8005998:	2316      	movs	r3, #22
 800599a:	6003      	str	r3, [r0, #0]
 800599c:	2000      	movs	r0, #0
 800599e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a2:	4834      	ldr	r0, [pc, #208]	@ (8005a74 <_strtol_l.isra.0+0xf0>)
 80059a4:	460d      	mov	r5, r1
 80059a6:	462a      	mov	r2, r5
 80059a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059ac:	5d06      	ldrb	r6, [r0, r4]
 80059ae:	f016 0608 	ands.w	r6, r6, #8
 80059b2:	d1f8      	bne.n	80059a6 <_strtol_l.isra.0+0x22>
 80059b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80059b6:	d110      	bne.n	80059da <_strtol_l.isra.0+0x56>
 80059b8:	782c      	ldrb	r4, [r5, #0]
 80059ba:	2601      	movs	r6, #1
 80059bc:	1c95      	adds	r5, r2, #2
 80059be:	f033 0210 	bics.w	r2, r3, #16
 80059c2:	d115      	bne.n	80059f0 <_strtol_l.isra.0+0x6c>
 80059c4:	2c30      	cmp	r4, #48	@ 0x30
 80059c6:	d10d      	bne.n	80059e4 <_strtol_l.isra.0+0x60>
 80059c8:	782a      	ldrb	r2, [r5, #0]
 80059ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80059ce:	2a58      	cmp	r2, #88	@ 0x58
 80059d0:	d108      	bne.n	80059e4 <_strtol_l.isra.0+0x60>
 80059d2:	786c      	ldrb	r4, [r5, #1]
 80059d4:	3502      	adds	r5, #2
 80059d6:	2310      	movs	r3, #16
 80059d8:	e00a      	b.n	80059f0 <_strtol_l.isra.0+0x6c>
 80059da:	2c2b      	cmp	r4, #43	@ 0x2b
 80059dc:	bf04      	itt	eq
 80059de:	782c      	ldrbeq	r4, [r5, #0]
 80059e0:	1c95      	addeq	r5, r2, #2
 80059e2:	e7ec      	b.n	80059be <_strtol_l.isra.0+0x3a>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f6      	bne.n	80059d6 <_strtol_l.isra.0+0x52>
 80059e8:	2c30      	cmp	r4, #48	@ 0x30
 80059ea:	bf14      	ite	ne
 80059ec:	230a      	movne	r3, #10
 80059ee:	2308      	moveq	r3, #8
 80059f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80059f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80059f8:	2200      	movs	r2, #0
 80059fa:	fbbc f9f3 	udiv	r9, ip, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	fb03 ca19 	mls	sl, r3, r9, ip
 8005a04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005a08:	2f09      	cmp	r7, #9
 8005a0a:	d80f      	bhi.n	8005a2c <_strtol_l.isra.0+0xa8>
 8005a0c:	463c      	mov	r4, r7
 8005a0e:	42a3      	cmp	r3, r4
 8005a10:	dd1b      	ble.n	8005a4a <_strtol_l.isra.0+0xc6>
 8005a12:	1c57      	adds	r7, r2, #1
 8005a14:	d007      	beq.n	8005a26 <_strtol_l.isra.0+0xa2>
 8005a16:	4581      	cmp	r9, r0
 8005a18:	d314      	bcc.n	8005a44 <_strtol_l.isra.0+0xc0>
 8005a1a:	d101      	bne.n	8005a20 <_strtol_l.isra.0+0x9c>
 8005a1c:	45a2      	cmp	sl, r4
 8005a1e:	db11      	blt.n	8005a44 <_strtol_l.isra.0+0xc0>
 8005a20:	fb00 4003 	mla	r0, r0, r3, r4
 8005a24:	2201      	movs	r2, #1
 8005a26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a2a:	e7eb      	b.n	8005a04 <_strtol_l.isra.0+0x80>
 8005a2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005a30:	2f19      	cmp	r7, #25
 8005a32:	d801      	bhi.n	8005a38 <_strtol_l.isra.0+0xb4>
 8005a34:	3c37      	subs	r4, #55	@ 0x37
 8005a36:	e7ea      	b.n	8005a0e <_strtol_l.isra.0+0x8a>
 8005a38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005a3c:	2f19      	cmp	r7, #25
 8005a3e:	d804      	bhi.n	8005a4a <_strtol_l.isra.0+0xc6>
 8005a40:	3c57      	subs	r4, #87	@ 0x57
 8005a42:	e7e4      	b.n	8005a0e <_strtol_l.isra.0+0x8a>
 8005a44:	f04f 32ff 	mov.w	r2, #4294967295
 8005a48:	e7ed      	b.n	8005a26 <_strtol_l.isra.0+0xa2>
 8005a4a:	1c53      	adds	r3, r2, #1
 8005a4c:	d108      	bne.n	8005a60 <_strtol_l.isra.0+0xdc>
 8005a4e:	2322      	movs	r3, #34	@ 0x22
 8005a50:	f8ce 3000 	str.w	r3, [lr]
 8005a54:	4660      	mov	r0, ip
 8005a56:	f1b8 0f00 	cmp.w	r8, #0
 8005a5a:	d0a0      	beq.n	800599e <_strtol_l.isra.0+0x1a>
 8005a5c:	1e69      	subs	r1, r5, #1
 8005a5e:	e006      	b.n	8005a6e <_strtol_l.isra.0+0xea>
 8005a60:	b106      	cbz	r6, 8005a64 <_strtol_l.isra.0+0xe0>
 8005a62:	4240      	negs	r0, r0
 8005a64:	f1b8 0f00 	cmp.w	r8, #0
 8005a68:	d099      	beq.n	800599e <_strtol_l.isra.0+0x1a>
 8005a6a:	2a00      	cmp	r2, #0
 8005a6c:	d1f6      	bne.n	8005a5c <_strtol_l.isra.0+0xd8>
 8005a6e:	f8c8 1000 	str.w	r1, [r8]
 8005a72:	e794      	b.n	800599e <_strtol_l.isra.0+0x1a>
 8005a74:	0800707d 	.word	0x0800707d

08005a78 <strtol>:
 8005a78:	4613      	mov	r3, r2
 8005a7a:	460a      	mov	r2, r1
 8005a7c:	4601      	mov	r1, r0
 8005a7e:	4802      	ldr	r0, [pc, #8]	@ (8005a88 <strtol+0x10>)
 8005a80:	6800      	ldr	r0, [r0, #0]
 8005a82:	f7ff bf7f 	b.w	8005984 <_strtol_l.isra.0>
 8005a86:	bf00      	nop
 8005a88:	20000028 	.word	0x20000028

08005a8c <std>:
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	b510      	push	{r4, lr}
 8005a90:	4604      	mov	r4, r0
 8005a92:	e9c0 3300 	strd	r3, r3, [r0]
 8005a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a9a:	6083      	str	r3, [r0, #8]
 8005a9c:	8181      	strh	r1, [r0, #12]
 8005a9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005aa0:	81c2      	strh	r2, [r0, #14]
 8005aa2:	6183      	str	r3, [r0, #24]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	2208      	movs	r2, #8
 8005aa8:	305c      	adds	r0, #92	@ 0x5c
 8005aaa:	f000 fa2f 	bl	8005f0c <memset>
 8005aae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae4 <std+0x58>)
 8005ab0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae8 <std+0x5c>)
 8005ab4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8005aec <std+0x60>)
 8005ab8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005aba:	4b0d      	ldr	r3, [pc, #52]	@ (8005af0 <std+0x64>)
 8005abc:	6323      	str	r3, [r4, #48]	@ 0x30
 8005abe:	4b0d      	ldr	r3, [pc, #52]	@ (8005af4 <std+0x68>)
 8005ac0:	6224      	str	r4, [r4, #32]
 8005ac2:	429c      	cmp	r4, r3
 8005ac4:	d006      	beq.n	8005ad4 <std+0x48>
 8005ac6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005aca:	4294      	cmp	r4, r2
 8005acc:	d002      	beq.n	8005ad4 <std+0x48>
 8005ace:	33d0      	adds	r3, #208	@ 0xd0
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	d105      	bne.n	8005ae0 <std+0x54>
 8005ad4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005adc:	f000 bafc 	b.w	80060d8 <__retarget_lock_init_recursive>
 8005ae0:	bd10      	pop	{r4, pc}
 8005ae2:	bf00      	nop
 8005ae4:	08005d5d 	.word	0x08005d5d
 8005ae8:	08005d7f 	.word	0x08005d7f
 8005aec:	08005db7 	.word	0x08005db7
 8005af0:	08005ddb 	.word	0x08005ddb
 8005af4:	20008138 	.word	0x20008138

08005af8 <stdio_exit_handler>:
 8005af8:	4a02      	ldr	r2, [pc, #8]	@ (8005b04 <stdio_exit_handler+0xc>)
 8005afa:	4903      	ldr	r1, [pc, #12]	@ (8005b08 <stdio_exit_handler+0x10>)
 8005afc:	4803      	ldr	r0, [pc, #12]	@ (8005b0c <stdio_exit_handler+0x14>)
 8005afe:	f000 b869 	b.w	8005bd4 <_fwalk_sglue>
 8005b02:	bf00      	nop
 8005b04:	2000001c 	.word	0x2000001c
 8005b08:	08006ae5 	.word	0x08006ae5
 8005b0c:	2000002c 	.word	0x2000002c

08005b10 <cleanup_stdio>:
 8005b10:	6841      	ldr	r1, [r0, #4]
 8005b12:	4b0c      	ldr	r3, [pc, #48]	@ (8005b44 <cleanup_stdio+0x34>)
 8005b14:	4299      	cmp	r1, r3
 8005b16:	b510      	push	{r4, lr}
 8005b18:	4604      	mov	r4, r0
 8005b1a:	d001      	beq.n	8005b20 <cleanup_stdio+0x10>
 8005b1c:	f000 ffe2 	bl	8006ae4 <_fflush_r>
 8005b20:	68a1      	ldr	r1, [r4, #8]
 8005b22:	4b09      	ldr	r3, [pc, #36]	@ (8005b48 <cleanup_stdio+0x38>)
 8005b24:	4299      	cmp	r1, r3
 8005b26:	d002      	beq.n	8005b2e <cleanup_stdio+0x1e>
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f000 ffdb 	bl	8006ae4 <_fflush_r>
 8005b2e:	68e1      	ldr	r1, [r4, #12]
 8005b30:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <cleanup_stdio+0x3c>)
 8005b32:	4299      	cmp	r1, r3
 8005b34:	d004      	beq.n	8005b40 <cleanup_stdio+0x30>
 8005b36:	4620      	mov	r0, r4
 8005b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b3c:	f000 bfd2 	b.w	8006ae4 <_fflush_r>
 8005b40:	bd10      	pop	{r4, pc}
 8005b42:	bf00      	nop
 8005b44:	20008138 	.word	0x20008138
 8005b48:	200081a0 	.word	0x200081a0
 8005b4c:	20008208 	.word	0x20008208

08005b50 <global_stdio_init.part.0>:
 8005b50:	b510      	push	{r4, lr}
 8005b52:	4b0b      	ldr	r3, [pc, #44]	@ (8005b80 <global_stdio_init.part.0+0x30>)
 8005b54:	4c0b      	ldr	r4, [pc, #44]	@ (8005b84 <global_stdio_init.part.0+0x34>)
 8005b56:	4a0c      	ldr	r2, [pc, #48]	@ (8005b88 <global_stdio_init.part.0+0x38>)
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2104      	movs	r1, #4
 8005b60:	f7ff ff94 	bl	8005a8c <std>
 8005b64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b68:	2201      	movs	r2, #1
 8005b6a:	2109      	movs	r1, #9
 8005b6c:	f7ff ff8e 	bl	8005a8c <std>
 8005b70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b74:	2202      	movs	r2, #2
 8005b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b7a:	2112      	movs	r1, #18
 8005b7c:	f7ff bf86 	b.w	8005a8c <std>
 8005b80:	20008270 	.word	0x20008270
 8005b84:	20008138 	.word	0x20008138
 8005b88:	08005af9 	.word	0x08005af9

08005b8c <__sfp_lock_acquire>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	@ (8005b94 <__sfp_lock_acquire+0x8>)
 8005b8e:	f000 baa4 	b.w	80060da <__retarget_lock_acquire_recursive>
 8005b92:	bf00      	nop
 8005b94:	20008279 	.word	0x20008279

08005b98 <__sfp_lock_release>:
 8005b98:	4801      	ldr	r0, [pc, #4]	@ (8005ba0 <__sfp_lock_release+0x8>)
 8005b9a:	f000 ba9f 	b.w	80060dc <__retarget_lock_release_recursive>
 8005b9e:	bf00      	nop
 8005ba0:	20008279 	.word	0x20008279

08005ba4 <__sinit>:
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	f7ff fff0 	bl	8005b8c <__sfp_lock_acquire>
 8005bac:	6a23      	ldr	r3, [r4, #32]
 8005bae:	b11b      	cbz	r3, 8005bb8 <__sinit+0x14>
 8005bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb4:	f7ff bff0 	b.w	8005b98 <__sfp_lock_release>
 8005bb8:	4b04      	ldr	r3, [pc, #16]	@ (8005bcc <__sinit+0x28>)
 8005bba:	6223      	str	r3, [r4, #32]
 8005bbc:	4b04      	ldr	r3, [pc, #16]	@ (8005bd0 <__sinit+0x2c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f5      	bne.n	8005bb0 <__sinit+0xc>
 8005bc4:	f7ff ffc4 	bl	8005b50 <global_stdio_init.part.0>
 8005bc8:	e7f2      	b.n	8005bb0 <__sinit+0xc>
 8005bca:	bf00      	nop
 8005bcc:	08005b11 	.word	0x08005b11
 8005bd0:	20008270 	.word	0x20008270

08005bd4 <_fwalk_sglue>:
 8005bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd8:	4607      	mov	r7, r0
 8005bda:	4688      	mov	r8, r1
 8005bdc:	4614      	mov	r4, r2
 8005bde:	2600      	movs	r6, #0
 8005be0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005be4:	f1b9 0901 	subs.w	r9, r9, #1
 8005be8:	d505      	bpl.n	8005bf6 <_fwalk_sglue+0x22>
 8005bea:	6824      	ldr	r4, [r4, #0]
 8005bec:	2c00      	cmp	r4, #0
 8005bee:	d1f7      	bne.n	8005be0 <_fwalk_sglue+0xc>
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bf6:	89ab      	ldrh	r3, [r5, #12]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d907      	bls.n	8005c0c <_fwalk_sglue+0x38>
 8005bfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c00:	3301      	adds	r3, #1
 8005c02:	d003      	beq.n	8005c0c <_fwalk_sglue+0x38>
 8005c04:	4629      	mov	r1, r5
 8005c06:	4638      	mov	r0, r7
 8005c08:	47c0      	blx	r8
 8005c0a:	4306      	orrs	r6, r0
 8005c0c:	3568      	adds	r5, #104	@ 0x68
 8005c0e:	e7e9      	b.n	8005be4 <_fwalk_sglue+0x10>

08005c10 <iprintf>:
 8005c10:	b40f      	push	{r0, r1, r2, r3}
 8005c12:	b507      	push	{r0, r1, r2, lr}
 8005c14:	4906      	ldr	r1, [pc, #24]	@ (8005c30 <iprintf+0x20>)
 8005c16:	ab04      	add	r3, sp, #16
 8005c18:	6808      	ldr	r0, [r1, #0]
 8005c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c1e:	6881      	ldr	r1, [r0, #8]
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	f000 fc37 	bl	8006494 <_vfiprintf_r>
 8005c26:	b003      	add	sp, #12
 8005c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c2c:	b004      	add	sp, #16
 8005c2e:	4770      	bx	lr
 8005c30:	20000028 	.word	0x20000028

08005c34 <_puts_r>:
 8005c34:	6a03      	ldr	r3, [r0, #32]
 8005c36:	b570      	push	{r4, r5, r6, lr}
 8005c38:	6884      	ldr	r4, [r0, #8]
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	460e      	mov	r6, r1
 8005c3e:	b90b      	cbnz	r3, 8005c44 <_puts_r+0x10>
 8005c40:	f7ff ffb0 	bl	8005ba4 <__sinit>
 8005c44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c46:	07db      	lsls	r3, r3, #31
 8005c48:	d405      	bmi.n	8005c56 <_puts_r+0x22>
 8005c4a:	89a3      	ldrh	r3, [r4, #12]
 8005c4c:	0598      	lsls	r0, r3, #22
 8005c4e:	d402      	bmi.n	8005c56 <_puts_r+0x22>
 8005c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c52:	f000 fa42 	bl	80060da <__retarget_lock_acquire_recursive>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	0719      	lsls	r1, r3, #28
 8005c5a:	d502      	bpl.n	8005c62 <_puts_r+0x2e>
 8005c5c:	6923      	ldr	r3, [r4, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d135      	bne.n	8005cce <_puts_r+0x9a>
 8005c62:	4621      	mov	r1, r4
 8005c64:	4628      	mov	r0, r5
 8005c66:	f000 f8fb 	bl	8005e60 <__swsetup_r>
 8005c6a:	b380      	cbz	r0, 8005cce <_puts_r+0x9a>
 8005c6c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c72:	07da      	lsls	r2, r3, #31
 8005c74:	d405      	bmi.n	8005c82 <_puts_r+0x4e>
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	059b      	lsls	r3, r3, #22
 8005c7a:	d402      	bmi.n	8005c82 <_puts_r+0x4e>
 8005c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c7e:	f000 fa2d 	bl	80060dc <__retarget_lock_release_recursive>
 8005c82:	4628      	mov	r0, r5
 8005c84:	bd70      	pop	{r4, r5, r6, pc}
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	da04      	bge.n	8005c94 <_puts_r+0x60>
 8005c8a:	69a2      	ldr	r2, [r4, #24]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	dc17      	bgt.n	8005cc0 <_puts_r+0x8c>
 8005c90:	290a      	cmp	r1, #10
 8005c92:	d015      	beq.n	8005cc0 <_puts_r+0x8c>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	6022      	str	r2, [r4, #0]
 8005c9a:	7019      	strb	r1, [r3, #0]
 8005c9c:	68a3      	ldr	r3, [r4, #8]
 8005c9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	60a3      	str	r3, [r4, #8]
 8005ca6:	2900      	cmp	r1, #0
 8005ca8:	d1ed      	bne.n	8005c86 <_puts_r+0x52>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	da11      	bge.n	8005cd2 <_puts_r+0x9e>
 8005cae:	4622      	mov	r2, r4
 8005cb0:	210a      	movs	r1, #10
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	f000 f895 	bl	8005de2 <__swbuf_r>
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d0d7      	beq.n	8005c6c <_puts_r+0x38>
 8005cbc:	250a      	movs	r5, #10
 8005cbe:	e7d7      	b.n	8005c70 <_puts_r+0x3c>
 8005cc0:	4622      	mov	r2, r4
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 f88d 	bl	8005de2 <__swbuf_r>
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d1e7      	bne.n	8005c9c <_puts_r+0x68>
 8005ccc:	e7ce      	b.n	8005c6c <_puts_r+0x38>
 8005cce:	3e01      	subs	r6, #1
 8005cd0:	e7e4      	b.n	8005c9c <_puts_r+0x68>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	6022      	str	r2, [r4, #0]
 8005cd8:	220a      	movs	r2, #10
 8005cda:	701a      	strb	r2, [r3, #0]
 8005cdc:	e7ee      	b.n	8005cbc <_puts_r+0x88>
	...

08005ce0 <puts>:
 8005ce0:	4b02      	ldr	r3, [pc, #8]	@ (8005cec <puts+0xc>)
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	f7ff bfa5 	b.w	8005c34 <_puts_r>
 8005cea:	bf00      	nop
 8005cec:	20000028 	.word	0x20000028

08005cf0 <sniprintf>:
 8005cf0:	b40c      	push	{r2, r3}
 8005cf2:	b530      	push	{r4, r5, lr}
 8005cf4:	4b18      	ldr	r3, [pc, #96]	@ (8005d58 <sniprintf+0x68>)
 8005cf6:	1e0c      	subs	r4, r1, #0
 8005cf8:	681d      	ldr	r5, [r3, #0]
 8005cfa:	b09d      	sub	sp, #116	@ 0x74
 8005cfc:	da08      	bge.n	8005d10 <sniprintf+0x20>
 8005cfe:	238b      	movs	r3, #139	@ 0x8b
 8005d00:	602b      	str	r3, [r5, #0]
 8005d02:	f04f 30ff 	mov.w	r0, #4294967295
 8005d06:	b01d      	add	sp, #116	@ 0x74
 8005d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d0c:	b002      	add	sp, #8
 8005d0e:	4770      	bx	lr
 8005d10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005d14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d18:	f04f 0300 	mov.w	r3, #0
 8005d1c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005d1e:	bf14      	ite	ne
 8005d20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d24:	4623      	moveq	r3, r4
 8005d26:	9304      	str	r3, [sp, #16]
 8005d28:	9307      	str	r3, [sp, #28]
 8005d2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d2e:	9002      	str	r0, [sp, #8]
 8005d30:	9006      	str	r0, [sp, #24]
 8005d32:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d36:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d38:	ab21      	add	r3, sp, #132	@ 0x84
 8005d3a:	a902      	add	r1, sp, #8
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	f000 fa82 	bl	8006248 <_svfiprintf_r>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	bfbc      	itt	lt
 8005d48:	238b      	movlt	r3, #139	@ 0x8b
 8005d4a:	602b      	strlt	r3, [r5, #0]
 8005d4c:	2c00      	cmp	r4, #0
 8005d4e:	d0da      	beq.n	8005d06 <sniprintf+0x16>
 8005d50:	9b02      	ldr	r3, [sp, #8]
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	e7d6      	b.n	8005d06 <sniprintf+0x16>
 8005d58:	20000028 	.word	0x20000028

08005d5c <__sread>:
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	460c      	mov	r4, r1
 8005d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d64:	f000 f95a 	bl	800601c <_read_r>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	bfab      	itete	ge
 8005d6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d70:	181b      	addge	r3, r3, r0
 8005d72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d76:	bfac      	ite	ge
 8005d78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d7a:	81a3      	strhlt	r3, [r4, #12]
 8005d7c:	bd10      	pop	{r4, pc}

08005d7e <__swrite>:
 8005d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d82:	461f      	mov	r7, r3
 8005d84:	898b      	ldrh	r3, [r1, #12]
 8005d86:	05db      	lsls	r3, r3, #23
 8005d88:	4605      	mov	r5, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	4616      	mov	r6, r2
 8005d8e:	d505      	bpl.n	8005d9c <__swrite+0x1e>
 8005d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d94:	2302      	movs	r3, #2
 8005d96:	2200      	movs	r2, #0
 8005d98:	f000 f92e 	bl	8005ff8 <_lseek_r>
 8005d9c:	89a3      	ldrh	r3, [r4, #12]
 8005d9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005da2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005da6:	81a3      	strh	r3, [r4, #12]
 8005da8:	4632      	mov	r2, r6
 8005daa:	463b      	mov	r3, r7
 8005dac:	4628      	mov	r0, r5
 8005dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005db2:	f000 b955 	b.w	8006060 <_write_r>

08005db6 <__sseek>:
 8005db6:	b510      	push	{r4, lr}
 8005db8:	460c      	mov	r4, r1
 8005dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dbe:	f000 f91b 	bl	8005ff8 <_lseek_r>
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	bf15      	itete	ne
 8005dc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dd2:	81a3      	strheq	r3, [r4, #12]
 8005dd4:	bf18      	it	ne
 8005dd6:	81a3      	strhne	r3, [r4, #12]
 8005dd8:	bd10      	pop	{r4, pc}

08005dda <__sclose>:
 8005dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dde:	f000 b89d 	b.w	8005f1c <_close_r>

08005de2 <__swbuf_r>:
 8005de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de4:	460e      	mov	r6, r1
 8005de6:	4614      	mov	r4, r2
 8005de8:	4605      	mov	r5, r0
 8005dea:	b118      	cbz	r0, 8005df4 <__swbuf_r+0x12>
 8005dec:	6a03      	ldr	r3, [r0, #32]
 8005dee:	b90b      	cbnz	r3, 8005df4 <__swbuf_r+0x12>
 8005df0:	f7ff fed8 	bl	8005ba4 <__sinit>
 8005df4:	69a3      	ldr	r3, [r4, #24]
 8005df6:	60a3      	str	r3, [r4, #8]
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	071a      	lsls	r2, r3, #28
 8005dfc:	d501      	bpl.n	8005e02 <__swbuf_r+0x20>
 8005dfe:	6923      	ldr	r3, [r4, #16]
 8005e00:	b943      	cbnz	r3, 8005e14 <__swbuf_r+0x32>
 8005e02:	4621      	mov	r1, r4
 8005e04:	4628      	mov	r0, r5
 8005e06:	f000 f82b 	bl	8005e60 <__swsetup_r>
 8005e0a:	b118      	cbz	r0, 8005e14 <__swbuf_r+0x32>
 8005e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e10:	4638      	mov	r0, r7
 8005e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	6922      	ldr	r2, [r4, #16]
 8005e18:	1a98      	subs	r0, r3, r2
 8005e1a:	6963      	ldr	r3, [r4, #20]
 8005e1c:	b2f6      	uxtb	r6, r6
 8005e1e:	4283      	cmp	r3, r0
 8005e20:	4637      	mov	r7, r6
 8005e22:	dc05      	bgt.n	8005e30 <__swbuf_r+0x4e>
 8005e24:	4621      	mov	r1, r4
 8005e26:	4628      	mov	r0, r5
 8005e28:	f000 fe5c 	bl	8006ae4 <_fflush_r>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d1ed      	bne.n	8005e0c <__swbuf_r+0x2a>
 8005e30:	68a3      	ldr	r3, [r4, #8]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	60a3      	str	r3, [r4, #8]
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	6022      	str	r2, [r4, #0]
 8005e3c:	701e      	strb	r6, [r3, #0]
 8005e3e:	6962      	ldr	r2, [r4, #20]
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d004      	beq.n	8005e50 <__swbuf_r+0x6e>
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	07db      	lsls	r3, r3, #31
 8005e4a:	d5e1      	bpl.n	8005e10 <__swbuf_r+0x2e>
 8005e4c:	2e0a      	cmp	r6, #10
 8005e4e:	d1df      	bne.n	8005e10 <__swbuf_r+0x2e>
 8005e50:	4621      	mov	r1, r4
 8005e52:	4628      	mov	r0, r5
 8005e54:	f000 fe46 	bl	8006ae4 <_fflush_r>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d0d9      	beq.n	8005e10 <__swbuf_r+0x2e>
 8005e5c:	e7d6      	b.n	8005e0c <__swbuf_r+0x2a>
	...

08005e60 <__swsetup_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4b29      	ldr	r3, [pc, #164]	@ (8005f08 <__swsetup_r+0xa8>)
 8005e64:	4605      	mov	r5, r0
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	460c      	mov	r4, r1
 8005e6a:	b118      	cbz	r0, 8005e74 <__swsetup_r+0x14>
 8005e6c:	6a03      	ldr	r3, [r0, #32]
 8005e6e:	b90b      	cbnz	r3, 8005e74 <__swsetup_r+0x14>
 8005e70:	f7ff fe98 	bl	8005ba4 <__sinit>
 8005e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e78:	0719      	lsls	r1, r3, #28
 8005e7a:	d422      	bmi.n	8005ec2 <__swsetup_r+0x62>
 8005e7c:	06da      	lsls	r2, r3, #27
 8005e7e:	d407      	bmi.n	8005e90 <__swsetup_r+0x30>
 8005e80:	2209      	movs	r2, #9
 8005e82:	602a      	str	r2, [r5, #0]
 8005e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e88:	81a3      	strh	r3, [r4, #12]
 8005e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8e:	e033      	b.n	8005ef8 <__swsetup_r+0x98>
 8005e90:	0758      	lsls	r0, r3, #29
 8005e92:	d512      	bpl.n	8005eba <__swsetup_r+0x5a>
 8005e94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e96:	b141      	cbz	r1, 8005eaa <__swsetup_r+0x4a>
 8005e98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e9c:	4299      	cmp	r1, r3
 8005e9e:	d002      	beq.n	8005ea6 <__swsetup_r+0x46>
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f000 f92b 	bl	80060fc <_free_r>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005eb0:	81a3      	strh	r3, [r4, #12]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	6063      	str	r3, [r4, #4]
 8005eb6:	6923      	ldr	r3, [r4, #16]
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	f043 0308 	orr.w	r3, r3, #8
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	6923      	ldr	r3, [r4, #16]
 8005ec4:	b94b      	cbnz	r3, 8005eda <__swsetup_r+0x7a>
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ed0:	d003      	beq.n	8005eda <__swsetup_r+0x7a>
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f000 fe53 	bl	8006b80 <__smakebuf_r>
 8005eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ede:	f013 0201 	ands.w	r2, r3, #1
 8005ee2:	d00a      	beq.n	8005efa <__swsetup_r+0x9a>
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	60a2      	str	r2, [r4, #8]
 8005ee8:	6962      	ldr	r2, [r4, #20]
 8005eea:	4252      	negs	r2, r2
 8005eec:	61a2      	str	r2, [r4, #24]
 8005eee:	6922      	ldr	r2, [r4, #16]
 8005ef0:	b942      	cbnz	r2, 8005f04 <__swsetup_r+0xa4>
 8005ef2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ef6:	d1c5      	bne.n	8005e84 <__swsetup_r+0x24>
 8005ef8:	bd38      	pop	{r3, r4, r5, pc}
 8005efa:	0799      	lsls	r1, r3, #30
 8005efc:	bf58      	it	pl
 8005efe:	6962      	ldrpl	r2, [r4, #20]
 8005f00:	60a2      	str	r2, [r4, #8]
 8005f02:	e7f4      	b.n	8005eee <__swsetup_r+0x8e>
 8005f04:	2000      	movs	r0, #0
 8005f06:	e7f7      	b.n	8005ef8 <__swsetup_r+0x98>
 8005f08:	20000028 	.word	0x20000028

08005f0c <memset>:
 8005f0c:	4402      	add	r2, r0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d100      	bne.n	8005f16 <memset+0xa>
 8005f14:	4770      	bx	lr
 8005f16:	f803 1b01 	strb.w	r1, [r3], #1
 8005f1a:	e7f9      	b.n	8005f10 <memset+0x4>

08005f1c <_close_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d06      	ldr	r5, [pc, #24]	@ (8005f38 <_close_r+0x1c>)
 8005f20:	2300      	movs	r3, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	f7fb f873 	bl	8001012 <_close>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_close_r+0x1a>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_close_r+0x1a>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	20008274 	.word	0x20008274

08005f3c <_reclaim_reent>:
 8005f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ff4 <_reclaim_reent+0xb8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4283      	cmp	r3, r0
 8005f42:	b570      	push	{r4, r5, r6, lr}
 8005f44:	4604      	mov	r4, r0
 8005f46:	d053      	beq.n	8005ff0 <_reclaim_reent+0xb4>
 8005f48:	69c3      	ldr	r3, [r0, #28]
 8005f4a:	b31b      	cbz	r3, 8005f94 <_reclaim_reent+0x58>
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	b163      	cbz	r3, 8005f6a <_reclaim_reent+0x2e>
 8005f50:	2500      	movs	r5, #0
 8005f52:	69e3      	ldr	r3, [r4, #28]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	5959      	ldr	r1, [r3, r5]
 8005f58:	b9b1      	cbnz	r1, 8005f88 <_reclaim_reent+0x4c>
 8005f5a:	3504      	adds	r5, #4
 8005f5c:	2d80      	cmp	r5, #128	@ 0x80
 8005f5e:	d1f8      	bne.n	8005f52 <_reclaim_reent+0x16>
 8005f60:	69e3      	ldr	r3, [r4, #28]
 8005f62:	4620      	mov	r0, r4
 8005f64:	68d9      	ldr	r1, [r3, #12]
 8005f66:	f000 f8c9 	bl	80060fc <_free_r>
 8005f6a:	69e3      	ldr	r3, [r4, #28]
 8005f6c:	6819      	ldr	r1, [r3, #0]
 8005f6e:	b111      	cbz	r1, 8005f76 <_reclaim_reent+0x3a>
 8005f70:	4620      	mov	r0, r4
 8005f72:	f000 f8c3 	bl	80060fc <_free_r>
 8005f76:	69e3      	ldr	r3, [r4, #28]
 8005f78:	689d      	ldr	r5, [r3, #8]
 8005f7a:	b15d      	cbz	r5, 8005f94 <_reclaim_reent+0x58>
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	4620      	mov	r0, r4
 8005f80:	682d      	ldr	r5, [r5, #0]
 8005f82:	f000 f8bb 	bl	80060fc <_free_r>
 8005f86:	e7f8      	b.n	8005f7a <_reclaim_reent+0x3e>
 8005f88:	680e      	ldr	r6, [r1, #0]
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f000 f8b6 	bl	80060fc <_free_r>
 8005f90:	4631      	mov	r1, r6
 8005f92:	e7e1      	b.n	8005f58 <_reclaim_reent+0x1c>
 8005f94:	6961      	ldr	r1, [r4, #20]
 8005f96:	b111      	cbz	r1, 8005f9e <_reclaim_reent+0x62>
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 f8af 	bl	80060fc <_free_r>
 8005f9e:	69e1      	ldr	r1, [r4, #28]
 8005fa0:	b111      	cbz	r1, 8005fa8 <_reclaim_reent+0x6c>
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 f8aa 	bl	80060fc <_free_r>
 8005fa8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005faa:	b111      	cbz	r1, 8005fb2 <_reclaim_reent+0x76>
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 f8a5 	bl	80060fc <_free_r>
 8005fb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fb4:	b111      	cbz	r1, 8005fbc <_reclaim_reent+0x80>
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 f8a0 	bl	80060fc <_free_r>
 8005fbc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005fbe:	b111      	cbz	r1, 8005fc6 <_reclaim_reent+0x8a>
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 f89b 	bl	80060fc <_free_r>
 8005fc6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005fc8:	b111      	cbz	r1, 8005fd0 <_reclaim_reent+0x94>
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f896 	bl	80060fc <_free_r>
 8005fd0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005fd2:	b111      	cbz	r1, 8005fda <_reclaim_reent+0x9e>
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f000 f891 	bl	80060fc <_free_r>
 8005fda:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005fdc:	b111      	cbz	r1, 8005fe4 <_reclaim_reent+0xa8>
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f000 f88c 	bl	80060fc <_free_r>
 8005fe4:	6a23      	ldr	r3, [r4, #32]
 8005fe6:	b11b      	cbz	r3, 8005ff0 <_reclaim_reent+0xb4>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fee:	4718      	bx	r3
 8005ff0:	bd70      	pop	{r4, r5, r6, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000028 	.word	0x20000028

08005ff8 <_lseek_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4d07      	ldr	r5, [pc, #28]	@ (8006018 <_lseek_r+0x20>)
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	4608      	mov	r0, r1
 8006000:	4611      	mov	r1, r2
 8006002:	2200      	movs	r2, #0
 8006004:	602a      	str	r2, [r5, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	f7fb f82a 	bl	8001060 <_lseek>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_lseek_r+0x1e>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_lseek_r+0x1e>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	20008274 	.word	0x20008274

0800601c <_read_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4d07      	ldr	r5, [pc, #28]	@ (800603c <_read_r+0x20>)
 8006020:	4604      	mov	r4, r0
 8006022:	4608      	mov	r0, r1
 8006024:	4611      	mov	r1, r2
 8006026:	2200      	movs	r2, #0
 8006028:	602a      	str	r2, [r5, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	f7fa ffb8 	bl	8000fa0 <_read>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_read_r+0x1e>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_read_r+0x1e>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	20008274 	.word	0x20008274

08006040 <_sbrk_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4d06      	ldr	r5, [pc, #24]	@ (800605c <_sbrk_r+0x1c>)
 8006044:	2300      	movs	r3, #0
 8006046:	4604      	mov	r4, r0
 8006048:	4608      	mov	r0, r1
 800604a:	602b      	str	r3, [r5, #0]
 800604c:	f7fb f816 	bl	800107c <_sbrk>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d102      	bne.n	800605a <_sbrk_r+0x1a>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	b103      	cbz	r3, 800605a <_sbrk_r+0x1a>
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	20008274 	.word	0x20008274

08006060 <_write_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d07      	ldr	r5, [pc, #28]	@ (8006080 <_write_r+0x20>)
 8006064:	4604      	mov	r4, r0
 8006066:	4608      	mov	r0, r1
 8006068:	4611      	mov	r1, r2
 800606a:	2200      	movs	r2, #0
 800606c:	602a      	str	r2, [r5, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	f7fa ffb3 	bl	8000fda <_write>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d102      	bne.n	800607e <_write_r+0x1e>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	b103      	cbz	r3, 800607e <_write_r+0x1e>
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	20008274 	.word	0x20008274

08006084 <__errno>:
 8006084:	4b01      	ldr	r3, [pc, #4]	@ (800608c <__errno+0x8>)
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	20000028 	.word	0x20000028

08006090 <__libc_init_array>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4d0d      	ldr	r5, [pc, #52]	@ (80060c8 <__libc_init_array+0x38>)
 8006094:	4c0d      	ldr	r4, [pc, #52]	@ (80060cc <__libc_init_array+0x3c>)
 8006096:	1b64      	subs	r4, r4, r5
 8006098:	10a4      	asrs	r4, r4, #2
 800609a:	2600      	movs	r6, #0
 800609c:	42a6      	cmp	r6, r4
 800609e:	d109      	bne.n	80060b4 <__libc_init_array+0x24>
 80060a0:	4d0b      	ldr	r5, [pc, #44]	@ (80060d0 <__libc_init_array+0x40>)
 80060a2:	4c0c      	ldr	r4, [pc, #48]	@ (80060d4 <__libc_init_array+0x44>)
 80060a4:	f000 fe1a 	bl	8006cdc <_init>
 80060a8:	1b64      	subs	r4, r4, r5
 80060aa:	10a4      	asrs	r4, r4, #2
 80060ac:	2600      	movs	r6, #0
 80060ae:	42a6      	cmp	r6, r4
 80060b0:	d105      	bne.n	80060be <__libc_init_array+0x2e>
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b8:	4798      	blx	r3
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7ee      	b.n	800609c <__libc_init_array+0xc>
 80060be:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c2:	4798      	blx	r3
 80060c4:	3601      	adds	r6, #1
 80060c6:	e7f2      	b.n	80060ae <__libc_init_array+0x1e>
 80060c8:	080071b8 	.word	0x080071b8
 80060cc:	080071b8 	.word	0x080071b8
 80060d0:	080071b8 	.word	0x080071b8
 80060d4:	080071bc 	.word	0x080071bc

080060d8 <__retarget_lock_init_recursive>:
 80060d8:	4770      	bx	lr

080060da <__retarget_lock_acquire_recursive>:
 80060da:	4770      	bx	lr

080060dc <__retarget_lock_release_recursive>:
 80060dc:	4770      	bx	lr

080060de <memcpy>:
 80060de:	440a      	add	r2, r1
 80060e0:	4291      	cmp	r1, r2
 80060e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80060e6:	d100      	bne.n	80060ea <memcpy+0xc>
 80060e8:	4770      	bx	lr
 80060ea:	b510      	push	{r4, lr}
 80060ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060f4:	4291      	cmp	r1, r2
 80060f6:	d1f9      	bne.n	80060ec <memcpy+0xe>
 80060f8:	bd10      	pop	{r4, pc}
	...

080060fc <_free_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4605      	mov	r5, r0
 8006100:	2900      	cmp	r1, #0
 8006102:	d041      	beq.n	8006188 <_free_r+0x8c>
 8006104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006108:	1f0c      	subs	r4, r1, #4
 800610a:	2b00      	cmp	r3, #0
 800610c:	bfb8      	it	lt
 800610e:	18e4      	addlt	r4, r4, r3
 8006110:	f7ff fc2c 	bl	800596c <__malloc_lock>
 8006114:	4a1d      	ldr	r2, [pc, #116]	@ (800618c <_free_r+0x90>)
 8006116:	6813      	ldr	r3, [r2, #0]
 8006118:	b933      	cbnz	r3, 8006128 <_free_r+0x2c>
 800611a:	6063      	str	r3, [r4, #4]
 800611c:	6014      	str	r4, [r2, #0]
 800611e:	4628      	mov	r0, r5
 8006120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006124:	f7ff bc28 	b.w	8005978 <__malloc_unlock>
 8006128:	42a3      	cmp	r3, r4
 800612a:	d908      	bls.n	800613e <_free_r+0x42>
 800612c:	6820      	ldr	r0, [r4, #0]
 800612e:	1821      	adds	r1, r4, r0
 8006130:	428b      	cmp	r3, r1
 8006132:	bf01      	itttt	eq
 8006134:	6819      	ldreq	r1, [r3, #0]
 8006136:	685b      	ldreq	r3, [r3, #4]
 8006138:	1809      	addeq	r1, r1, r0
 800613a:	6021      	streq	r1, [r4, #0]
 800613c:	e7ed      	b.n	800611a <_free_r+0x1e>
 800613e:	461a      	mov	r2, r3
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	b10b      	cbz	r3, 8006148 <_free_r+0x4c>
 8006144:	42a3      	cmp	r3, r4
 8006146:	d9fa      	bls.n	800613e <_free_r+0x42>
 8006148:	6811      	ldr	r1, [r2, #0]
 800614a:	1850      	adds	r0, r2, r1
 800614c:	42a0      	cmp	r0, r4
 800614e:	d10b      	bne.n	8006168 <_free_r+0x6c>
 8006150:	6820      	ldr	r0, [r4, #0]
 8006152:	4401      	add	r1, r0
 8006154:	1850      	adds	r0, r2, r1
 8006156:	4283      	cmp	r3, r0
 8006158:	6011      	str	r1, [r2, #0]
 800615a:	d1e0      	bne.n	800611e <_free_r+0x22>
 800615c:	6818      	ldr	r0, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	6053      	str	r3, [r2, #4]
 8006162:	4408      	add	r0, r1
 8006164:	6010      	str	r0, [r2, #0]
 8006166:	e7da      	b.n	800611e <_free_r+0x22>
 8006168:	d902      	bls.n	8006170 <_free_r+0x74>
 800616a:	230c      	movs	r3, #12
 800616c:	602b      	str	r3, [r5, #0]
 800616e:	e7d6      	b.n	800611e <_free_r+0x22>
 8006170:	6820      	ldr	r0, [r4, #0]
 8006172:	1821      	adds	r1, r4, r0
 8006174:	428b      	cmp	r3, r1
 8006176:	bf04      	itt	eq
 8006178:	6819      	ldreq	r1, [r3, #0]
 800617a:	685b      	ldreq	r3, [r3, #4]
 800617c:	6063      	str	r3, [r4, #4]
 800617e:	bf04      	itt	eq
 8006180:	1809      	addeq	r1, r1, r0
 8006182:	6021      	streq	r1, [r4, #0]
 8006184:	6054      	str	r4, [r2, #4]
 8006186:	e7ca      	b.n	800611e <_free_r+0x22>
 8006188:	bd38      	pop	{r3, r4, r5, pc}
 800618a:	bf00      	nop
 800618c:	20008134 	.word	0x20008134

08006190 <__ssputs_r>:
 8006190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006194:	688e      	ldr	r6, [r1, #8]
 8006196:	461f      	mov	r7, r3
 8006198:	42be      	cmp	r6, r7
 800619a:	680b      	ldr	r3, [r1, #0]
 800619c:	4682      	mov	sl, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	4690      	mov	r8, r2
 80061a2:	d82d      	bhi.n	8006200 <__ssputs_r+0x70>
 80061a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80061ac:	d026      	beq.n	80061fc <__ssputs_r+0x6c>
 80061ae:	6965      	ldr	r5, [r4, #20]
 80061b0:	6909      	ldr	r1, [r1, #16]
 80061b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061b6:	eba3 0901 	sub.w	r9, r3, r1
 80061ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061be:	1c7b      	adds	r3, r7, #1
 80061c0:	444b      	add	r3, r9
 80061c2:	106d      	asrs	r5, r5, #1
 80061c4:	429d      	cmp	r5, r3
 80061c6:	bf38      	it	cc
 80061c8:	461d      	movcc	r5, r3
 80061ca:	0553      	lsls	r3, r2, #21
 80061cc:	d527      	bpl.n	800621e <__ssputs_r+0x8e>
 80061ce:	4629      	mov	r1, r5
 80061d0:	f7ff fb4c 	bl	800586c <_malloc_r>
 80061d4:	4606      	mov	r6, r0
 80061d6:	b360      	cbz	r0, 8006232 <__ssputs_r+0xa2>
 80061d8:	6921      	ldr	r1, [r4, #16]
 80061da:	464a      	mov	r2, r9
 80061dc:	f7ff ff7f 	bl	80060de <memcpy>
 80061e0:	89a3      	ldrh	r3, [r4, #12]
 80061e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ea:	81a3      	strh	r3, [r4, #12]
 80061ec:	6126      	str	r6, [r4, #16]
 80061ee:	6165      	str	r5, [r4, #20]
 80061f0:	444e      	add	r6, r9
 80061f2:	eba5 0509 	sub.w	r5, r5, r9
 80061f6:	6026      	str	r6, [r4, #0]
 80061f8:	60a5      	str	r5, [r4, #8]
 80061fa:	463e      	mov	r6, r7
 80061fc:	42be      	cmp	r6, r7
 80061fe:	d900      	bls.n	8006202 <__ssputs_r+0x72>
 8006200:	463e      	mov	r6, r7
 8006202:	6820      	ldr	r0, [r4, #0]
 8006204:	4632      	mov	r2, r6
 8006206:	4641      	mov	r1, r8
 8006208:	f000 fcf6 	bl	8006bf8 <memmove>
 800620c:	68a3      	ldr	r3, [r4, #8]
 800620e:	1b9b      	subs	r3, r3, r6
 8006210:	60a3      	str	r3, [r4, #8]
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	4433      	add	r3, r6
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	2000      	movs	r0, #0
 800621a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621e:	462a      	mov	r2, r5
 8006220:	f000 fd26 	bl	8006c70 <_realloc_r>
 8006224:	4606      	mov	r6, r0
 8006226:	2800      	cmp	r0, #0
 8006228:	d1e0      	bne.n	80061ec <__ssputs_r+0x5c>
 800622a:	6921      	ldr	r1, [r4, #16]
 800622c:	4650      	mov	r0, sl
 800622e:	f7ff ff65 	bl	80060fc <_free_r>
 8006232:	230c      	movs	r3, #12
 8006234:	f8ca 3000 	str.w	r3, [sl]
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800623e:	81a3      	strh	r3, [r4, #12]
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	e7e9      	b.n	800621a <__ssputs_r+0x8a>
	...

08006248 <_svfiprintf_r>:
 8006248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624c:	4698      	mov	r8, r3
 800624e:	898b      	ldrh	r3, [r1, #12]
 8006250:	061b      	lsls	r3, r3, #24
 8006252:	b09d      	sub	sp, #116	@ 0x74
 8006254:	4607      	mov	r7, r0
 8006256:	460d      	mov	r5, r1
 8006258:	4614      	mov	r4, r2
 800625a:	d510      	bpl.n	800627e <_svfiprintf_r+0x36>
 800625c:	690b      	ldr	r3, [r1, #16]
 800625e:	b973      	cbnz	r3, 800627e <_svfiprintf_r+0x36>
 8006260:	2140      	movs	r1, #64	@ 0x40
 8006262:	f7ff fb03 	bl	800586c <_malloc_r>
 8006266:	6028      	str	r0, [r5, #0]
 8006268:	6128      	str	r0, [r5, #16]
 800626a:	b930      	cbnz	r0, 800627a <_svfiprintf_r+0x32>
 800626c:	230c      	movs	r3, #12
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	b01d      	add	sp, #116	@ 0x74
 8006276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627a:	2340      	movs	r3, #64	@ 0x40
 800627c:	616b      	str	r3, [r5, #20]
 800627e:	2300      	movs	r3, #0
 8006280:	9309      	str	r3, [sp, #36]	@ 0x24
 8006282:	2320      	movs	r3, #32
 8006284:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006288:	f8cd 800c 	str.w	r8, [sp, #12]
 800628c:	2330      	movs	r3, #48	@ 0x30
 800628e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800642c <_svfiprintf_r+0x1e4>
 8006292:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006296:	f04f 0901 	mov.w	r9, #1
 800629a:	4623      	mov	r3, r4
 800629c:	469a      	mov	sl, r3
 800629e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062a2:	b10a      	cbz	r2, 80062a8 <_svfiprintf_r+0x60>
 80062a4:	2a25      	cmp	r2, #37	@ 0x25
 80062a6:	d1f9      	bne.n	800629c <_svfiprintf_r+0x54>
 80062a8:	ebba 0b04 	subs.w	fp, sl, r4
 80062ac:	d00b      	beq.n	80062c6 <_svfiprintf_r+0x7e>
 80062ae:	465b      	mov	r3, fp
 80062b0:	4622      	mov	r2, r4
 80062b2:	4629      	mov	r1, r5
 80062b4:	4638      	mov	r0, r7
 80062b6:	f7ff ff6b 	bl	8006190 <__ssputs_r>
 80062ba:	3001      	adds	r0, #1
 80062bc:	f000 80a7 	beq.w	800640e <_svfiprintf_r+0x1c6>
 80062c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062c2:	445a      	add	r2, fp
 80062c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80062c6:	f89a 3000 	ldrb.w	r3, [sl]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 809f 	beq.w	800640e <_svfiprintf_r+0x1c6>
 80062d0:	2300      	movs	r3, #0
 80062d2:	f04f 32ff 	mov.w	r2, #4294967295
 80062d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062da:	f10a 0a01 	add.w	sl, sl, #1
 80062de:	9304      	str	r3, [sp, #16]
 80062e0:	9307      	str	r3, [sp, #28]
 80062e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80062e8:	4654      	mov	r4, sl
 80062ea:	2205      	movs	r2, #5
 80062ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f0:	484e      	ldr	r0, [pc, #312]	@ (800642c <_svfiprintf_r+0x1e4>)
 80062f2:	f7f9 ff8d 	bl	8000210 <memchr>
 80062f6:	9a04      	ldr	r2, [sp, #16]
 80062f8:	b9d8      	cbnz	r0, 8006332 <_svfiprintf_r+0xea>
 80062fa:	06d0      	lsls	r0, r2, #27
 80062fc:	bf44      	itt	mi
 80062fe:	2320      	movmi	r3, #32
 8006300:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006304:	0711      	lsls	r1, r2, #28
 8006306:	bf44      	itt	mi
 8006308:	232b      	movmi	r3, #43	@ 0x2b
 800630a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800630e:	f89a 3000 	ldrb.w	r3, [sl]
 8006312:	2b2a      	cmp	r3, #42	@ 0x2a
 8006314:	d015      	beq.n	8006342 <_svfiprintf_r+0xfa>
 8006316:	9a07      	ldr	r2, [sp, #28]
 8006318:	4654      	mov	r4, sl
 800631a:	2000      	movs	r0, #0
 800631c:	f04f 0c0a 	mov.w	ip, #10
 8006320:	4621      	mov	r1, r4
 8006322:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006326:	3b30      	subs	r3, #48	@ 0x30
 8006328:	2b09      	cmp	r3, #9
 800632a:	d94b      	bls.n	80063c4 <_svfiprintf_r+0x17c>
 800632c:	b1b0      	cbz	r0, 800635c <_svfiprintf_r+0x114>
 800632e:	9207      	str	r2, [sp, #28]
 8006330:	e014      	b.n	800635c <_svfiprintf_r+0x114>
 8006332:	eba0 0308 	sub.w	r3, r0, r8
 8006336:	fa09 f303 	lsl.w	r3, r9, r3
 800633a:	4313      	orrs	r3, r2
 800633c:	9304      	str	r3, [sp, #16]
 800633e:	46a2      	mov	sl, r4
 8006340:	e7d2      	b.n	80062e8 <_svfiprintf_r+0xa0>
 8006342:	9b03      	ldr	r3, [sp, #12]
 8006344:	1d19      	adds	r1, r3, #4
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	9103      	str	r1, [sp, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	bfbb      	ittet	lt
 800634e:	425b      	neglt	r3, r3
 8006350:	f042 0202 	orrlt.w	r2, r2, #2
 8006354:	9307      	strge	r3, [sp, #28]
 8006356:	9307      	strlt	r3, [sp, #28]
 8006358:	bfb8      	it	lt
 800635a:	9204      	strlt	r2, [sp, #16]
 800635c:	7823      	ldrb	r3, [r4, #0]
 800635e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006360:	d10a      	bne.n	8006378 <_svfiprintf_r+0x130>
 8006362:	7863      	ldrb	r3, [r4, #1]
 8006364:	2b2a      	cmp	r3, #42	@ 0x2a
 8006366:	d132      	bne.n	80063ce <_svfiprintf_r+0x186>
 8006368:	9b03      	ldr	r3, [sp, #12]
 800636a:	1d1a      	adds	r2, r3, #4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	9203      	str	r2, [sp, #12]
 8006370:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006374:	3402      	adds	r4, #2
 8006376:	9305      	str	r3, [sp, #20]
 8006378:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800643c <_svfiprintf_r+0x1f4>
 800637c:	7821      	ldrb	r1, [r4, #0]
 800637e:	2203      	movs	r2, #3
 8006380:	4650      	mov	r0, sl
 8006382:	f7f9 ff45 	bl	8000210 <memchr>
 8006386:	b138      	cbz	r0, 8006398 <_svfiprintf_r+0x150>
 8006388:	9b04      	ldr	r3, [sp, #16]
 800638a:	eba0 000a 	sub.w	r0, r0, sl
 800638e:	2240      	movs	r2, #64	@ 0x40
 8006390:	4082      	lsls	r2, r0
 8006392:	4313      	orrs	r3, r2
 8006394:	3401      	adds	r4, #1
 8006396:	9304      	str	r3, [sp, #16]
 8006398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800639c:	4824      	ldr	r0, [pc, #144]	@ (8006430 <_svfiprintf_r+0x1e8>)
 800639e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063a2:	2206      	movs	r2, #6
 80063a4:	f7f9 ff34 	bl	8000210 <memchr>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d036      	beq.n	800641a <_svfiprintf_r+0x1d2>
 80063ac:	4b21      	ldr	r3, [pc, #132]	@ (8006434 <_svfiprintf_r+0x1ec>)
 80063ae:	bb1b      	cbnz	r3, 80063f8 <_svfiprintf_r+0x1b0>
 80063b0:	9b03      	ldr	r3, [sp, #12]
 80063b2:	3307      	adds	r3, #7
 80063b4:	f023 0307 	bic.w	r3, r3, #7
 80063b8:	3308      	adds	r3, #8
 80063ba:	9303      	str	r3, [sp, #12]
 80063bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063be:	4433      	add	r3, r6
 80063c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80063c2:	e76a      	b.n	800629a <_svfiprintf_r+0x52>
 80063c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80063c8:	460c      	mov	r4, r1
 80063ca:	2001      	movs	r0, #1
 80063cc:	e7a8      	b.n	8006320 <_svfiprintf_r+0xd8>
 80063ce:	2300      	movs	r3, #0
 80063d0:	3401      	adds	r4, #1
 80063d2:	9305      	str	r3, [sp, #20]
 80063d4:	4619      	mov	r1, r3
 80063d6:	f04f 0c0a 	mov.w	ip, #10
 80063da:	4620      	mov	r0, r4
 80063dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063e0:	3a30      	subs	r2, #48	@ 0x30
 80063e2:	2a09      	cmp	r2, #9
 80063e4:	d903      	bls.n	80063ee <_svfiprintf_r+0x1a6>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0c6      	beq.n	8006378 <_svfiprintf_r+0x130>
 80063ea:	9105      	str	r1, [sp, #20]
 80063ec:	e7c4      	b.n	8006378 <_svfiprintf_r+0x130>
 80063ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80063f2:	4604      	mov	r4, r0
 80063f4:	2301      	movs	r3, #1
 80063f6:	e7f0      	b.n	80063da <_svfiprintf_r+0x192>
 80063f8:	ab03      	add	r3, sp, #12
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	462a      	mov	r2, r5
 80063fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006438 <_svfiprintf_r+0x1f0>)
 8006400:	a904      	add	r1, sp, #16
 8006402:	4638      	mov	r0, r7
 8006404:	f3af 8000 	nop.w
 8006408:	1c42      	adds	r2, r0, #1
 800640a:	4606      	mov	r6, r0
 800640c:	d1d6      	bne.n	80063bc <_svfiprintf_r+0x174>
 800640e:	89ab      	ldrh	r3, [r5, #12]
 8006410:	065b      	lsls	r3, r3, #25
 8006412:	f53f af2d 	bmi.w	8006270 <_svfiprintf_r+0x28>
 8006416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006418:	e72c      	b.n	8006274 <_svfiprintf_r+0x2c>
 800641a:	ab03      	add	r3, sp, #12
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	462a      	mov	r2, r5
 8006420:	4b05      	ldr	r3, [pc, #20]	@ (8006438 <_svfiprintf_r+0x1f0>)
 8006422:	a904      	add	r1, sp, #16
 8006424:	4638      	mov	r0, r7
 8006426:	f000 f9bb 	bl	80067a0 <_printf_i>
 800642a:	e7ed      	b.n	8006408 <_svfiprintf_r+0x1c0>
 800642c:	0800717d 	.word	0x0800717d
 8006430:	08007187 	.word	0x08007187
 8006434:	00000000 	.word	0x00000000
 8006438:	08006191 	.word	0x08006191
 800643c:	08007183 	.word	0x08007183

08006440 <__sfputc_r>:
 8006440:	6893      	ldr	r3, [r2, #8]
 8006442:	3b01      	subs	r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	b410      	push	{r4}
 8006448:	6093      	str	r3, [r2, #8]
 800644a:	da08      	bge.n	800645e <__sfputc_r+0x1e>
 800644c:	6994      	ldr	r4, [r2, #24]
 800644e:	42a3      	cmp	r3, r4
 8006450:	db01      	blt.n	8006456 <__sfputc_r+0x16>
 8006452:	290a      	cmp	r1, #10
 8006454:	d103      	bne.n	800645e <__sfputc_r+0x1e>
 8006456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800645a:	f7ff bcc2 	b.w	8005de2 <__swbuf_r>
 800645e:	6813      	ldr	r3, [r2, #0]
 8006460:	1c58      	adds	r0, r3, #1
 8006462:	6010      	str	r0, [r2, #0]
 8006464:	7019      	strb	r1, [r3, #0]
 8006466:	4608      	mov	r0, r1
 8006468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800646c:	4770      	bx	lr

0800646e <__sfputs_r>:
 800646e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006470:	4606      	mov	r6, r0
 8006472:	460f      	mov	r7, r1
 8006474:	4614      	mov	r4, r2
 8006476:	18d5      	adds	r5, r2, r3
 8006478:	42ac      	cmp	r4, r5
 800647a:	d101      	bne.n	8006480 <__sfputs_r+0x12>
 800647c:	2000      	movs	r0, #0
 800647e:	e007      	b.n	8006490 <__sfputs_r+0x22>
 8006480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006484:	463a      	mov	r2, r7
 8006486:	4630      	mov	r0, r6
 8006488:	f7ff ffda 	bl	8006440 <__sfputc_r>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d1f3      	bne.n	8006478 <__sfputs_r+0xa>
 8006490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006494 <_vfiprintf_r>:
 8006494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006498:	460d      	mov	r5, r1
 800649a:	b09d      	sub	sp, #116	@ 0x74
 800649c:	4614      	mov	r4, r2
 800649e:	4698      	mov	r8, r3
 80064a0:	4606      	mov	r6, r0
 80064a2:	b118      	cbz	r0, 80064ac <_vfiprintf_r+0x18>
 80064a4:	6a03      	ldr	r3, [r0, #32]
 80064a6:	b90b      	cbnz	r3, 80064ac <_vfiprintf_r+0x18>
 80064a8:	f7ff fb7c 	bl	8005ba4 <__sinit>
 80064ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064ae:	07d9      	lsls	r1, r3, #31
 80064b0:	d405      	bmi.n	80064be <_vfiprintf_r+0x2a>
 80064b2:	89ab      	ldrh	r3, [r5, #12]
 80064b4:	059a      	lsls	r2, r3, #22
 80064b6:	d402      	bmi.n	80064be <_vfiprintf_r+0x2a>
 80064b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064ba:	f7ff fe0e 	bl	80060da <__retarget_lock_acquire_recursive>
 80064be:	89ab      	ldrh	r3, [r5, #12]
 80064c0:	071b      	lsls	r3, r3, #28
 80064c2:	d501      	bpl.n	80064c8 <_vfiprintf_r+0x34>
 80064c4:	692b      	ldr	r3, [r5, #16]
 80064c6:	b99b      	cbnz	r3, 80064f0 <_vfiprintf_r+0x5c>
 80064c8:	4629      	mov	r1, r5
 80064ca:	4630      	mov	r0, r6
 80064cc:	f7ff fcc8 	bl	8005e60 <__swsetup_r>
 80064d0:	b170      	cbz	r0, 80064f0 <_vfiprintf_r+0x5c>
 80064d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064d4:	07dc      	lsls	r4, r3, #31
 80064d6:	d504      	bpl.n	80064e2 <_vfiprintf_r+0x4e>
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	b01d      	add	sp, #116	@ 0x74
 80064de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e2:	89ab      	ldrh	r3, [r5, #12]
 80064e4:	0598      	lsls	r0, r3, #22
 80064e6:	d4f7      	bmi.n	80064d8 <_vfiprintf_r+0x44>
 80064e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064ea:	f7ff fdf7 	bl	80060dc <__retarget_lock_release_recursive>
 80064ee:	e7f3      	b.n	80064d8 <_vfiprintf_r+0x44>
 80064f0:	2300      	movs	r3, #0
 80064f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80064f4:	2320      	movs	r3, #32
 80064f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80064fe:	2330      	movs	r3, #48	@ 0x30
 8006500:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80066b0 <_vfiprintf_r+0x21c>
 8006504:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006508:	f04f 0901 	mov.w	r9, #1
 800650c:	4623      	mov	r3, r4
 800650e:	469a      	mov	sl, r3
 8006510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006514:	b10a      	cbz	r2, 800651a <_vfiprintf_r+0x86>
 8006516:	2a25      	cmp	r2, #37	@ 0x25
 8006518:	d1f9      	bne.n	800650e <_vfiprintf_r+0x7a>
 800651a:	ebba 0b04 	subs.w	fp, sl, r4
 800651e:	d00b      	beq.n	8006538 <_vfiprintf_r+0xa4>
 8006520:	465b      	mov	r3, fp
 8006522:	4622      	mov	r2, r4
 8006524:	4629      	mov	r1, r5
 8006526:	4630      	mov	r0, r6
 8006528:	f7ff ffa1 	bl	800646e <__sfputs_r>
 800652c:	3001      	adds	r0, #1
 800652e:	f000 80a7 	beq.w	8006680 <_vfiprintf_r+0x1ec>
 8006532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006534:	445a      	add	r2, fp
 8006536:	9209      	str	r2, [sp, #36]	@ 0x24
 8006538:	f89a 3000 	ldrb.w	r3, [sl]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 809f 	beq.w	8006680 <_vfiprintf_r+0x1ec>
 8006542:	2300      	movs	r3, #0
 8006544:	f04f 32ff 	mov.w	r2, #4294967295
 8006548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800654c:	f10a 0a01 	add.w	sl, sl, #1
 8006550:	9304      	str	r3, [sp, #16]
 8006552:	9307      	str	r3, [sp, #28]
 8006554:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006558:	931a      	str	r3, [sp, #104]	@ 0x68
 800655a:	4654      	mov	r4, sl
 800655c:	2205      	movs	r2, #5
 800655e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006562:	4853      	ldr	r0, [pc, #332]	@ (80066b0 <_vfiprintf_r+0x21c>)
 8006564:	f7f9 fe54 	bl	8000210 <memchr>
 8006568:	9a04      	ldr	r2, [sp, #16]
 800656a:	b9d8      	cbnz	r0, 80065a4 <_vfiprintf_r+0x110>
 800656c:	06d1      	lsls	r1, r2, #27
 800656e:	bf44      	itt	mi
 8006570:	2320      	movmi	r3, #32
 8006572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006576:	0713      	lsls	r3, r2, #28
 8006578:	bf44      	itt	mi
 800657a:	232b      	movmi	r3, #43	@ 0x2b
 800657c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006580:	f89a 3000 	ldrb.w	r3, [sl]
 8006584:	2b2a      	cmp	r3, #42	@ 0x2a
 8006586:	d015      	beq.n	80065b4 <_vfiprintf_r+0x120>
 8006588:	9a07      	ldr	r2, [sp, #28]
 800658a:	4654      	mov	r4, sl
 800658c:	2000      	movs	r0, #0
 800658e:	f04f 0c0a 	mov.w	ip, #10
 8006592:	4621      	mov	r1, r4
 8006594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006598:	3b30      	subs	r3, #48	@ 0x30
 800659a:	2b09      	cmp	r3, #9
 800659c:	d94b      	bls.n	8006636 <_vfiprintf_r+0x1a2>
 800659e:	b1b0      	cbz	r0, 80065ce <_vfiprintf_r+0x13a>
 80065a0:	9207      	str	r2, [sp, #28]
 80065a2:	e014      	b.n	80065ce <_vfiprintf_r+0x13a>
 80065a4:	eba0 0308 	sub.w	r3, r0, r8
 80065a8:	fa09 f303 	lsl.w	r3, r9, r3
 80065ac:	4313      	orrs	r3, r2
 80065ae:	9304      	str	r3, [sp, #16]
 80065b0:	46a2      	mov	sl, r4
 80065b2:	e7d2      	b.n	800655a <_vfiprintf_r+0xc6>
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	1d19      	adds	r1, r3, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	9103      	str	r1, [sp, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bfbb      	ittet	lt
 80065c0:	425b      	neglt	r3, r3
 80065c2:	f042 0202 	orrlt.w	r2, r2, #2
 80065c6:	9307      	strge	r3, [sp, #28]
 80065c8:	9307      	strlt	r3, [sp, #28]
 80065ca:	bfb8      	it	lt
 80065cc:	9204      	strlt	r2, [sp, #16]
 80065ce:	7823      	ldrb	r3, [r4, #0]
 80065d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80065d2:	d10a      	bne.n	80065ea <_vfiprintf_r+0x156>
 80065d4:	7863      	ldrb	r3, [r4, #1]
 80065d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80065d8:	d132      	bne.n	8006640 <_vfiprintf_r+0x1ac>
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	1d1a      	adds	r2, r3, #4
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	9203      	str	r2, [sp, #12]
 80065e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065e6:	3402      	adds	r4, #2
 80065e8:	9305      	str	r3, [sp, #20]
 80065ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80066c0 <_vfiprintf_r+0x22c>
 80065ee:	7821      	ldrb	r1, [r4, #0]
 80065f0:	2203      	movs	r2, #3
 80065f2:	4650      	mov	r0, sl
 80065f4:	f7f9 fe0c 	bl	8000210 <memchr>
 80065f8:	b138      	cbz	r0, 800660a <_vfiprintf_r+0x176>
 80065fa:	9b04      	ldr	r3, [sp, #16]
 80065fc:	eba0 000a 	sub.w	r0, r0, sl
 8006600:	2240      	movs	r2, #64	@ 0x40
 8006602:	4082      	lsls	r2, r0
 8006604:	4313      	orrs	r3, r2
 8006606:	3401      	adds	r4, #1
 8006608:	9304      	str	r3, [sp, #16]
 800660a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800660e:	4829      	ldr	r0, [pc, #164]	@ (80066b4 <_vfiprintf_r+0x220>)
 8006610:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006614:	2206      	movs	r2, #6
 8006616:	f7f9 fdfb 	bl	8000210 <memchr>
 800661a:	2800      	cmp	r0, #0
 800661c:	d03f      	beq.n	800669e <_vfiprintf_r+0x20a>
 800661e:	4b26      	ldr	r3, [pc, #152]	@ (80066b8 <_vfiprintf_r+0x224>)
 8006620:	bb1b      	cbnz	r3, 800666a <_vfiprintf_r+0x1d6>
 8006622:	9b03      	ldr	r3, [sp, #12]
 8006624:	3307      	adds	r3, #7
 8006626:	f023 0307 	bic.w	r3, r3, #7
 800662a:	3308      	adds	r3, #8
 800662c:	9303      	str	r3, [sp, #12]
 800662e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006630:	443b      	add	r3, r7
 8006632:	9309      	str	r3, [sp, #36]	@ 0x24
 8006634:	e76a      	b.n	800650c <_vfiprintf_r+0x78>
 8006636:	fb0c 3202 	mla	r2, ip, r2, r3
 800663a:	460c      	mov	r4, r1
 800663c:	2001      	movs	r0, #1
 800663e:	e7a8      	b.n	8006592 <_vfiprintf_r+0xfe>
 8006640:	2300      	movs	r3, #0
 8006642:	3401      	adds	r4, #1
 8006644:	9305      	str	r3, [sp, #20]
 8006646:	4619      	mov	r1, r3
 8006648:	f04f 0c0a 	mov.w	ip, #10
 800664c:	4620      	mov	r0, r4
 800664e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006652:	3a30      	subs	r2, #48	@ 0x30
 8006654:	2a09      	cmp	r2, #9
 8006656:	d903      	bls.n	8006660 <_vfiprintf_r+0x1cc>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0c6      	beq.n	80065ea <_vfiprintf_r+0x156>
 800665c:	9105      	str	r1, [sp, #20]
 800665e:	e7c4      	b.n	80065ea <_vfiprintf_r+0x156>
 8006660:	fb0c 2101 	mla	r1, ip, r1, r2
 8006664:	4604      	mov	r4, r0
 8006666:	2301      	movs	r3, #1
 8006668:	e7f0      	b.n	800664c <_vfiprintf_r+0x1b8>
 800666a:	ab03      	add	r3, sp, #12
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	462a      	mov	r2, r5
 8006670:	4b12      	ldr	r3, [pc, #72]	@ (80066bc <_vfiprintf_r+0x228>)
 8006672:	a904      	add	r1, sp, #16
 8006674:	4630      	mov	r0, r6
 8006676:	f3af 8000 	nop.w
 800667a:	4607      	mov	r7, r0
 800667c:	1c78      	adds	r0, r7, #1
 800667e:	d1d6      	bne.n	800662e <_vfiprintf_r+0x19a>
 8006680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006682:	07d9      	lsls	r1, r3, #31
 8006684:	d405      	bmi.n	8006692 <_vfiprintf_r+0x1fe>
 8006686:	89ab      	ldrh	r3, [r5, #12]
 8006688:	059a      	lsls	r2, r3, #22
 800668a:	d402      	bmi.n	8006692 <_vfiprintf_r+0x1fe>
 800668c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800668e:	f7ff fd25 	bl	80060dc <__retarget_lock_release_recursive>
 8006692:	89ab      	ldrh	r3, [r5, #12]
 8006694:	065b      	lsls	r3, r3, #25
 8006696:	f53f af1f 	bmi.w	80064d8 <_vfiprintf_r+0x44>
 800669a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800669c:	e71e      	b.n	80064dc <_vfiprintf_r+0x48>
 800669e:	ab03      	add	r3, sp, #12
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	462a      	mov	r2, r5
 80066a4:	4b05      	ldr	r3, [pc, #20]	@ (80066bc <_vfiprintf_r+0x228>)
 80066a6:	a904      	add	r1, sp, #16
 80066a8:	4630      	mov	r0, r6
 80066aa:	f000 f879 	bl	80067a0 <_printf_i>
 80066ae:	e7e4      	b.n	800667a <_vfiprintf_r+0x1e6>
 80066b0:	0800717d 	.word	0x0800717d
 80066b4:	08007187 	.word	0x08007187
 80066b8:	00000000 	.word	0x00000000
 80066bc:	0800646f 	.word	0x0800646f
 80066c0:	08007183 	.word	0x08007183

080066c4 <_printf_common>:
 80066c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c8:	4616      	mov	r6, r2
 80066ca:	4698      	mov	r8, r3
 80066cc:	688a      	ldr	r2, [r1, #8]
 80066ce:	690b      	ldr	r3, [r1, #16]
 80066d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066d4:	4293      	cmp	r3, r2
 80066d6:	bfb8      	it	lt
 80066d8:	4613      	movlt	r3, r2
 80066da:	6033      	str	r3, [r6, #0]
 80066dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066e0:	4607      	mov	r7, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	b10a      	cbz	r2, 80066ea <_printf_common+0x26>
 80066e6:	3301      	adds	r3, #1
 80066e8:	6033      	str	r3, [r6, #0]
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	0699      	lsls	r1, r3, #26
 80066ee:	bf42      	ittt	mi
 80066f0:	6833      	ldrmi	r3, [r6, #0]
 80066f2:	3302      	addmi	r3, #2
 80066f4:	6033      	strmi	r3, [r6, #0]
 80066f6:	6825      	ldr	r5, [r4, #0]
 80066f8:	f015 0506 	ands.w	r5, r5, #6
 80066fc:	d106      	bne.n	800670c <_printf_common+0x48>
 80066fe:	f104 0a19 	add.w	sl, r4, #25
 8006702:	68e3      	ldr	r3, [r4, #12]
 8006704:	6832      	ldr	r2, [r6, #0]
 8006706:	1a9b      	subs	r3, r3, r2
 8006708:	42ab      	cmp	r3, r5
 800670a:	dc26      	bgt.n	800675a <_printf_common+0x96>
 800670c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006710:	6822      	ldr	r2, [r4, #0]
 8006712:	3b00      	subs	r3, #0
 8006714:	bf18      	it	ne
 8006716:	2301      	movne	r3, #1
 8006718:	0692      	lsls	r2, r2, #26
 800671a:	d42b      	bmi.n	8006774 <_printf_common+0xb0>
 800671c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006720:	4641      	mov	r1, r8
 8006722:	4638      	mov	r0, r7
 8006724:	47c8      	blx	r9
 8006726:	3001      	adds	r0, #1
 8006728:	d01e      	beq.n	8006768 <_printf_common+0xa4>
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	6922      	ldr	r2, [r4, #16]
 800672e:	f003 0306 	and.w	r3, r3, #6
 8006732:	2b04      	cmp	r3, #4
 8006734:	bf02      	ittt	eq
 8006736:	68e5      	ldreq	r5, [r4, #12]
 8006738:	6833      	ldreq	r3, [r6, #0]
 800673a:	1aed      	subeq	r5, r5, r3
 800673c:	68a3      	ldr	r3, [r4, #8]
 800673e:	bf0c      	ite	eq
 8006740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006744:	2500      	movne	r5, #0
 8006746:	4293      	cmp	r3, r2
 8006748:	bfc4      	itt	gt
 800674a:	1a9b      	subgt	r3, r3, r2
 800674c:	18ed      	addgt	r5, r5, r3
 800674e:	2600      	movs	r6, #0
 8006750:	341a      	adds	r4, #26
 8006752:	42b5      	cmp	r5, r6
 8006754:	d11a      	bne.n	800678c <_printf_common+0xc8>
 8006756:	2000      	movs	r0, #0
 8006758:	e008      	b.n	800676c <_printf_common+0xa8>
 800675a:	2301      	movs	r3, #1
 800675c:	4652      	mov	r2, sl
 800675e:	4641      	mov	r1, r8
 8006760:	4638      	mov	r0, r7
 8006762:	47c8      	blx	r9
 8006764:	3001      	adds	r0, #1
 8006766:	d103      	bne.n	8006770 <_printf_common+0xac>
 8006768:	f04f 30ff 	mov.w	r0, #4294967295
 800676c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006770:	3501      	adds	r5, #1
 8006772:	e7c6      	b.n	8006702 <_printf_common+0x3e>
 8006774:	18e1      	adds	r1, r4, r3
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	2030      	movs	r0, #48	@ 0x30
 800677a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800677e:	4422      	add	r2, r4
 8006780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006788:	3302      	adds	r3, #2
 800678a:	e7c7      	b.n	800671c <_printf_common+0x58>
 800678c:	2301      	movs	r3, #1
 800678e:	4622      	mov	r2, r4
 8006790:	4641      	mov	r1, r8
 8006792:	4638      	mov	r0, r7
 8006794:	47c8      	blx	r9
 8006796:	3001      	adds	r0, #1
 8006798:	d0e6      	beq.n	8006768 <_printf_common+0xa4>
 800679a:	3601      	adds	r6, #1
 800679c:	e7d9      	b.n	8006752 <_printf_common+0x8e>
	...

080067a0 <_printf_i>:
 80067a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	7e0f      	ldrb	r7, [r1, #24]
 80067a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067a8:	2f78      	cmp	r7, #120	@ 0x78
 80067aa:	4691      	mov	r9, r2
 80067ac:	4680      	mov	r8, r0
 80067ae:	460c      	mov	r4, r1
 80067b0:	469a      	mov	sl, r3
 80067b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067b6:	d807      	bhi.n	80067c8 <_printf_i+0x28>
 80067b8:	2f62      	cmp	r7, #98	@ 0x62
 80067ba:	d80a      	bhi.n	80067d2 <_printf_i+0x32>
 80067bc:	2f00      	cmp	r7, #0
 80067be:	f000 80d1 	beq.w	8006964 <_printf_i+0x1c4>
 80067c2:	2f58      	cmp	r7, #88	@ 0x58
 80067c4:	f000 80b8 	beq.w	8006938 <_printf_i+0x198>
 80067c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067d0:	e03a      	b.n	8006848 <_printf_i+0xa8>
 80067d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067d6:	2b15      	cmp	r3, #21
 80067d8:	d8f6      	bhi.n	80067c8 <_printf_i+0x28>
 80067da:	a101      	add	r1, pc, #4	@ (adr r1, 80067e0 <_printf_i+0x40>)
 80067dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067e0:	08006839 	.word	0x08006839
 80067e4:	0800684d 	.word	0x0800684d
 80067e8:	080067c9 	.word	0x080067c9
 80067ec:	080067c9 	.word	0x080067c9
 80067f0:	080067c9 	.word	0x080067c9
 80067f4:	080067c9 	.word	0x080067c9
 80067f8:	0800684d 	.word	0x0800684d
 80067fc:	080067c9 	.word	0x080067c9
 8006800:	080067c9 	.word	0x080067c9
 8006804:	080067c9 	.word	0x080067c9
 8006808:	080067c9 	.word	0x080067c9
 800680c:	0800694b 	.word	0x0800694b
 8006810:	08006877 	.word	0x08006877
 8006814:	08006905 	.word	0x08006905
 8006818:	080067c9 	.word	0x080067c9
 800681c:	080067c9 	.word	0x080067c9
 8006820:	0800696d 	.word	0x0800696d
 8006824:	080067c9 	.word	0x080067c9
 8006828:	08006877 	.word	0x08006877
 800682c:	080067c9 	.word	0x080067c9
 8006830:	080067c9 	.word	0x080067c9
 8006834:	0800690d 	.word	0x0800690d
 8006838:	6833      	ldr	r3, [r6, #0]
 800683a:	1d1a      	adds	r2, r3, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6032      	str	r2, [r6, #0]
 8006840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006848:	2301      	movs	r3, #1
 800684a:	e09c      	b.n	8006986 <_printf_i+0x1e6>
 800684c:	6833      	ldr	r3, [r6, #0]
 800684e:	6820      	ldr	r0, [r4, #0]
 8006850:	1d19      	adds	r1, r3, #4
 8006852:	6031      	str	r1, [r6, #0]
 8006854:	0606      	lsls	r6, r0, #24
 8006856:	d501      	bpl.n	800685c <_printf_i+0xbc>
 8006858:	681d      	ldr	r5, [r3, #0]
 800685a:	e003      	b.n	8006864 <_printf_i+0xc4>
 800685c:	0645      	lsls	r5, r0, #25
 800685e:	d5fb      	bpl.n	8006858 <_printf_i+0xb8>
 8006860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006864:	2d00      	cmp	r5, #0
 8006866:	da03      	bge.n	8006870 <_printf_i+0xd0>
 8006868:	232d      	movs	r3, #45	@ 0x2d
 800686a:	426d      	negs	r5, r5
 800686c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006870:	4858      	ldr	r0, [pc, #352]	@ (80069d4 <_printf_i+0x234>)
 8006872:	230a      	movs	r3, #10
 8006874:	e011      	b.n	800689a <_printf_i+0xfa>
 8006876:	6821      	ldr	r1, [r4, #0]
 8006878:	6833      	ldr	r3, [r6, #0]
 800687a:	0608      	lsls	r0, r1, #24
 800687c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006880:	d402      	bmi.n	8006888 <_printf_i+0xe8>
 8006882:	0649      	lsls	r1, r1, #25
 8006884:	bf48      	it	mi
 8006886:	b2ad      	uxthmi	r5, r5
 8006888:	2f6f      	cmp	r7, #111	@ 0x6f
 800688a:	4852      	ldr	r0, [pc, #328]	@ (80069d4 <_printf_i+0x234>)
 800688c:	6033      	str	r3, [r6, #0]
 800688e:	bf14      	ite	ne
 8006890:	230a      	movne	r3, #10
 8006892:	2308      	moveq	r3, #8
 8006894:	2100      	movs	r1, #0
 8006896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800689a:	6866      	ldr	r6, [r4, #4]
 800689c:	60a6      	str	r6, [r4, #8]
 800689e:	2e00      	cmp	r6, #0
 80068a0:	db05      	blt.n	80068ae <_printf_i+0x10e>
 80068a2:	6821      	ldr	r1, [r4, #0]
 80068a4:	432e      	orrs	r6, r5
 80068a6:	f021 0104 	bic.w	r1, r1, #4
 80068aa:	6021      	str	r1, [r4, #0]
 80068ac:	d04b      	beq.n	8006946 <_printf_i+0x1a6>
 80068ae:	4616      	mov	r6, r2
 80068b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80068b4:	fb03 5711 	mls	r7, r3, r1, r5
 80068b8:	5dc7      	ldrb	r7, [r0, r7]
 80068ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068be:	462f      	mov	r7, r5
 80068c0:	42bb      	cmp	r3, r7
 80068c2:	460d      	mov	r5, r1
 80068c4:	d9f4      	bls.n	80068b0 <_printf_i+0x110>
 80068c6:	2b08      	cmp	r3, #8
 80068c8:	d10b      	bne.n	80068e2 <_printf_i+0x142>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	07df      	lsls	r7, r3, #31
 80068ce:	d508      	bpl.n	80068e2 <_printf_i+0x142>
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	6861      	ldr	r1, [r4, #4]
 80068d4:	4299      	cmp	r1, r3
 80068d6:	bfde      	ittt	le
 80068d8:	2330      	movle	r3, #48	@ 0x30
 80068da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068e2:	1b92      	subs	r2, r2, r6
 80068e4:	6122      	str	r2, [r4, #16]
 80068e6:	f8cd a000 	str.w	sl, [sp]
 80068ea:	464b      	mov	r3, r9
 80068ec:	aa03      	add	r2, sp, #12
 80068ee:	4621      	mov	r1, r4
 80068f0:	4640      	mov	r0, r8
 80068f2:	f7ff fee7 	bl	80066c4 <_printf_common>
 80068f6:	3001      	adds	r0, #1
 80068f8:	d14a      	bne.n	8006990 <_printf_i+0x1f0>
 80068fa:	f04f 30ff 	mov.w	r0, #4294967295
 80068fe:	b004      	add	sp, #16
 8006900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	f043 0320 	orr.w	r3, r3, #32
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	4832      	ldr	r0, [pc, #200]	@ (80069d8 <_printf_i+0x238>)
 800690e:	2778      	movs	r7, #120	@ 0x78
 8006910:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	6831      	ldr	r1, [r6, #0]
 8006918:	061f      	lsls	r7, r3, #24
 800691a:	f851 5b04 	ldr.w	r5, [r1], #4
 800691e:	d402      	bmi.n	8006926 <_printf_i+0x186>
 8006920:	065f      	lsls	r7, r3, #25
 8006922:	bf48      	it	mi
 8006924:	b2ad      	uxthmi	r5, r5
 8006926:	6031      	str	r1, [r6, #0]
 8006928:	07d9      	lsls	r1, r3, #31
 800692a:	bf44      	itt	mi
 800692c:	f043 0320 	orrmi.w	r3, r3, #32
 8006930:	6023      	strmi	r3, [r4, #0]
 8006932:	b11d      	cbz	r5, 800693c <_printf_i+0x19c>
 8006934:	2310      	movs	r3, #16
 8006936:	e7ad      	b.n	8006894 <_printf_i+0xf4>
 8006938:	4826      	ldr	r0, [pc, #152]	@ (80069d4 <_printf_i+0x234>)
 800693a:	e7e9      	b.n	8006910 <_printf_i+0x170>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	f023 0320 	bic.w	r3, r3, #32
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	e7f6      	b.n	8006934 <_printf_i+0x194>
 8006946:	4616      	mov	r6, r2
 8006948:	e7bd      	b.n	80068c6 <_printf_i+0x126>
 800694a:	6833      	ldr	r3, [r6, #0]
 800694c:	6825      	ldr	r5, [r4, #0]
 800694e:	6961      	ldr	r1, [r4, #20]
 8006950:	1d18      	adds	r0, r3, #4
 8006952:	6030      	str	r0, [r6, #0]
 8006954:	062e      	lsls	r6, r5, #24
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	d501      	bpl.n	800695e <_printf_i+0x1be>
 800695a:	6019      	str	r1, [r3, #0]
 800695c:	e002      	b.n	8006964 <_printf_i+0x1c4>
 800695e:	0668      	lsls	r0, r5, #25
 8006960:	d5fb      	bpl.n	800695a <_printf_i+0x1ba>
 8006962:	8019      	strh	r1, [r3, #0]
 8006964:	2300      	movs	r3, #0
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	4616      	mov	r6, r2
 800696a:	e7bc      	b.n	80068e6 <_printf_i+0x146>
 800696c:	6833      	ldr	r3, [r6, #0]
 800696e:	1d1a      	adds	r2, r3, #4
 8006970:	6032      	str	r2, [r6, #0]
 8006972:	681e      	ldr	r6, [r3, #0]
 8006974:	6862      	ldr	r2, [r4, #4]
 8006976:	2100      	movs	r1, #0
 8006978:	4630      	mov	r0, r6
 800697a:	f7f9 fc49 	bl	8000210 <memchr>
 800697e:	b108      	cbz	r0, 8006984 <_printf_i+0x1e4>
 8006980:	1b80      	subs	r0, r0, r6
 8006982:	6060      	str	r0, [r4, #4]
 8006984:	6863      	ldr	r3, [r4, #4]
 8006986:	6123      	str	r3, [r4, #16]
 8006988:	2300      	movs	r3, #0
 800698a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800698e:	e7aa      	b.n	80068e6 <_printf_i+0x146>
 8006990:	6923      	ldr	r3, [r4, #16]
 8006992:	4632      	mov	r2, r6
 8006994:	4649      	mov	r1, r9
 8006996:	4640      	mov	r0, r8
 8006998:	47d0      	blx	sl
 800699a:	3001      	adds	r0, #1
 800699c:	d0ad      	beq.n	80068fa <_printf_i+0x15a>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	079b      	lsls	r3, r3, #30
 80069a2:	d413      	bmi.n	80069cc <_printf_i+0x22c>
 80069a4:	68e0      	ldr	r0, [r4, #12]
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	4298      	cmp	r0, r3
 80069aa:	bfb8      	it	lt
 80069ac:	4618      	movlt	r0, r3
 80069ae:	e7a6      	b.n	80068fe <_printf_i+0x15e>
 80069b0:	2301      	movs	r3, #1
 80069b2:	4632      	mov	r2, r6
 80069b4:	4649      	mov	r1, r9
 80069b6:	4640      	mov	r0, r8
 80069b8:	47d0      	blx	sl
 80069ba:	3001      	adds	r0, #1
 80069bc:	d09d      	beq.n	80068fa <_printf_i+0x15a>
 80069be:	3501      	adds	r5, #1
 80069c0:	68e3      	ldr	r3, [r4, #12]
 80069c2:	9903      	ldr	r1, [sp, #12]
 80069c4:	1a5b      	subs	r3, r3, r1
 80069c6:	42ab      	cmp	r3, r5
 80069c8:	dcf2      	bgt.n	80069b0 <_printf_i+0x210>
 80069ca:	e7eb      	b.n	80069a4 <_printf_i+0x204>
 80069cc:	2500      	movs	r5, #0
 80069ce:	f104 0619 	add.w	r6, r4, #25
 80069d2:	e7f5      	b.n	80069c0 <_printf_i+0x220>
 80069d4:	0800718e 	.word	0x0800718e
 80069d8:	0800719f 	.word	0x0800719f

080069dc <__sflush_r>:
 80069dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e4:	0716      	lsls	r6, r2, #28
 80069e6:	4605      	mov	r5, r0
 80069e8:	460c      	mov	r4, r1
 80069ea:	d454      	bmi.n	8006a96 <__sflush_r+0xba>
 80069ec:	684b      	ldr	r3, [r1, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	dc02      	bgt.n	80069f8 <__sflush_r+0x1c>
 80069f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dd48      	ble.n	8006a8a <__sflush_r+0xae>
 80069f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069fa:	2e00      	cmp	r6, #0
 80069fc:	d045      	beq.n	8006a8a <__sflush_r+0xae>
 80069fe:	2300      	movs	r3, #0
 8006a00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a04:	682f      	ldr	r7, [r5, #0]
 8006a06:	6a21      	ldr	r1, [r4, #32]
 8006a08:	602b      	str	r3, [r5, #0]
 8006a0a:	d030      	beq.n	8006a6e <__sflush_r+0x92>
 8006a0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	0759      	lsls	r1, r3, #29
 8006a12:	d505      	bpl.n	8006a20 <__sflush_r+0x44>
 8006a14:	6863      	ldr	r3, [r4, #4]
 8006a16:	1ad2      	subs	r2, r2, r3
 8006a18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a1a:	b10b      	cbz	r3, 8006a20 <__sflush_r+0x44>
 8006a1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a1e:	1ad2      	subs	r2, r2, r3
 8006a20:	2300      	movs	r3, #0
 8006a22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a24:	6a21      	ldr	r1, [r4, #32]
 8006a26:	4628      	mov	r0, r5
 8006a28:	47b0      	blx	r6
 8006a2a:	1c43      	adds	r3, r0, #1
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	d106      	bne.n	8006a3e <__sflush_r+0x62>
 8006a30:	6829      	ldr	r1, [r5, #0]
 8006a32:	291d      	cmp	r1, #29
 8006a34:	d82b      	bhi.n	8006a8e <__sflush_r+0xb2>
 8006a36:	4a2a      	ldr	r2, [pc, #168]	@ (8006ae0 <__sflush_r+0x104>)
 8006a38:	40ca      	lsrs	r2, r1
 8006a3a:	07d6      	lsls	r6, r2, #31
 8006a3c:	d527      	bpl.n	8006a8e <__sflush_r+0xb2>
 8006a3e:	2200      	movs	r2, #0
 8006a40:	6062      	str	r2, [r4, #4]
 8006a42:	04d9      	lsls	r1, r3, #19
 8006a44:	6922      	ldr	r2, [r4, #16]
 8006a46:	6022      	str	r2, [r4, #0]
 8006a48:	d504      	bpl.n	8006a54 <__sflush_r+0x78>
 8006a4a:	1c42      	adds	r2, r0, #1
 8006a4c:	d101      	bne.n	8006a52 <__sflush_r+0x76>
 8006a4e:	682b      	ldr	r3, [r5, #0]
 8006a50:	b903      	cbnz	r3, 8006a54 <__sflush_r+0x78>
 8006a52:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a56:	602f      	str	r7, [r5, #0]
 8006a58:	b1b9      	cbz	r1, 8006a8a <__sflush_r+0xae>
 8006a5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a5e:	4299      	cmp	r1, r3
 8006a60:	d002      	beq.n	8006a68 <__sflush_r+0x8c>
 8006a62:	4628      	mov	r0, r5
 8006a64:	f7ff fb4a 	bl	80060fc <_free_r>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a6c:	e00d      	b.n	8006a8a <__sflush_r+0xae>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b0      	blx	r6
 8006a74:	4602      	mov	r2, r0
 8006a76:	1c50      	adds	r0, r2, #1
 8006a78:	d1c9      	bne.n	8006a0e <__sflush_r+0x32>
 8006a7a:	682b      	ldr	r3, [r5, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0c6      	beq.n	8006a0e <__sflush_r+0x32>
 8006a80:	2b1d      	cmp	r3, #29
 8006a82:	d001      	beq.n	8006a88 <__sflush_r+0xac>
 8006a84:	2b16      	cmp	r3, #22
 8006a86:	d11e      	bne.n	8006ac6 <__sflush_r+0xea>
 8006a88:	602f      	str	r7, [r5, #0]
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	e022      	b.n	8006ad4 <__sflush_r+0xf8>
 8006a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a92:	b21b      	sxth	r3, r3
 8006a94:	e01b      	b.n	8006ace <__sflush_r+0xf2>
 8006a96:	690f      	ldr	r7, [r1, #16]
 8006a98:	2f00      	cmp	r7, #0
 8006a9a:	d0f6      	beq.n	8006a8a <__sflush_r+0xae>
 8006a9c:	0793      	lsls	r3, r2, #30
 8006a9e:	680e      	ldr	r6, [r1, #0]
 8006aa0:	bf08      	it	eq
 8006aa2:	694b      	ldreq	r3, [r1, #20]
 8006aa4:	600f      	str	r7, [r1, #0]
 8006aa6:	bf18      	it	ne
 8006aa8:	2300      	movne	r3, #0
 8006aaa:	eba6 0807 	sub.w	r8, r6, r7
 8006aae:	608b      	str	r3, [r1, #8]
 8006ab0:	f1b8 0f00 	cmp.w	r8, #0
 8006ab4:	dde9      	ble.n	8006a8a <__sflush_r+0xae>
 8006ab6:	6a21      	ldr	r1, [r4, #32]
 8006ab8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006aba:	4643      	mov	r3, r8
 8006abc:	463a      	mov	r2, r7
 8006abe:	4628      	mov	r0, r5
 8006ac0:	47b0      	blx	r6
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	dc08      	bgt.n	8006ad8 <__sflush_r+0xfc>
 8006ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ace:	81a3      	strh	r3, [r4, #12]
 8006ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad8:	4407      	add	r7, r0
 8006ada:	eba8 0800 	sub.w	r8, r8, r0
 8006ade:	e7e7      	b.n	8006ab0 <__sflush_r+0xd4>
 8006ae0:	20400001 	.word	0x20400001

08006ae4 <_fflush_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	690b      	ldr	r3, [r1, #16]
 8006ae8:	4605      	mov	r5, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	b913      	cbnz	r3, 8006af4 <_fflush_r+0x10>
 8006aee:	2500      	movs	r5, #0
 8006af0:	4628      	mov	r0, r5
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	b118      	cbz	r0, 8006afe <_fflush_r+0x1a>
 8006af6:	6a03      	ldr	r3, [r0, #32]
 8006af8:	b90b      	cbnz	r3, 8006afe <_fflush_r+0x1a>
 8006afa:	f7ff f853 	bl	8005ba4 <__sinit>
 8006afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0f3      	beq.n	8006aee <_fflush_r+0xa>
 8006b06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b08:	07d0      	lsls	r0, r2, #31
 8006b0a:	d404      	bmi.n	8006b16 <_fflush_r+0x32>
 8006b0c:	0599      	lsls	r1, r3, #22
 8006b0e:	d402      	bmi.n	8006b16 <_fflush_r+0x32>
 8006b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b12:	f7ff fae2 	bl	80060da <__retarget_lock_acquire_recursive>
 8006b16:	4628      	mov	r0, r5
 8006b18:	4621      	mov	r1, r4
 8006b1a:	f7ff ff5f 	bl	80069dc <__sflush_r>
 8006b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b20:	07da      	lsls	r2, r3, #31
 8006b22:	4605      	mov	r5, r0
 8006b24:	d4e4      	bmi.n	8006af0 <_fflush_r+0xc>
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	059b      	lsls	r3, r3, #22
 8006b2a:	d4e1      	bmi.n	8006af0 <_fflush_r+0xc>
 8006b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b2e:	f7ff fad5 	bl	80060dc <__retarget_lock_release_recursive>
 8006b32:	e7dd      	b.n	8006af0 <_fflush_r+0xc>

08006b34 <__swhatbuf_r>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	460c      	mov	r4, r1
 8006b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3c:	2900      	cmp	r1, #0
 8006b3e:	b096      	sub	sp, #88	@ 0x58
 8006b40:	4615      	mov	r5, r2
 8006b42:	461e      	mov	r6, r3
 8006b44:	da0d      	bge.n	8006b62 <__swhatbuf_r+0x2e>
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b4c:	f04f 0100 	mov.w	r1, #0
 8006b50:	bf14      	ite	ne
 8006b52:	2340      	movne	r3, #64	@ 0x40
 8006b54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b58:	2000      	movs	r0, #0
 8006b5a:	6031      	str	r1, [r6, #0]
 8006b5c:	602b      	str	r3, [r5, #0]
 8006b5e:	b016      	add	sp, #88	@ 0x58
 8006b60:	bd70      	pop	{r4, r5, r6, pc}
 8006b62:	466a      	mov	r2, sp
 8006b64:	f000 f862 	bl	8006c2c <_fstat_r>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	dbec      	blt.n	8006b46 <__swhatbuf_r+0x12>
 8006b6c:	9901      	ldr	r1, [sp, #4]
 8006b6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b76:	4259      	negs	r1, r3
 8006b78:	4159      	adcs	r1, r3
 8006b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b7e:	e7eb      	b.n	8006b58 <__swhatbuf_r+0x24>

08006b80 <__smakebuf_r>:
 8006b80:	898b      	ldrh	r3, [r1, #12]
 8006b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b84:	079d      	lsls	r5, r3, #30
 8006b86:	4606      	mov	r6, r0
 8006b88:	460c      	mov	r4, r1
 8006b8a:	d507      	bpl.n	8006b9c <__smakebuf_r+0x1c>
 8006b8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	6123      	str	r3, [r4, #16]
 8006b94:	2301      	movs	r3, #1
 8006b96:	6163      	str	r3, [r4, #20]
 8006b98:	b003      	add	sp, #12
 8006b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b9c:	ab01      	add	r3, sp, #4
 8006b9e:	466a      	mov	r2, sp
 8006ba0:	f7ff ffc8 	bl	8006b34 <__swhatbuf_r>
 8006ba4:	9f00      	ldr	r7, [sp, #0]
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	4639      	mov	r1, r7
 8006baa:	4630      	mov	r0, r6
 8006bac:	f7fe fe5e 	bl	800586c <_malloc_r>
 8006bb0:	b948      	cbnz	r0, 8006bc6 <__smakebuf_r+0x46>
 8006bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bb6:	059a      	lsls	r2, r3, #22
 8006bb8:	d4ee      	bmi.n	8006b98 <__smakebuf_r+0x18>
 8006bba:	f023 0303 	bic.w	r3, r3, #3
 8006bbe:	f043 0302 	orr.w	r3, r3, #2
 8006bc2:	81a3      	strh	r3, [r4, #12]
 8006bc4:	e7e2      	b.n	8006b8c <__smakebuf_r+0xc>
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	6020      	str	r0, [r4, #0]
 8006bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bce:	81a3      	strh	r3, [r4, #12]
 8006bd0:	9b01      	ldr	r3, [sp, #4]
 8006bd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bd6:	b15b      	cbz	r3, 8006bf0 <__smakebuf_r+0x70>
 8006bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f000 f837 	bl	8006c50 <_isatty_r>
 8006be2:	b128      	cbz	r0, 8006bf0 <__smakebuf_r+0x70>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	f023 0303 	bic.w	r3, r3, #3
 8006bea:	f043 0301 	orr.w	r3, r3, #1
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	431d      	orrs	r5, r3
 8006bf4:	81a5      	strh	r5, [r4, #12]
 8006bf6:	e7cf      	b.n	8006b98 <__smakebuf_r+0x18>

08006bf8 <memmove>:
 8006bf8:	4288      	cmp	r0, r1
 8006bfa:	b510      	push	{r4, lr}
 8006bfc:	eb01 0402 	add.w	r4, r1, r2
 8006c00:	d902      	bls.n	8006c08 <memmove+0x10>
 8006c02:	4284      	cmp	r4, r0
 8006c04:	4623      	mov	r3, r4
 8006c06:	d807      	bhi.n	8006c18 <memmove+0x20>
 8006c08:	1e43      	subs	r3, r0, #1
 8006c0a:	42a1      	cmp	r1, r4
 8006c0c:	d008      	beq.n	8006c20 <memmove+0x28>
 8006c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c16:	e7f8      	b.n	8006c0a <memmove+0x12>
 8006c18:	4402      	add	r2, r0
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	428a      	cmp	r2, r1
 8006c1e:	d100      	bne.n	8006c22 <memmove+0x2a>
 8006c20:	bd10      	pop	{r4, pc}
 8006c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c2a:	e7f7      	b.n	8006c1c <memmove+0x24>

08006c2c <_fstat_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4d07      	ldr	r5, [pc, #28]	@ (8006c4c <_fstat_r+0x20>)
 8006c30:	2300      	movs	r3, #0
 8006c32:	4604      	mov	r4, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	4611      	mov	r1, r2
 8006c38:	602b      	str	r3, [r5, #0]
 8006c3a:	f7fa f9f6 	bl	800102a <_fstat>
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	d102      	bne.n	8006c48 <_fstat_r+0x1c>
 8006c42:	682b      	ldr	r3, [r5, #0]
 8006c44:	b103      	cbz	r3, 8006c48 <_fstat_r+0x1c>
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	bd38      	pop	{r3, r4, r5, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20008274 	.word	0x20008274

08006c50 <_isatty_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4d06      	ldr	r5, [pc, #24]	@ (8006c6c <_isatty_r+0x1c>)
 8006c54:	2300      	movs	r3, #0
 8006c56:	4604      	mov	r4, r0
 8006c58:	4608      	mov	r0, r1
 8006c5a:	602b      	str	r3, [r5, #0]
 8006c5c:	f7fa f9f5 	bl	800104a <_isatty>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d102      	bne.n	8006c6a <_isatty_r+0x1a>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	b103      	cbz	r3, 8006c6a <_isatty_r+0x1a>
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	20008274 	.word	0x20008274

08006c70 <_realloc_r>:
 8006c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c74:	4607      	mov	r7, r0
 8006c76:	4614      	mov	r4, r2
 8006c78:	460d      	mov	r5, r1
 8006c7a:	b921      	cbnz	r1, 8006c86 <_realloc_r+0x16>
 8006c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c80:	4611      	mov	r1, r2
 8006c82:	f7fe bdf3 	b.w	800586c <_malloc_r>
 8006c86:	b92a      	cbnz	r2, 8006c94 <_realloc_r+0x24>
 8006c88:	f7ff fa38 	bl	80060fc <_free_r>
 8006c8c:	4625      	mov	r5, r4
 8006c8e:	4628      	mov	r0, r5
 8006c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c94:	f000 f81a 	bl	8006ccc <_malloc_usable_size_r>
 8006c98:	4284      	cmp	r4, r0
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	d802      	bhi.n	8006ca4 <_realloc_r+0x34>
 8006c9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ca2:	d8f4      	bhi.n	8006c8e <_realloc_r+0x1e>
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	4638      	mov	r0, r7
 8006ca8:	f7fe fde0 	bl	800586c <_malloc_r>
 8006cac:	4680      	mov	r8, r0
 8006cae:	b908      	cbnz	r0, 8006cb4 <_realloc_r+0x44>
 8006cb0:	4645      	mov	r5, r8
 8006cb2:	e7ec      	b.n	8006c8e <_realloc_r+0x1e>
 8006cb4:	42b4      	cmp	r4, r6
 8006cb6:	4622      	mov	r2, r4
 8006cb8:	4629      	mov	r1, r5
 8006cba:	bf28      	it	cs
 8006cbc:	4632      	movcs	r2, r6
 8006cbe:	f7ff fa0e 	bl	80060de <memcpy>
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f7ff fa19 	bl	80060fc <_free_r>
 8006cca:	e7f1      	b.n	8006cb0 <_realloc_r+0x40>

08006ccc <_malloc_usable_size_r>:
 8006ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cd0:	1f18      	subs	r0, r3, #4
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	bfbc      	itt	lt
 8006cd6:	580b      	ldrlt	r3, [r1, r0]
 8006cd8:	18c0      	addlt	r0, r0, r3
 8006cda:	4770      	bx	lr

08006cdc <_init>:
 8006cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cde:	bf00      	nop
 8006ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce2:	bc08      	pop	{r3}
 8006ce4:	469e      	mov	lr, r3
 8006ce6:	4770      	bx	lr

08006ce8 <_fini>:
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cea:	bf00      	nop
 8006cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cee:	bc08      	pop	{r3}
 8006cf0:	469e      	mov	lr, r3
 8006cf2:	4770      	bx	lr
