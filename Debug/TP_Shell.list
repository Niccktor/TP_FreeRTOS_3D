
TP_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08006da4  08006da4  00007da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c4  080072c4  00009078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080072c4  080072c4  000082c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072cc  080072cc  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072cc  080072cc  000082cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072d0  080072d0  000082d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080072d4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004604  20000078  0800734c  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000467c  0800734c  0000967c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001401a  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003574  00000000  00000000  0001d0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00020638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b76  00000000  00000000  00021550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002860b  00000000  00000000  000220c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bc2  00000000  00000000  0004a6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f123b  00000000  00000000  0005e293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f4ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004574  00000000  00000000  0014f514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00153a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d8c 	.word	0x08006d8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006d8c 	.word	0x08006d8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000098 	.word	0x20000098
 800060c:	20000138 	.word	0x20000138

08000610 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_FREERTOS_Init+0x30>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fc3c 	bl	8003eaa <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a03      	ldr	r2, [pc, #12]	@ (8000644 <MX_FREERTOS_Init+0x34>)
 8000636:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	08006db0 	.word	0x08006db0
 8000644:	20000094 	.word	0x20000094

08000648 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f003 fc76 	bl	8003f42 <osDelay>
 8000656:	e7fb      	b.n	8000650 <StartDefaultTask+0x8>

08000658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	@ 0x28
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b2a      	ldr	r3, [pc, #168]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a29      	ldr	r2, [pc, #164]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <MX_GPIO_Init+0xc0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a23      	ldr	r2, [pc, #140]	@ (8000718 <MX_GPIO_Init+0xc0>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800069e:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2102      	movs	r1, #2
 80006d2:	4812      	ldr	r0, [pc, #72]	@ (800071c <MX_GPIO_Init+0xc4>)
 80006d4:	f001 f9e6 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006d8:	2302      	movs	r3, #2
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	480b      	ldr	r0, [pc, #44]	@ (800071c <MX_GPIO_Init+0xc4>)
 80006f0:	f001 f82c 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80006f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_GPIO_Init+0xc4>)
 800070a:	f001 f81f 	bl	800174c <HAL_GPIO_Init>

}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	@ 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40022000 	.word	0x40022000

08000720 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000728:	1d39      	adds	r1, r7, #4
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	2201      	movs	r2, #1
 8000730:	4803      	ldr	r0, [pc, #12]	@ (8000740 <__io_putchar+0x20>)
 8000732:	f002 fae9 	bl	8002d08 <HAL_UART_Transmit>

	return ch;
 8000736:	687b      	ldr	r3, [r7, #4]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000758 	.word	0x20000758

08000744 <sh_led>:


uint32_t led_delay_ms = 100;

int sh_led(h_shell_t *h_shell, int argc, char **argv)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
	static int bool = 1;
	int value = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

	if (argc == 2)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	2b02      	cmp	r3, #2
 8000758:	d110      	bne.n	800077c <sh_led+0x38>
	{
		value = atoi(argv[1]);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	3304      	adds	r3, #4
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f005 f8b5 	bl	80058d0 <atoi>
 8000766:	6178      	str	r0, [r7, #20]
		if (value >= 30)
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	2b1d      	cmp	r3, #29
 800076c:	dd06      	ble.n	800077c <sh_led+0x38>
		{
			led_delay_ms = value;
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	4a15      	ldr	r2, [pc, #84]	@ (80007c8 <sh_led+0x84>)
 8000772:	6013      	str	r3, [r2, #0]
			printf("Value of Led Task %d\r\n", value);
 8000774:	6979      	ldr	r1, [r7, #20]
 8000776:	4815      	ldr	r0, [pc, #84]	@ (80007cc <sh_led+0x88>)
 8000778:	f005 f9f4 	bl	8005b64 <iprintf>
		}
	}
	if (bool == 0 || (argc == 2 && value != 0))
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <sh_led+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <sh_led+0x4c>
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d10b      	bne.n	80007a2 <sh_led+0x5e>
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d008      	beq.n	80007a2 <sh_led+0x5e>
	{
		vTaskResume(LedTaskHandle);
 8000790:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <sh_led+0x90>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f004 f82d 	bl	80047f4 <vTaskResume>
		bool = 1;
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <sh_led+0x8c>)
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	e00c      	b.n	80007bc <sh_led+0x78>
	}
	else
	{
		vTaskSuspend(LedTaskHandle);
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <sh_led+0x90>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 ff5a 	bl	8004660 <vTaskSuspend>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2102      	movs	r1, #2
 80007b0:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <sh_led+0x94>)
 80007b2:	f001 f977 	bl	8001aa4 <HAL_GPIO_WritePin>
		bool = 0;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <sh_led+0x8c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
	}
	return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000000 	.word	0x20000000
 80007cc:	08006dcc 	.word	0x08006dcc
 80007d0:	20000004 	.word	0x20000004
 80007d4:	20000744 	.word	0x20000744
 80007d8:	40022000 	.word	0x40022000

080007dc <StartLedTask>:

void StartLedTask(void *argument) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	uint8_t ledState = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
	printf("Entering LedTask\n");
 80007e8:	4811      	ldr	r0, [pc, #68]	@ (8000830 <StartLedTask+0x54>)
 80007ea:	f005 fa23 	bl	8005c34 <puts>
	for (;;) {
		ledState = !ledState;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf14      	ite	ne
 8000802:	2301      	movne	r3, #1
 8000804:	2300      	moveq	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	2102      	movs	r1, #2
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <StartLedTask+0x58>)
 800080e:	f001 f949 	bl	8001aa4 <HAL_GPIO_WritePin>
		//printf("LED : %s\r\n", ledState ? "ON" : "OFF");
		vTaskDelay(pdMS_TO_TICKS(led_delay_ms));
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <StartLedTask+0x5c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800081a:	fb02 f303 	mul.w	r3, r2, r3
 800081e:	4a07      	ldr	r2, [pc, #28]	@ (800083c <StartLedTask+0x60>)
 8000820:	fba2 2303 	umull	r2, r3, r2, r3
 8000824:	099b      	lsrs	r3, r3, #6
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fee2 	bl	80045f0 <vTaskDelay>
		ledState = !ledState;
 800082c:	bf00      	nop
 800082e:	e7de      	b.n	80007ee <StartLedTask+0x12>
 8000830:	08006de4 	.word	0x08006de4
 8000834:	40022000 	.word	0x40022000
 8000838:	20000000 	.word	0x20000000
 800083c:	10624dd3 	.word	0x10624dd3

08000840 <ShellTask>:
		}
	}
}

void ShellTask(void *argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		shell_run(&h_shell); // Appelle ta fonction qui lit rx_buffer et traite les commandes
 8000848:	4803      	ldr	r0, [pc, #12]	@ (8000858 <ShellTask+0x18>)
 800084a:	f000 fad5 	bl	8000df8 <shell_run>
		vTaskDelay(pdMS_TO_TICKS(10)); // Petit délai pour éviter de saturer la CPU
 800084e:	200a      	movs	r0, #10
 8000850:	f003 fece 	bl	80045f0 <vTaskDelay>
		shell_run(&h_shell); // Appelle ta fonction qui lit rx_buffer et traite les commandes
 8000854:	bf00      	nop
 8000856:	e7f7      	b.n	8000848 <ShellTask+0x8>
 8000858:	20000338 	.word	0x20000338

0800085c <ErrorTask>:
	}
}

void ErrorTask(void *arg)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	static int size = 2;
	int *buffer = NULL;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]

    for(;;) {
    	printf("ErrorTask Malloc buffer size %d 0x%X\r\n", size, size);
 8000868:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <ErrorTask+0x68>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a15      	ldr	r2, [pc, #84]	@ (80008c4 <ErrorTask+0x68>)
 800086e:	6812      	ldr	r2, [r2, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	4815      	ldr	r0, [pc, #84]	@ (80008c8 <ErrorTask+0x6c>)
 8000874:	f005 f976 	bl	8005b64 <iprintf>
    	buffer = (int *)pvPortMalloc(sizeof(int) * size);
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <ErrorTask+0x68>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4618      	mov	r0, r3
 8000880:	f004 fe3c 	bl	80054fc <pvPortMalloc>
 8000884:	60f8      	str	r0, [r7, #12]
    	if (buffer == NULL)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d108      	bne.n	800089e <ErrorTask+0x42>
    	{
    		printf("ErroTask: Malloc erreur %d 0x%X\t\n", size, size);
 800088c:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <ErrorTask+0x68>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a0c      	ldr	r2, [pc, #48]	@ (80008c4 <ErrorTask+0x68>)
 8000892:	6812      	ldr	r2, [r2, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	480d      	ldr	r0, [pc, #52]	@ (80008cc <ErrorTask+0x70>)
 8000898:	f005 f964 	bl	8005b64 <iprintf>
    		break ;
 800089c:	e00e      	b.n	80008bc <ErrorTask+0x60>
    	}
    	else
    	{
    		size *= 2;
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <ErrorTask+0x68>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4a07      	ldr	r2, [pc, #28]	@ (80008c4 <ErrorTask+0x68>)
 80008a6:	6013      	str	r3, [r2, #0]
    		vPortFree(buffer);
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f004 fef5 	bl	8005698 <vPortFree>
    		buffer = NULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]

    	}
        vTaskDelay(pdMS_TO_TICKS(1000));
 80008b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b6:	f003 fe9b 	bl	80045f0 <vTaskDelay>
    	printf("ErrorTask Malloc buffer size %d 0x%X\r\n", size, size);
 80008ba:	e7d5      	b.n	8000868 <ErrorTask+0xc>
    }
}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000008 	.word	0x20000008
 80008c8:	08006f10 	.word	0x08006f10
 80008cc:	08006f38 	.word	0x08006f38

080008d0 <vOverflowTask>:

void vOverflowTask(void *param)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
    volatile uint8_t  buff[ configMINIMAL_STACK_SIZE / 4 ];

    for( ;; )
    {
        memset((void*)buff, 0xAA, sizeof(buff));
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2220      	movs	r2, #32
 80008de:	21aa      	movs	r1, #170	@ 0xaa
 80008e0:	4618      	mov	r0, r3
 80008e2:	f005 fabd 	bl	8005e60 <memset>
        vOverflowTask( NULL );
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff fff2 	bl	80008d0 <vOverflowTask>
    {
 80008ec:	bf00      	nop
 80008ee:	e7f3      	b.n	80008d8 <vOverflowTask+0x8>

080008f0 <vApplicationStackOverflowHook>:
    }
}

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
    printf("STACK OVERFLOW detected in task: %s\r\n", pcTaskName);
 80008fa:	6839      	ldr	r1, [r7, #0]
 80008fc:	4804      	ldr	r0, [pc, #16]	@ (8000910 <vApplicationStackOverflowHook+0x20>)
 80008fe:	f005 f931 	bl	8005b64 <iprintf>
    Error_Handler();
 8000902:	f000 f905 	bl	8000b10 <Error_Handler>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	08006f5c 	.word	0x08006f5c

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091a:	f000 fd16 	bl	800134a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091e:	f000 f88b 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000922:	f7ff fe99 	bl	8000658 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000926:	f000 fc2d 	bl	8001184 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	shell_init(&h_shell);
 800092a:	4831      	ldr	r0, [pc, #196]	@ (80009f0 <main+0xdc>)
 800092c:	f000 f956 	bl	8000bdc <shell_init>
	QueueTask = xQueueCreate(10, sizeof(uint32_t)); // Create the queue
 8000930:	2200      	movs	r2, #0
 8000932:	2104      	movs	r1, #4
 8000934:	200a      	movs	r0, #10
 8000936:	f003 fc39 	bl	80041ac <xQueueGenericCreate>
 800093a:	4603      	mov	r3, r0
 800093c:	4a2d      	ldr	r2, [pc, #180]	@ (80009f4 <main+0xe0>)
 800093e:	6013      	str	r3, [r2, #0]
	if (QueueTask == NULL) {
 8000940:	4b2c      	ldr	r3, [pc, #176]	@ (80009f4 <main+0xe0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d104      	bne.n	8000952 <main+0x3e>
		printf("Failed to create queue\r\n");
 8000948:	482b      	ldr	r0, [pc, #172]	@ (80009f8 <main+0xe4>)
 800094a:	f005 f973 	bl	8005c34 <puts>
		Error_Handler();
 800094e:	f000 f8df 	bl	8000b10 <Error_Handler>
	}
	//xTaskCreate(TaskGive, "TaskGive", 128, NULL, tskIDLE_PRIORITY + 5, &TaskGiveHandle);
	//xTaskCreate(TaskTake, "TaskTake", 128, NULL, tskIDLE_PRIORITY + 5, &TaskTakeHandle);
	if (xTaskCreate(StartLedTask, "LedTask", 128, NULL, tskIDLE_PRIORITY + 5, &LedTaskHandle) != pdPASS ) {
 8000952:	4b2a      	ldr	r3, [pc, #168]	@ (80009fc <main+0xe8>)
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	2305      	movs	r3, #5
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2300      	movs	r3, #0
 800095c:	2280      	movs	r2, #128	@ 0x80
 800095e:	4928      	ldr	r1, [pc, #160]	@ (8000a00 <main+0xec>)
 8000960:	4828      	ldr	r0, [pc, #160]	@ (8000a04 <main+0xf0>)
 8000962:	f003 fceb 	bl	800433c <xTaskCreate>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	d004      	beq.n	8000976 <main+0x62>
		printf("Failed to create xTaskCreate LedTask\r\n");
 800096c:	4826      	ldr	r0, [pc, #152]	@ (8000a08 <main+0xf4>)
 800096e:	f005 f961 	bl	8005c34 <puts>
		Error_Handler();
 8000972:	f000 f8cd 	bl	8000b10 <Error_Handler>
	}
	if (xTaskCreate(ShellTask, "ShellTask", 128, NULL, tskIDLE_PRIORITY + 5, &ShellTaskHandle) != pdPASS ) {
 8000976:	4b25      	ldr	r3, [pc, #148]	@ (8000a0c <main+0xf8>)
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	2305      	movs	r3, #5
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2300      	movs	r3, #0
 8000980:	2280      	movs	r2, #128	@ 0x80
 8000982:	4923      	ldr	r1, [pc, #140]	@ (8000a10 <main+0xfc>)
 8000984:	4823      	ldr	r0, [pc, #140]	@ (8000a14 <main+0x100>)
 8000986:	f003 fcd9 	bl	800433c <xTaskCreate>
 800098a:	4603      	mov	r3, r0
 800098c:	2b01      	cmp	r3, #1
 800098e:	d004      	beq.n	800099a <main+0x86>
		printf("Failed to create xTaskCreate ShellTask\r\n");
 8000990:	4821      	ldr	r0, [pc, #132]	@ (8000a18 <main+0x104>)
 8000992:	f005 f94f 	bl	8005c34 <puts>
		Error_Handler();
 8000996:	f000 f8bb 	bl	8000b10 <Error_Handler>
	}
	if (xTaskCreate(ErrorTask, "ErrorTask", 128, NULL, tskIDLE_PRIORITY + 5, &ErrorTaskHandle) != pdPASS ) {
 800099a:	4b20      	ldr	r3, [pc, #128]	@ (8000a1c <main+0x108>)
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	2305      	movs	r3, #5
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	2280      	movs	r2, #128	@ 0x80
 80009a6:	491e      	ldr	r1, [pc, #120]	@ (8000a20 <main+0x10c>)
 80009a8:	481e      	ldr	r0, [pc, #120]	@ (8000a24 <main+0x110>)
 80009aa:	f003 fcc7 	bl	800433c <xTaskCreate>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d004      	beq.n	80009be <main+0xaa>
		printf("Failed to create xTaskCreate ErrorTask\r\n");
 80009b4:	481c      	ldr	r0, [pc, #112]	@ (8000a28 <main+0x114>)
 80009b6:	f005 f93d 	bl	8005c34 <puts>
		Error_Handler();
 80009ba:	f000 f8a9 	bl	8000b10 <Error_Handler>
	}
    if (xTaskCreate( vOverflowTask, "overFlowTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY,  NULL) != pdPASS){
 80009be:	2300      	movs	r3, #0
 80009c0:	9301      	str	r3, [sp, #4]
 80009c2:	2300      	movs	r3, #0
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2300      	movs	r3, #0
 80009c8:	2280      	movs	r2, #128	@ 0x80
 80009ca:	4918      	ldr	r1, [pc, #96]	@ (8000a2c <main+0x118>)
 80009cc:	4818      	ldr	r0, [pc, #96]	@ (8000a30 <main+0x11c>)
 80009ce:	f003 fcb5 	bl	800433c <xTaskCreate>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d004      	beq.n	80009e2 <main+0xce>
		printf("Failed to create xTaskCreate overFlowTask\r\n");
 80009d8:	4816      	ldr	r0, [pc, #88]	@ (8000a34 <main+0x120>)
 80009da:	f005 f92b 	bl	8005c34 <puts>
		Error_Handler();
 80009de:	f000 f897 	bl	8000b10 <Error_Handler>
    }
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80009e2:	f7ff fe15 	bl	8000610 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009e6:	f003 fa59 	bl	8003e9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80009ea:	bf00      	nop
 80009ec:	e7fd      	b.n	80009ea <main+0xd6>
 80009ee:	bf00      	nop
 80009f0:	20000338 	.word	0x20000338
 80009f4:	20000750 	.word	0x20000750
 80009f8:	08006f84 	.word	0x08006f84
 80009fc:	20000744 	.word	0x20000744
 8000a00:	08006f9c 	.word	0x08006f9c
 8000a04:	080007dd 	.word	0x080007dd
 8000a08:	08006fa4 	.word	0x08006fa4
 8000a0c:	20000748 	.word	0x20000748
 8000a10:	08006fcc 	.word	0x08006fcc
 8000a14:	08000841 	.word	0x08000841
 8000a18:	08006fd8 	.word	0x08006fd8
 8000a1c:	2000074c 	.word	0x2000074c
 8000a20:	08007000 	.word	0x08007000
 8000a24:	0800085d 	.word	0x0800085d
 8000a28:	0800700c 	.word	0x0800700c
 8000a2c:	08007034 	.word	0x08007034
 8000a30:	080008d1 	.word	0x080008d1
 8000a34:	08007044 	.word	0x08007044

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	@ 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	2230      	movs	r2, #48	@ 0x30
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f005 fa0a 	bl	8005e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b08 <SystemClock_Config+0xd0>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a60:	4a29      	ldr	r2, [pc, #164]	@ (8000b08 <SystemClock_Config+0xd0>)
 8000a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a68:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <SystemClock_Config+0xd0>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a74:	4b25      	ldr	r3, [pc, #148]	@ (8000b0c <SystemClock_Config+0xd4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a24      	ldr	r2, [pc, #144]	@ (8000b0c <SystemClock_Config+0xd4>)
 8000a7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b22      	ldr	r3, [pc, #136]	@ (8000b0c <SystemClock_Config+0xd4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2310      	movs	r3, #16
 8000a96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000aa4:	23d8      	movs	r3, #216	@ 0xd8
 8000aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 f85f 	bl	8001b78 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ac0:	f000 f826 	bl	8000b10 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ac4:	f001 f808 	bl	8001ad8 <HAL_PWREx_EnableOverDrive>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ace:	f000 f81f 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ade:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ae2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	2107      	movs	r1, #7
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fae5 	bl	80020c0 <HAL_RCC_ClockConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000afc:	f000 f808 	bl	8000b10 <Error_Handler>
  }
}
 8000b00:	bf00      	nop
 8000b02:	3750      	adds	r7, #80	@ 0x50
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40007000 	.word	0x40007000

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <Error_Handler+0x8>

08000b1c <sh_useless_fonction>:
#include "shell.h"

#include <stdio.h>

static int sh_useless_fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <sh_useless_fonction+0x3c>)
 8000b30:	2180      	movs	r1, #128	@ 0x80
 8000b32:	4618      	mov	r0, r3
 8000b34:	f005 f886 	bl	8005c44 <sniprintf>
 8000b38:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000b46:	6979      	ldr	r1, [r7, #20]
 8000b48:	b289      	uxth	r1, r1
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4798      	blx	r3

	return 0;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	08007070 	.word	0x08007070

08000b5c <sh_help>:
	static int bool;
	if (bool == 0)
		vTaskSuspend(xTaskToSuspend);
}*/

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b089      	sub	sp, #36	@ 0x24
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e029      	b.n	8000bc2 <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000b74:	68f9      	ldr	r1, [r7, #12]
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	440b      	add	r3, r1
 8000b82:	3304      	adds	r3, #4
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461c      	mov	r4, r3
 8000b88:	68f9      	ldr	r1, [r7, #12]
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4413      	add	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	440b      	add	r3, r1
 8000b96:	330c      	adds	r3, #12
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	4623      	mov	r3, r4
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd8 <sh_help+0x7c>)
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	f005 f84f 	bl	8005c44 <sniprintf>
 8000ba6:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000bb4:	6939      	ldr	r1, [r7, #16]
 8000bb6:	b289      	uxth	r1, r1
 8000bb8:	4610      	mov	r0, r2
 8000bba:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dbd0      	blt.n	8000b6e <sh_help+0x12>
	}

	return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	371c      	adds	r7, #28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd90      	pop	{r4, r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	08007090 	.word	0x08007090

08000bdc <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	int size = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
	h_shell->drv.receive = drv_uart1_receive;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a23      	ldr	r2, [pc, #140]	@ (8000c78 <shell_init+0x9c>)
 8000bec:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
	h_shell->drv.transmit = drv_uart1_transmit;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a22      	ldr	r2, [pc, #136]	@ (8000c7c <shell_init+0xa0>)
 8000bf4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

	h_shell->func_list_size = 0;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000c04:	4a1e      	ldr	r2, [pc, #120]	@ (8000c80 <shell_init+0xa4>)
 8000c06:	2180      	movs	r1, #128	@ 0x80
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f005 f81b 	bl	8005c44 <sniprintf>
 8000c0e:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000c1c:	68f9      	ldr	r1, [r7, #12]
 8000c1e:	b289      	uxth	r1, r1
 8000c20:	4610      	mov	r0, r2
 8000c22:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000c2a:	4a16      	ldr	r2, [pc, #88]	@ (8000c84 <shell_init+0xa8>)
 8000c2c:	2180      	movs	r1, #128	@ 0x80
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f005 f808 	bl	8005c44 <sniprintf>
 8000c34:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000c42:	68f9      	ldr	r1, [r7, #12]
 8000c44:	b289      	uxth	r1, r1
 8000c46:	4610      	mov	r0, r2
 8000c48:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <shell_init+0xac>)
 8000c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c8c <shell_init+0xb0>)
 8000c4e:	2168      	movs	r1, #104	@ 0x68
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f000 f825 	bl	8000ca0 <shell_add>
	shell_add(h_shell, 'f', sh_useless_fonction, "Une fonction inutile");
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <shell_init+0xb4>)
 8000c58:	4a0e      	ldr	r2, [pc, #56]	@ (8000c94 <shell_init+0xb8>)
 8000c5a:	2166      	movs	r1, #102	@ 0x66
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f81f 	bl	8000ca0 <shell_add>
	shell_add(h_shell, 'l', sh_led, "Enable/Disable LedTask and first param set the led Delay");
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <shell_init+0xbc>)
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <shell_init+0xc0>)
 8000c66:	216c      	movs	r1, #108	@ 0x6c
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 f819 	bl	8000ca0 <shell_add>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	08000f15 	.word	0x08000f15
 8000c7c:	08000f3d 	.word	0x08000f3d
 8000c80:	0800709c 	.word	0x0800709c
 8000c84:	080070c4 	.word	0x080070c4
 8000c88:	080070e8 	.word	0x080070e8
 8000c8c:	08000b5d 	.word	0x08000b5d
 8000c90:	080070f0 	.word	0x080070f0
 8000c94:	08000b1d 	.word	0x08000b1d
 8000c98:	08007108 	.word	0x08007108
 8000c9c:	08000745 	.word	0x08000745

08000ca0 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	460b      	mov	r3, r1
 8000cae:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cb6:	dc27      	bgt.n	8000d08 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	68f9      	ldr	r1, [r7, #12]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	3304      	adds	r3, #4
 8000cca:	7afa      	ldrb	r2, [r7, #11]
 8000ccc:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	68f9      	ldr	r1, [r7, #12]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	440b      	add	r3, r1
 8000cde:	3308      	adds	r3, #8
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	68f9      	ldr	r1, [r7, #12]
 8000cea:	4613      	mov	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	330c      	adds	r3, #12
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	601a      	str	r2, [r3, #0]
		return 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	e001      	b.n	8000d0c <shell_add+0x6c>
	}

	return -1;
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b090      	sub	sp, #64	@ 0x40
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d2e:	e041      	b.n	8000db4 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d34:	4613      	mov	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	4413      	add	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	3304      	adds	r3, #4
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d131      	bne.n	8000dae <shell_exec+0x96>
			argc = 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d56:	e013      	b.n	8000d80 <shell_exec+0x68>
				if(*p == ' ') {
 8000d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b20      	cmp	r3, #32
 8000d5e:	d10c      	bne.n	8000d7a <shell_exec+0x62>
					*p = '\0';
 8000d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8000d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000d6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d6e:	3201      	adds	r2, #1
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	3340      	adds	r3, #64	@ 0x40
 8000d74:	443b      	add	r3, r7
 8000d76:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <shell_exec+0x76>
 8000d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d8a:	2b07      	cmp	r3, #7
 8000d8c:	dde4      	ble.n	8000d58 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	3308      	adds	r3, #8
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f107 020c 	add.w	r2, r7, #12
 8000da4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	4798      	blx	r3
 8000daa:	4603      	mov	r3, r0
 8000dac:	e01d      	b.n	8000dea <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000db0:	3301      	adds	r3, #1
 8000db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	dbb8      	blt.n	8000d30 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <shell_exec+0xdc>)
 8000dca:	2180      	movs	r1, #128	@ 0x80
 8000dcc:	f004 ff3a 	bl	8005c44 <sniprintf>
 8000dd0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000de0:	b289      	uxth	r1, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4798      	blx	r3
	return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3740      	adds	r7, #64	@ 0x40
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	08007144 	.word	0x08007144

08000df8 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]


		h_shell->drv.transmit(prompt, 2);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000e0e:	2102      	movs	r1, #2
 8000e10:	483c      	ldr	r0, [pc, #240]	@ (8000f04 <shell_run+0x10c>)
 8000e12:	4798      	blx	r3
		reading = 1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]

		while(reading) {
 8000e18:	e064      	b.n	8000ee4 <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8000e20:	f107 020b 	add.w	r2, r7, #11
 8000e24:	2101      	movs	r1, #1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4798      	blx	r3
			int size;

			switch (c) {
 8000e2a:	7afb      	ldrb	r3, [r7, #11]
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d036      	beq.n	8000e9e <shell_run+0xa6>
 8000e30:	2b0d      	cmp	r3, #13
 8000e32:	d141      	bne.n	8000eb8 <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000e3a:	4a33      	ldr	r2, [pc, #204]	@ (8000f08 <shell_run+0x110>)
 8000e3c:	2180      	movs	r1, #128	@ 0x80
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f004 ff00 	bl	8005c44 <sniprintf>
 8000e44:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000e52:	68f9      	ldr	r1, [r7, #12]
 8000e54:	b289      	uxth	r1, r1
 8000e56:	4610      	mov	r0, r2
 8000e58:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	613a      	str	r2, [r7, #16]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	4413      	add	r3, r2
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8000e76:	4a25      	ldr	r2, [pc, #148]	@ (8000f0c <shell_run+0x114>)
 8000e78:	2180      	movs	r1, #128	@ 0x80
 8000e7a:	f004 fee3 	bl	8005c44 <sniprintf>
 8000e7e:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000e8c:	68f9      	ldr	r1, [r7, #12]
 8000e8e:	b289      	uxth	r1, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4798      	blx	r3
				reading = 0;        //exit read loop
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
				break;
 8000e9c:	e022      	b.n	8000ee4 <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	dd1e      	ble.n	8000ee2 <shell_run+0xea>
					pos--;          //remove it in buffer
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	4817      	ldr	r0, [pc, #92]	@ (8000f10 <shell_run+0x118>)
 8000eb4:	4798      	blx	r3
				}
				break;
 8000eb6:	e014      	b.n	8000ee2 <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ebc:	dc12      	bgt.n	8000ee4 <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000ec4:	f107 020b 	add.w	r2, r7, #11
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1c5a      	adds	r2, r3, #1
 8000ed2:	613a      	str	r2, [r7, #16]
 8000ed4:	7af9      	ldrb	r1, [r7, #11]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	460a      	mov	r2, r1
 8000edc:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 8000ee0:	e000      	b.n	8000ee4 <shell_run+0xec>
				break;
 8000ee2:	bf00      	nop
		while(reading) {
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d197      	bne.n	8000e1a <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ff10 	bl	8000d18 <shell_exec>

	return 0;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	08007174 	.word	0x08007174
 8000f08:	0800715c 	.word	0x0800715c
 8000f0c:	08007160 	.word	0x08007160
 8000f10:	08007170 	.word	0x08007170

08000f14 <drv_uart1_receive>:

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 8000f20:	887a      	ldrh	r2, [r7, #2]
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <drv_uart1_receive+0x24>)
 8000f2a:	f001 ff76 	bl	8002e1a <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000758 	.word	0x20000758

08000f3c <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <drv_uart1_transmit+0x24>)
 8000f52:	f001 fed9 	bl	8002d08 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000758 	.word	0x20000758

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	4a10      	ldr	r2, [pc, #64]	@ (8000fb0 <HAL_MspInit+0x4c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <HAL_MspInit+0x4c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <HAL_MspInit+0x4c>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8e:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <HAL_MspInit+0x4c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	210f      	movs	r1, #15
 8000f9e:	f06f 0001 	mvn.w	r0, #1
 8000fa2:	f000 fb0a 	bl	80015ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <NMI_Handler+0x4>

08000fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fee:	f000 f9e9 	bl	80013c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ff2:	f004 f805 	bl	8005000 <xTaskGetSchedulerState>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d001      	beq.n	8001000 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ffc:	f004 fa2c 	bl	8005458 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <USART1_IRQHandler+0x10>)
 800100a:	f001 ffcf 	bl	8002fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000758 	.word	0x20000758

08001018 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e00a      	b.n	8001040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102a:	f3af 8000 	nop.w
 800102e:	4601      	mov	r1, r0
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	b2ca      	uxtb	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf0      	blt.n	800102a <_read+0x12>
  }

  return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e009      	b.n	8001078 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fb57 	bl	8000720 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf1      	blt.n	8001064 <_write+0x12>
  }
  return len;
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_close>:

int _close(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b2:	605a      	str	r2, [r3, #4]
  return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_isatty>:

int _isatty(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	@ (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	@ (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f004 ff48 	bl	8005fb8 <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20050000 	.word	0x20050000
 8001154:	00000800 	.word	0x00000800
 8001158:	20000754 	.word	0x20000754
 800115c:	20004680 	.word	0x20004680

08001160 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 800118a:	4a15      	ldr	r2, [pc, #84]	@ (80011e0 <MX_USART1_UART_Init+0x5c>)
 800118c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800118e:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011c8:	f001 fd50 	bl	8002c6c <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011d2:	f7ff fc9d 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000758 	.word	0x20000758
 80011e0:	40011000 	.word	0x40011000

080011e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0ac      	sub	sp, #176	@ 0xb0
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 0318 	add.w	r3, r7, #24
 8001200:	2284      	movs	r2, #132	@ 0x84
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f004 fe2b 	bl	8005e60 <memset>
  if(uartHandle->Instance==USART1)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a36      	ldr	r2, [pc, #216]	@ (80012e8 <HAL_UART_MspInit+0x104>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d164      	bne.n	80012de <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001214:	2340      	movs	r3, #64	@ 0x40
 8001216:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001218:	2300      	movs	r3, #0
 800121a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121c:	f107 0318 	add.w	r3, r7, #24
 8001220:	4618      	mov	r0, r3
 8001222:	f001 f933 	bl	800248c <HAL_RCCEx_PeriphCLKConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800122c:	f7ff fc70 	bl	8000b10 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001230:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <HAL_UART_MspInit+0x108>)
 8001232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001234:	4a2d      	ldr	r2, [pc, #180]	@ (80012ec <HAL_UART_MspInit+0x108>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	6453      	str	r3, [r2, #68]	@ 0x44
 800123c:	4b2b      	ldr	r3, [pc, #172]	@ (80012ec <HAL_UART_MspInit+0x108>)
 800123e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001248:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <HAL_UART_MspInit+0x108>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124c:	4a27      	ldr	r2, [pc, #156]	@ (80012ec <HAL_UART_MspInit+0x108>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	6313      	str	r3, [r2, #48]	@ 0x30
 8001254:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <HAL_UART_MspInit+0x108>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <HAL_UART_MspInit+0x108>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	4a21      	ldr	r2, [pc, #132]	@ (80012ec <HAL_UART_MspInit+0x108>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6313      	str	r3, [r2, #48]	@ 0x30
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_UART_MspInit+0x108>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001278:	2380      	movs	r3, #128	@ 0x80
 800127a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001290:	2307      	movs	r3, #7
 8001292:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800129a:	4619      	mov	r1, r3
 800129c:	4814      	ldr	r0, [pc, #80]	@ (80012f0 <HAL_UART_MspInit+0x10c>)
 800129e:	f000 fa55 	bl	800174c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012bc:	2307      	movs	r3, #7
 80012be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012c6:	4619      	mov	r1, r3
 80012c8:	480a      	ldr	r0, [pc, #40]	@ (80012f4 <HAL_UART_MspInit+0x110>)
 80012ca:	f000 fa3f 	bl	800174c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2105      	movs	r1, #5
 80012d2:	2025      	movs	r0, #37	@ 0x25
 80012d4:	f000 f971 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012d8:	2025      	movs	r0, #37	@ 0x25
 80012da:	f000 f98a 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012de:	bf00      	nop
 80012e0:	37b0      	adds	r7, #176	@ 0xb0
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40011000 	.word	0x40011000
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020000 	.word	0x40020000

080012f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001330 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012fc:	f7ff ff30 	bl	8001160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	@ (8001338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	@ (8001344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001326:	f004 fe4d 	bl	8005fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132a:	f7ff faf3 	bl	8000914 <main>
  bx  lr    
 800132e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001330:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800133c:	080072d4 	.word	0x080072d4
  ldr r2, =_sbss
 8001340:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001344:	2000467c 	.word	0x2000467c

08001348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC_IRQHandler>

0800134a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134e:	2003      	movs	r0, #3
 8001350:	f000 f928 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001354:	200f      	movs	r0, #15
 8001356:	f000 f805 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800135a:	f7ff fe03 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f943 	bl	800160e <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 f90b 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	@ (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000000c 	.word	0x2000000c
 80013bc:	20000014 	.word	0x20000014
 80013c0:	20000010 	.word	0x20000010

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000014 	.word	0x20000014
 80013e8:	200007e0 	.word	0x200007e0

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	@ (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200007e0 	.word	0x200007e0

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <__NVIC_SetPriorityGrouping+0x40>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	4313      	orrs	r3, r2
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	@ (8001444 <__NVIC_SetPriorityGrouping+0x40>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00
 8001448:	05fa0000 	.word	0x05fa0000

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	@ (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	@ (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	@ (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	@ 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	@ 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff29 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff3e 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff8e 	bl	80014f8 <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff31 	bl	8001468 <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa2 	bl	8001560 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001632:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff feda 	bl	80013ec <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d008      	beq.n	8001658 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2280      	movs	r2, #128	@ 0x80
 800164a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e052      	b.n	80016fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0216 	bic.w	r2, r2, #22
 8001666:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001676:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	2b00      	cmp	r3, #0
 800167e:	d103      	bne.n	8001688 <HAL_DMA_Abort+0x62>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0208 	bic.w	r2, r2, #8
 8001696:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016a8:	e013      	b.n	80016d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016aa:	f7ff fe9f 	bl	80013ec <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b05      	cmp	r3, #5
 80016b6:	d90c      	bls.n	80016d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2220      	movs	r2, #32
 80016bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2203      	movs	r2, #3
 80016c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e015      	b.n	80016fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1e4      	bne.n	80016aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e4:	223f      	movs	r2, #63	@ 0x3f
 80016e6:	409a      	lsls	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d004      	beq.n	8001724 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2280      	movs	r2, #128	@ 0x80
 800171e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e00c      	b.n	800173e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2205      	movs	r2, #5
 8001728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	@ 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e175      	b.n	8001a58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	429a      	cmp	r2, r3
 8001786:	f040 8164 	bne.w	8001a52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d005      	beq.n	80017a2 <HAL_GPIO_Init+0x56>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d130      	bne.n	8001804 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0201 	and.w	r2, r3, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b03      	cmp	r3, #3
 800180e:	d017      	beq.n	8001840 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d123      	bne.n	8001894 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80be 	beq.w	8001a52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	4b66      	ldr	r3, [pc, #408]	@ (8001a70 <HAL_GPIO_Init+0x324>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	4a65      	ldr	r2, [pc, #404]	@ (8001a70 <HAL_GPIO_Init+0x324>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e2:	4b63      	ldr	r3, [pc, #396]	@ (8001a70 <HAL_GPIO_Init+0x324>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018ee:	4a61      	ldr	r2, [pc, #388]	@ (8001a74 <HAL_GPIO_Init+0x328>)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	220f      	movs	r2, #15
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a58      	ldr	r2, [pc, #352]	@ (8001a78 <HAL_GPIO_Init+0x32c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d037      	beq.n	800198a <HAL_GPIO_Init+0x23e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a57      	ldr	r2, [pc, #348]	@ (8001a7c <HAL_GPIO_Init+0x330>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d031      	beq.n	8001986 <HAL_GPIO_Init+0x23a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a56      	ldr	r2, [pc, #344]	@ (8001a80 <HAL_GPIO_Init+0x334>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d02b      	beq.n	8001982 <HAL_GPIO_Init+0x236>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a55      	ldr	r2, [pc, #340]	@ (8001a84 <HAL_GPIO_Init+0x338>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d025      	beq.n	800197e <HAL_GPIO_Init+0x232>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a54      	ldr	r2, [pc, #336]	@ (8001a88 <HAL_GPIO_Init+0x33c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01f      	beq.n	800197a <HAL_GPIO_Init+0x22e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a53      	ldr	r2, [pc, #332]	@ (8001a8c <HAL_GPIO_Init+0x340>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x22a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a52      	ldr	r2, [pc, #328]	@ (8001a90 <HAL_GPIO_Init+0x344>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x226>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a51      	ldr	r2, [pc, #324]	@ (8001a94 <HAL_GPIO_Init+0x348>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x222>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a50      	ldr	r2, [pc, #320]	@ (8001a98 <HAL_GPIO_Init+0x34c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x21e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4f      	ldr	r2, [pc, #316]	@ (8001a9c <HAL_GPIO_Init+0x350>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x21a>
 8001962:	2309      	movs	r3, #9
 8001964:	e012      	b.n	800198c <HAL_GPIO_Init+0x240>
 8001966:	230a      	movs	r3, #10
 8001968:	e010      	b.n	800198c <HAL_GPIO_Init+0x240>
 800196a:	2308      	movs	r3, #8
 800196c:	e00e      	b.n	800198c <HAL_GPIO_Init+0x240>
 800196e:	2307      	movs	r3, #7
 8001970:	e00c      	b.n	800198c <HAL_GPIO_Init+0x240>
 8001972:	2306      	movs	r3, #6
 8001974:	e00a      	b.n	800198c <HAL_GPIO_Init+0x240>
 8001976:	2305      	movs	r3, #5
 8001978:	e008      	b.n	800198c <HAL_GPIO_Init+0x240>
 800197a:	2304      	movs	r3, #4
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x240>
 800197e:	2303      	movs	r3, #3
 8001980:	e004      	b.n	800198c <HAL_GPIO_Init+0x240>
 8001982:	2302      	movs	r3, #2
 8001984:	e002      	b.n	800198c <HAL_GPIO_Init+0x240>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_GPIO_Init+0x240>
 800198a:	2300      	movs	r3, #0
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	f002 0203 	and.w	r2, r2, #3
 8001992:	0092      	lsls	r2, r2, #2
 8001994:	4093      	lsls	r3, r2
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800199c:	4935      	ldr	r1, [pc, #212]	@ (8001a74 <HAL_GPIO_Init+0x328>)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019aa:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa0 <HAL_GPIO_Init+0x354>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ce:	4a34      	ldr	r2, [pc, #208]	@ (8001aa0 <HAL_GPIO_Init+0x354>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d4:	4b32      	ldr	r3, [pc, #200]	@ (8001aa0 <HAL_GPIO_Init+0x354>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f8:	4a29      	ldr	r2, [pc, #164]	@ (8001aa0 <HAL_GPIO_Init+0x354>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019fe:	4b28      	ldr	r3, [pc, #160]	@ (8001aa0 <HAL_GPIO_Init+0x354>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a22:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa0 <HAL_GPIO_Init+0x354>)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a28:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa0 <HAL_GPIO_Init+0x354>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <HAL_GPIO_Init+0x354>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3301      	adds	r3, #1
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	2b0f      	cmp	r3, #15
 8001a5c:	f67f ae86 	bls.w	800176c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3724      	adds	r7, #36	@ 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40013800 	.word	0x40013800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020c00 	.word	0x40020c00
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40021400 	.word	0x40021400
 8001a90:	40021800 	.word	0x40021800
 8001a94:	40021c00 	.word	0x40021c00
 8001a98:	40022000 	.word	0x40022000
 8001a9c:	40022400 	.word	0x40022400
 8001aa0:	40013c00 	.word	0x40013c00

08001aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab4:	787b      	ldrb	r3, [r7, #1]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ac0:	e003      	b.n	8001aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	041a      	lsls	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	619a      	str	r2, [r3, #24]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	4a22      	ldr	r2, [pc, #136]	@ (8001b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aee:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001afa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1d      	ldr	r2, [pc, #116]	@ (8001b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b06:	f7ff fc71 	bl	80013ec <HAL_GetTick>
 8001b0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b0c:	e009      	b.n	8001b22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b0e:	f7ff fc6d 	bl	80013ec <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b1c:	d901      	bls.n	8001b22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e022      	b.n	8001b68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b22:	4b14      	ldr	r3, [pc, #80]	@ (8001b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b2e:	d1ee      	bne.n	8001b0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b30:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0f      	ldr	r2, [pc, #60]	@ (8001b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b3c:	f7ff fc56 	bl	80013ec <HAL_GetTick>
 8001b40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b42:	e009      	b.n	8001b58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b44:	f7ff fc52 	bl	80013ec <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b52:	d901      	bls.n	8001b58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e007      	b.n	8001b68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b64:	d1ee      	bne.n	8001b44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40007000 	.word	0x40007000

08001b78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e291      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8087 	beq.w	8001caa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b9c:	4b96      	ldr	r3, [pc, #600]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d00c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba8:	4b93      	ldr	r3, [pc, #588]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d112      	bne.n	8001bda <HAL_RCC_OscConfig+0x62>
 8001bb4:	4b90      	ldr	r3, [pc, #576]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bc0:	d10b      	bne.n	8001bda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d06c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x130>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d168      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e26b      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x7a>
 8001be4:	4b84      	ldr	r3, [pc, #528]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a83      	ldr	r2, [pc, #524]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e02e      	b.n	8001c50 <HAL_RCC_OscConfig+0xd8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x9c>
 8001bfa:	4b7f      	ldr	r3, [pc, #508]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a7e      	ldr	r2, [pc, #504]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b7c      	ldr	r3, [pc, #496]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a7b      	ldr	r2, [pc, #492]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001c0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e01d      	b.n	8001c50 <HAL_RCC_OscConfig+0xd8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0xc0>
 8001c1e:	4b76      	ldr	r3, [pc, #472]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a75      	ldr	r2, [pc, #468]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b73      	ldr	r3, [pc, #460]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a72      	ldr	r2, [pc, #456]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0xd8>
 8001c38:	4b6f      	ldr	r3, [pc, #444]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a6e      	ldr	r2, [pc, #440]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b6c      	ldr	r3, [pc, #432]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a6b      	ldr	r2, [pc, #428]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff fbc8 	bl	80013ec <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff fbc4 	bl	80013ec <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	@ 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e21f      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	4b61      	ldr	r3, [pc, #388]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0xe8>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fbb4 	bl	80013ec <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fbb0 	bl	80013ec <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	@ 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e20b      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	4b57      	ldr	r3, [pc, #348]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x110>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d069      	beq.n	8001d8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb6:	4b50      	ldr	r3, [pc, #320]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00b      	beq.n	8001cda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cc2:	4b4d      	ldr	r3, [pc, #308]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d11c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x190>
 8001cce:	4b4a      	ldr	r3, [pc, #296]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d116      	bne.n	8001d08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cda:	4b47      	ldr	r3, [pc, #284]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x17a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e1df      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b41      	ldr	r3, [pc, #260]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	493d      	ldr	r1, [pc, #244]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	e040      	b.n	8001d8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d023      	beq.n	8001d58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d10:	4b39      	ldr	r3, [pc, #228]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a38      	ldr	r2, [pc, #224]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fb66 	bl	80013ec <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d24:	f7ff fb62 	bl	80013ec <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e1bd      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	4b30      	ldr	r3, [pc, #192]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b2d      	ldr	r3, [pc, #180]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4929      	ldr	r1, [pc, #164]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
 8001d56:	e018      	b.n	8001d8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d58:	4b27      	ldr	r3, [pc, #156]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a26      	ldr	r2, [pc, #152]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff fb42 	bl	80013ec <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fb3e 	bl	80013ec <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e199      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d038      	beq.n	8001e08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d019      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9e:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da2:	4a15      	ldr	r2, [pc, #84]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001daa:	f7ff fb1f 	bl	80013ec <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db2:	f7ff fb1b 	bl	80013ec <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e176      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x23a>
 8001dd0:	e01a      	b.n	8001e08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd6:	4a08      	ldr	r2, [pc, #32]	@ (8001df8 <HAL_RCC_OscConfig+0x280>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dde:	f7ff fb05 	bl	80013ec <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de6:	f7ff fb01 	bl	80013ec <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d903      	bls.n	8001dfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e15c      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
 8001df8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	4b91      	ldr	r3, [pc, #580]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ee      	bne.n	8001de6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80a4 	beq.w	8001f5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e16:	4b8b      	ldr	r3, [pc, #556]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10d      	bne.n	8001e3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b88      	ldr	r3, [pc, #544]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	4a87      	ldr	r2, [pc, #540]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2e:	4b85      	ldr	r3, [pc, #532]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3e:	4b82      	ldr	r3, [pc, #520]	@ (8002048 <HAL_RCC_OscConfig+0x4d0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d118      	bne.n	8001e7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002048 <HAL_RCC_OscConfig+0x4d0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002048 <HAL_RCC_OscConfig+0x4d0>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e56:	f7ff fac9 	bl	80013ec <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5e:	f7ff fac5 	bl	80013ec <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b64      	cmp	r3, #100	@ 0x64
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e120      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e70:	4b75      	ldr	r3, [pc, #468]	@ (8002048 <HAL_RCC_OscConfig+0x4d0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x31a>
 8001e84:	4b6f      	ldr	r3, [pc, #444]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e88:	4a6e      	ldr	r2, [pc, #440]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e90:	e02d      	b.n	8001eee <HAL_RCC_OscConfig+0x376>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x33c>
 8001e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9e:	4a69      	ldr	r2, [pc, #420]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea6:	4b67      	ldr	r3, [pc, #412]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eaa:	4a66      	ldr	r2, [pc, #408]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001eac:	f023 0304 	bic.w	r3, r3, #4
 8001eb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb2:	e01c      	b.n	8001eee <HAL_RCC_OscConfig+0x376>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d10c      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x35e>
 8001ebc:	4b61      	ldr	r3, [pc, #388]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec0:	4a60      	ldr	r2, [pc, #384]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ecc:	4a5d      	ldr	r2, [pc, #372]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed4:	e00b      	b.n	8001eee <HAL_RCC_OscConfig+0x376>
 8001ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eda:	4a5a      	ldr	r2, [pc, #360]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee2:	4b58      	ldr	r3, [pc, #352]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee6:	4a57      	ldr	r2, [pc, #348]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d015      	beq.n	8001f22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fa79 	bl	80013ec <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7ff fa75 	bl	80013ec <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e0ce      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	4b4b      	ldr	r3, [pc, #300]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ee      	beq.n	8001efe <HAL_RCC_OscConfig+0x386>
 8001f20:	e014      	b.n	8001f4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f22:	f7ff fa63 	bl	80013ec <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7ff fa5f 	bl	80013ec <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e0b8      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	4b40      	ldr	r3, [pc, #256]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ee      	bne.n	8001f2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d105      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f52:	4b3c      	ldr	r3, [pc, #240]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	4a3b      	ldr	r2, [pc, #236]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80a4 	beq.w	80020b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f68:	4b36      	ldr	r3, [pc, #216]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d06b      	beq.n	800204c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d149      	bne.n	8002010 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7c:	4b31      	ldr	r3, [pc, #196]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a30      	ldr	r2, [pc, #192]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff fa30 	bl	80013ec <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff fa2c 	bl	80013ec <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e087      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	4b28      	ldr	r3, [pc, #160]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbc:	019b      	lsls	r3, r3, #6
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	041b      	lsls	r3, r3, #16
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001fd6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001fda:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fdc:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8001fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fa00 	bl	80013ec <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff f9fc 	bl	80013ec <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e057      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x478>
 800200e:	e04f      	b.n	80020b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0b      	ldr	r2, [pc, #44]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8002016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800201a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff f9e6 	bl	80013ec <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002024:	f7ff f9e2 	bl	80013ec <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e03d      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002036:	4b03      	ldr	r3, [pc, #12]	@ (8002044 <HAL_RCC_OscConfig+0x4cc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x4ac>
 8002042:	e035      	b.n	80020b0 <HAL_RCC_OscConfig+0x538>
 8002044:	40023800 	.word	0x40023800
 8002048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800204c:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <HAL_RCC_OscConfig+0x544>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d028      	beq.n	80020ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d121      	bne.n	80020ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d11a      	bne.n	80020ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800207c:	4013      	ands	r3, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002082:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	3b01      	subs	r3, #1
 8002096:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d107      	bne.n	80020ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0d0      	b.n	800227a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d910      	bls.n	8002108 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b67      	ldr	r3, [pc, #412]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 020f 	bic.w	r2, r3, #15
 80020ee:	4965      	ldr	r1, [pc, #404]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b63      	ldr	r3, [pc, #396]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0b8      	b.n	800227a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002120:	4b59      	ldr	r3, [pc, #356]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a58      	ldr	r2, [pc, #352]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002126:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800212a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002138:	4b53      	ldr	r3, [pc, #332]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4a52      	ldr	r2, [pc, #328]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 800213e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002142:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002144:	4b50      	ldr	r3, [pc, #320]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	494d      	ldr	r1, [pc, #308]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d040      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	4b47      	ldr	r3, [pc, #284]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d115      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e07f      	b.n	800227a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002182:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e073      	b.n	800227a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002192:	4b3d      	ldr	r3, [pc, #244]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e06b      	b.n	800227a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a2:	4b39      	ldr	r3, [pc, #228]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f023 0203 	bic.w	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4936      	ldr	r1, [pc, #216]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b4:	f7ff f91a 	bl	80013ec <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021bc:	f7ff f916 	bl	80013ec <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e053      	b.n	800227a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 020c 	and.w	r2, r3, #12
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d1eb      	bne.n	80021bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e4:	4b27      	ldr	r3, [pc, #156]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d210      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b24      	ldr	r3, [pc, #144]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 020f 	bic.w	r2, r3, #15
 80021fa:	4922      	ldr	r1, [pc, #136]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e032      	b.n	800227a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002220:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4916      	ldr	r1, [pc, #88]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 800222e:	4313      	orrs	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800223e:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	490e      	ldr	r1, [pc, #56]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002252:	f000 f821 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002256:	4602      	mov	r2, r0
 8002258:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	490a      	ldr	r1, [pc, #40]	@ (800228c <HAL_RCC_ClockConfig+0x1cc>)
 8002264:	5ccb      	ldrb	r3, [r1, r3]
 8002266:	fa22 f303 	lsr.w	r3, r2, r3
 800226a:	4a09      	ldr	r2, [pc, #36]	@ (8002290 <HAL_RCC_ClockConfig+0x1d0>)
 800226c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800226e:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <HAL_RCC_ClockConfig+0x1d4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f876 	bl	8001364 <HAL_InitTick>

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023c00 	.word	0x40023c00
 8002288:	40023800 	.word	0x40023800
 800228c:	08007178 	.word	0x08007178
 8002290:	2000000c 	.word	0x2000000c
 8002294:	20000010 	.word	0x20000010

08002298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800229c:	b090      	sub	sp, #64	@ 0x40
 800229e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80022a4:	2300      	movs	r3, #0
 80022a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022a8:	2300      	movs	r3, #0
 80022aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b0:	4b59      	ldr	r3, [pc, #356]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x180>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d00d      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x40>
 80022bc:	2b08      	cmp	r3, #8
 80022be:	f200 80a1 	bhi.w	8002404 <HAL_RCC_GetSysClockFreq+0x16c>
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x34>
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d003      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ca:	e09b      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022cc:	4b53      	ldr	r3, [pc, #332]	@ (800241c <HAL_RCC_GetSysClockFreq+0x184>)
 80022ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022d0:	e09b      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022d2:	4b53      	ldr	r3, [pc, #332]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x188>)
 80022d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022d6:	e098      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x180>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80022e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x180>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d028      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x180>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	099b      	lsrs	r3, r3, #6
 80022f4:	2200      	movs	r2, #0
 80022f6:	623b      	str	r3, [r7, #32]
 80022f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002300:	2100      	movs	r1, #0
 8002302:	4b47      	ldr	r3, [pc, #284]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x188>)
 8002304:	fb03 f201 	mul.w	r2, r3, r1
 8002308:	2300      	movs	r3, #0
 800230a:	fb00 f303 	mul.w	r3, r0, r3
 800230e:	4413      	add	r3, r2
 8002310:	4a43      	ldr	r2, [pc, #268]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x188>)
 8002312:	fba0 1202 	umull	r1, r2, r0, r2
 8002316:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002318:	460a      	mov	r2, r1
 800231a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800231c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800231e:	4413      	add	r3, r2
 8002320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002324:	2200      	movs	r2, #0
 8002326:	61bb      	str	r3, [r7, #24]
 8002328:	61fa      	str	r2, [r7, #28]
 800232a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800232e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002332:	f7fd ffbd 	bl	80002b0 <__aeabi_uldivmod>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4613      	mov	r3, r2
 800233c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800233e:	e053      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002340:	4b35      	ldr	r3, [pc, #212]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x180>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	2200      	movs	r2, #0
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	617a      	str	r2, [r7, #20]
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002352:	f04f 0b00 	mov.w	fp, #0
 8002356:	4652      	mov	r2, sl
 8002358:	465b      	mov	r3, fp
 800235a:	f04f 0000 	mov.w	r0, #0
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	0159      	lsls	r1, r3, #5
 8002364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002368:	0150      	lsls	r0, r2, #5
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	ebb2 080a 	subs.w	r8, r2, sl
 8002372:	eb63 090b 	sbc.w	r9, r3, fp
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002382:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002386:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800238a:	ebb2 0408 	subs.w	r4, r2, r8
 800238e:	eb63 0509 	sbc.w	r5, r3, r9
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	00eb      	lsls	r3, r5, #3
 800239c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023a0:	00e2      	lsls	r2, r4, #3
 80023a2:	4614      	mov	r4, r2
 80023a4:	461d      	mov	r5, r3
 80023a6:	eb14 030a 	adds.w	r3, r4, sl
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	eb45 030b 	adc.w	r3, r5, fp
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023be:	4629      	mov	r1, r5
 80023c0:	028b      	lsls	r3, r1, #10
 80023c2:	4621      	mov	r1, r4
 80023c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c8:	4621      	mov	r1, r4
 80023ca:	028a      	lsls	r2, r1, #10
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d2:	2200      	movs	r2, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	60fa      	str	r2, [r7, #12]
 80023d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023dc:	f7fd ff68 	bl	80002b0 <__aeabi_uldivmod>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4613      	mov	r3, r2
 80023e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	0c1b      	lsrs	r3, r3, #16
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	3301      	adds	r3, #1
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80023f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002402:	e002      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_RCC_GetSysClockFreq+0x184>)
 8002406:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800240c:	4618      	mov	r0, r3
 800240e:	3740      	adds	r7, #64	@ 0x40
 8002410:	46bd      	mov	sp, r7
 8002412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	00f42400 	.word	0x00f42400
 8002420:	017d7840 	.word	0x017d7840

08002424 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002428:	4b03      	ldr	r3, [pc, #12]	@ (8002438 <HAL_RCC_GetHCLKFreq+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	2000000c 	.word	0x2000000c

0800243c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002440:	f7ff fff0 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	0a9b      	lsrs	r3, r3, #10
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4903      	ldr	r1, [pc, #12]	@ (8002460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	08007188 	.word	0x08007188

08002464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002468:	f7ff ffdc 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0b5b      	lsrs	r3, r3, #13
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	@ (8002488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	08007188 	.word	0x08007188

0800248c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d012      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024b4:	4b69      	ldr	r3, [pc, #420]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a68      	ldr	r2, [pc, #416]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80024be:	6093      	str	r3, [r2, #8]
 80024c0:	4b66      	ldr	r3, [pc, #408]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c8:	4964      	ldr	r1, [pc, #400]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024d6:	2301      	movs	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d017      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024e6:	4b5d      	ldr	r3, [pc, #372]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f4:	4959      	ldr	r1, [pc, #356]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002500:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002504:	d101      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002506:	2301      	movs	r3, #1
 8002508:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002512:	2301      	movs	r3, #1
 8002514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d017      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002522:	4b4e      	ldr	r3, [pc, #312]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002528:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	494a      	ldr	r1, [pc, #296]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002540:	d101      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002542:	2301      	movs	r3, #1
 8002544:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800254e:	2301      	movs	r3, #1
 8002550:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 808b 	beq.w	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002570:	4b3a      	ldr	r3, [pc, #232]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	4a39      	ldr	r2, [pc, #228]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257a:	6413      	str	r3, [r2, #64]	@ 0x40
 800257c:	4b37      	ldr	r3, [pc, #220]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002588:	4b35      	ldr	r3, [pc, #212]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a34      	ldr	r2, [pc, #208]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800258e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002594:	f7fe ff2a 	bl	80013ec <HAL_GetTick>
 8002598:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259c:	f7fe ff26 	bl	80013ec <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	@ 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e357      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025ba:	4b28      	ldr	r3, [pc, #160]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d035      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d02e      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025d8:	4b20      	ldr	r3, [pc, #128]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025e2:	4b1e      	ldr	r3, [pc, #120]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e6:	4a1d      	ldr	r2, [pc, #116]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ec:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025ee:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f2:	4a1a      	ldr	r2, [pc, #104]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025fa:	4a18      	ldr	r2, [pc, #96]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002600:	4b16      	ldr	r3, [pc, #88]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d114      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe feee 	bl	80013ec <HAL_GetTick>
 8002610:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002612:	e00a      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002614:	f7fe feea 	bl	80013ec <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e319      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ee      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800263e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002642:	d111      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002650:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002652:	400b      	ands	r3, r1
 8002654:	4901      	ldr	r1, [pc, #4]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
 800265a:	e00b      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800265c:	40023800 	.word	0x40023800
 8002660:	40007000 	.word	0x40007000
 8002664:	0ffffcff 	.word	0x0ffffcff
 8002668:	4baa      	ldr	r3, [pc, #680]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4aa9      	ldr	r2, [pc, #676]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002672:	6093      	str	r3, [r2, #8]
 8002674:	4ba7      	ldr	r3, [pc, #668]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002676:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	49a4      	ldr	r1, [pc, #656]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002682:	4313      	orrs	r3, r2
 8002684:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d010      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002692:	4ba0      	ldr	r3, [pc, #640]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002698:	4a9e      	ldr	r2, [pc, #632]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800269e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026a2:	4b9c      	ldr	r3, [pc, #624]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ac:	4999      	ldr	r1, [pc, #612]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026c0:	4b94      	ldr	r3, [pc, #592]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026ce:	4991      	ldr	r1, [pc, #580]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026e2:	4b8c      	ldr	r3, [pc, #560]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026f0:	4988      	ldr	r1, [pc, #544]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002704:	4b83      	ldr	r3, [pc, #524]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002712:	4980      	ldr	r1, [pc, #512]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002726:	4b7b      	ldr	r3, [pc, #492]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002734:	4977      	ldr	r1, [pc, #476]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002748:	4b72      	ldr	r3, [pc, #456]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274e:	f023 0203 	bic.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	496f      	ldr	r1, [pc, #444]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800276a:	4b6a      	ldr	r3, [pc, #424]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002770:	f023 020c 	bic.w	r2, r3, #12
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002778:	4966      	ldr	r1, [pc, #408]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800278c:	4b61      	ldr	r3, [pc, #388]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002792:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	495e      	ldr	r1, [pc, #376]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027ae:	4b59      	ldr	r3, [pc, #356]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027bc:	4955      	ldr	r1, [pc, #340]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027d0:	4b50      	ldr	r3, [pc, #320]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027de:	494d      	ldr	r1, [pc, #308]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027f2:	4b48      	ldr	r3, [pc, #288]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002800:	4944      	ldr	r1, [pc, #272]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002814:	4b3f      	ldr	r3, [pc, #252]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002822:	493c      	ldr	r1, [pc, #240]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002836:	4b37      	ldr	r3, [pc, #220]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002844:	4933      	ldr	r1, [pc, #204]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002858:	4b2e      	ldr	r3, [pc, #184]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002866:	492b      	ldr	r1, [pc, #172]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d011      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800287a:	4b26      	ldr	r3, [pc, #152]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002880:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002888:	4922      	ldr	r1, [pc, #136]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002898:	d101      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800289a:	2301      	movs	r3, #1
 800289c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ba:	4b16      	ldr	r3, [pc, #88]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c8:	4912      	ldr	r1, [pc, #72]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028ec:	4909      	ldr	r1, [pc, #36]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d006      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80d9 	beq.w	8002aba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002908:	4b02      	ldr	r3, [pc, #8]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a01      	ldr	r2, [pc, #4]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002912:	e001      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002914:	40023800 	.word	0x40023800
 8002918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291a:	f7fe fd67 	bl	80013ec <HAL_GetTick>
 800291e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002922:	f7fe fd63 	bl	80013ec <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	@ 0x64
 800292e:	d901      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e194      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002934:	4b6c      	ldr	r3, [pc, #432]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f0      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d021      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002950:	2b00      	cmp	r3, #0
 8002952:	d11d      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002954:	4b64      	ldr	r3, [pc, #400]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800295a:	0c1b      	lsrs	r3, r3, #16
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002962:	4b61      	ldr	r3, [pc, #388]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002968:	0e1b      	lsrs	r3, r3, #24
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	019a      	lsls	r2, r3, #6
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	431a      	orrs	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	061b      	lsls	r3, r3, #24
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	071b      	lsls	r3, r3, #28
 8002988:	4957      	ldr	r1, [pc, #348]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d004      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d02e      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029ba:	d129      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029bc:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029c2:	0c1b      	lsrs	r3, r3, #16
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029ca:	4b47      	ldr	r3, [pc, #284]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029d0:	0f1b      	lsrs	r3, r3, #28
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	019a      	lsls	r2, r3, #6
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	071b      	lsls	r3, r3, #28
 80029f0:	493d      	ldr	r1, [pc, #244]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029f8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029fe:	f023 021f 	bic.w	r2, r3, #31
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a06:	3b01      	subs	r3, #1
 8002a08:	4937      	ldr	r1, [pc, #220]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01d      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a1c:	4b32      	ldr	r3, [pc, #200]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a22:	0e1b      	lsrs	r3, r3, #24
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a30:	0f1b      	lsrs	r3, r3, #28
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	019a      	lsls	r2, r3, #6
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	041b      	lsls	r3, r3, #16
 8002a44:	431a      	orrs	r2, r3
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	071b      	lsls	r3, r3, #28
 8002a50:	4925      	ldr	r1, [pc, #148]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d011      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	019a      	lsls	r2, r3, #6
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	061b      	lsls	r3, r3, #24
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	071b      	lsls	r3, r3, #28
 8002a80:	4919      	ldr	r1, [pc, #100]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a88:	4b17      	ldr	r3, [pc, #92]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a16      	ldr	r2, [pc, #88]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a94:	f7fe fcaa 	bl	80013ec <HAL_GetTick>
 8002a98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a9c:	f7fe fca6 	bl	80013ec <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	@ 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e0d7      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	f040 80cd 	bne.w	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ac2:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a08      	ldr	r2, [pc, #32]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ace:	f7fe fc8d 	bl	80013ec <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ad6:	f7fe fc89 	bl	80013ec <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	@ 0x64
 8002ae2:	d903      	bls.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e0ba      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ae8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002aec:	4b5e      	ldr	r3, [pc, #376]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002af4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002af8:	d0ed      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02e      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d12a      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b22:	4b51      	ldr	r3, [pc, #324]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b30:	4b4d      	ldr	r3, [pc, #308]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	0f1b      	lsrs	r3, r3, #28
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	019a      	lsls	r2, r3, #6
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	041b      	lsls	r3, r3, #16
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	061b      	lsls	r3, r3, #24
 8002b50:	431a      	orrs	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	071b      	lsls	r3, r3, #28
 8002b56:	4944      	ldr	r1, [pc, #272]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b5e:	4b42      	ldr	r3, [pc, #264]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b64:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	493d      	ldr	r1, [pc, #244]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d022      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b8c:	d11d      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b8e:	4b36      	ldr	r3, [pc, #216]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b94:	0e1b      	lsrs	r3, r3, #24
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b9c:	4b32      	ldr	r3, [pc, #200]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba2:	0f1b      	lsrs	r3, r3, #28
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	019a      	lsls	r2, r3, #6
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	061b      	lsls	r3, r3, #24
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	071b      	lsls	r3, r3, #28
 8002bc2:	4929      	ldr	r1, [pc, #164]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d028      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bd6:	4b24      	ldr	r3, [pc, #144]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bdc:	0e1b      	lsrs	r3, r3, #24
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002be4:	4b20      	ldr	r3, [pc, #128]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bea:	0c1b      	lsrs	r3, r3, #16
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	019a      	lsls	r2, r3, #6
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	041b      	lsls	r3, r3, #16
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	071b      	lsls	r3, r3, #28
 8002c0a:	4917      	ldr	r1, [pc, #92]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c12:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	4911      	ldr	r1, [pc, #68]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c28:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c34:	f7fe fbda 	bl	80013ec <HAL_GetTick>
 8002c38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c3c:	f7fe fbd6 	bl	80013ec <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	@ 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e007      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c4e:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c5a:	d1ef      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800

08002c6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e040      	b.n	8002d00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe faa8 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2224      	movs	r2, #36	@ 0x24
 8002c98:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fed0 	bl	8003a58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fc69 	bl	8003590 <UART_SetConfig>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e01b      	b.n	8002d00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ce6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 ff4f 	bl	8003b9c <UART_CheckIdleState>
 8002cfe:	4603      	mov	r3, r0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d177      	bne.n	8002e10 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_UART_Transmit+0x24>
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e070      	b.n	8002e12 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2221      	movs	r2, #33	@ 0x21
 8002d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d3e:	f7fe fb55 	bl	80013ec <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	88fa      	ldrh	r2, [r7, #6]
 8002d48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5c:	d108      	bne.n	8002d70 <HAL_UART_Transmit+0x68>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d104      	bne.n	8002d70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	e003      	b.n	8002d78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d78:	e02f      	b.n	8002dda <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2180      	movs	r1, #128	@ 0x80
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 ff60 	bl	8003c4a <UART_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d004      	beq.n	8002d9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e03b      	b.n	8002e12 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	3302      	adds	r3, #2
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	e007      	b.n	8002dc8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	781a      	ldrb	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1c9      	bne.n	8002d7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	2140      	movs	r1, #64	@ 0x40
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 ff2a 	bl	8003c4a <UART_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d004      	beq.n	8002e06 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e005      	b.n	8002e12 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b08a      	sub	sp, #40	@ 0x28
 8002e1e:	af02      	add	r7, sp, #8
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	f040 80b5 	bne.w	8002fa0 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_UART_Receive+0x28>
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0ad      	b.n	8002fa2 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2222      	movs	r2, #34	@ 0x22
 8002e52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e5c:	f7fe fac6 	bl	80013ec <HAL_GetTick>
 8002e60:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	88fa      	ldrh	r2, [r7, #6]
 8002e66:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	88fa      	ldrh	r2, [r7, #6]
 8002e6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e7a:	d10e      	bne.n	8002e9a <HAL_UART_Receive+0x80>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d105      	bne.n	8002e90 <HAL_UART_Receive+0x76>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002e8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e8e:	e02d      	b.n	8002eec <HAL_UART_Receive+0xd2>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	22ff      	movs	r2, #255	@ 0xff
 8002e94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e98:	e028      	b.n	8002eec <HAL_UART_Receive+0xd2>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10d      	bne.n	8002ebe <HAL_UART_Receive+0xa4>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <HAL_UART_Receive+0x9a>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	22ff      	movs	r2, #255	@ 0xff
 8002eae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002eb2:	e01b      	b.n	8002eec <HAL_UART_Receive+0xd2>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	227f      	movs	r2, #127	@ 0x7f
 8002eb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ebc:	e016      	b.n	8002eec <HAL_UART_Receive+0xd2>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ec6:	d10d      	bne.n	8002ee4 <HAL_UART_Receive+0xca>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d104      	bne.n	8002eda <HAL_UART_Receive+0xc0>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	227f      	movs	r2, #127	@ 0x7f
 8002ed4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ed8:	e008      	b.n	8002eec <HAL_UART_Receive+0xd2>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	223f      	movs	r2, #63	@ 0x3f
 8002ede:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ee2:	e003      	b.n	8002eec <HAL_UART_Receive+0xd2>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002ef2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002efc:	d108      	bne.n	8002f10 <HAL_UART_Receive+0xf6>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d104      	bne.n	8002f10 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	e003      	b.n	8002f18 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f18:	e036      	b.n	8002f88 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2200      	movs	r2, #0
 8002f22:	2120      	movs	r1, #32
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fe90 	bl	8003c4a <UART_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e032      	b.n	8002fa2 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10c      	bne.n	8002f5c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	8a7b      	ldrh	r3, [r7, #18]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	3302      	adds	r3, #2
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	e00c      	b.n	8002f76 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	8a7b      	ldrh	r3, [r7, #18]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	3301      	adds	r3, #1
 8002f74:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1c2      	bne.n	8002f1a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b0ba      	sub	sp, #232	@ 0xe8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002fd6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002fda:	4013      	ands	r3, r2
 8002fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d115      	bne.n	8003014 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00f      	beq.n	8003014 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8297 	beq.w	8003538 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
      }
      return;
 8003012:	e291      	b.n	8003538 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8117 	beq.w	800324c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800301e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800302a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800302e:	4b85      	ldr	r3, [pc, #532]	@ (8003244 <HAL_UART_IRQHandler+0x298>)
 8003030:	4013      	ands	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 810a 	beq.w	800324c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d011      	beq.n	8003068 <HAL_UART_IRQHandler+0xbc>
 8003044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00b      	beq.n	8003068 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2201      	movs	r2, #1
 8003056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d011      	beq.n	8003098 <HAL_UART_IRQHandler+0xec>
 8003074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00b      	beq.n	8003098 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2202      	movs	r2, #2
 8003086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800308e:	f043 0204 	orr.w	r2, r3, #4
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d011      	beq.n	80030c8 <HAL_UART_IRQHandler+0x11c>
 80030a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00b      	beq.n	80030c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2204      	movs	r2, #4
 80030b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030be:	f043 0202 	orr.w	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d017      	beq.n	8003104 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2208      	movs	r2, #8
 80030f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030fa:	f043 0208 	orr.w	r2, r3, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003108:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800310c:	2b00      	cmp	r3, #0
 800310e:	d012      	beq.n	8003136 <HAL_UART_IRQHandler+0x18a>
 8003110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003114:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00c      	beq.n	8003136 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 81fd 	beq.w	800353c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00d      	beq.n	800316a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800314e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003170:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317e:	2b40      	cmp	r3, #64	@ 0x40
 8003180:	d005      	beq.n	800318e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003186:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800318a:	2b00      	cmp	r3, #0
 800318c:	d04f      	beq.n	800322e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fdc8 	bl	8003d24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319e:	2b40      	cmp	r3, #64	@ 0x40
 80031a0:	d141      	bne.n	8003226 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3308      	adds	r3, #8
 80031a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3308      	adds	r3, #8
 80031ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031de:	e841 2300 	strex	r3, r2, [r1]
 80031e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1d9      	bne.n	80031a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d013      	beq.n	800321e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031fa:	4a13      	ldr	r2, [pc, #76]	@ (8003248 <HAL_UART_IRQHandler+0x29c>)
 80031fc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe fa7f 	bl	8001706 <HAL_DMA_Abort_IT>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d017      	beq.n	800323e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003218:	4610      	mov	r0, r2
 800321a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	e00f      	b.n	800323e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f9a0 	bl	8003564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	e00b      	b.n	800323e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f99c 	bl	8003564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	e007      	b.n	800323e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f998 	bl	8003564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800323c:	e17e      	b.n	800353c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323e:	bf00      	nop
    return;
 8003240:	e17c      	b.n	800353c <HAL_UART_IRQHandler+0x590>
 8003242:	bf00      	nop
 8003244:	04000120 	.word	0x04000120
 8003248:	08003ded 	.word	0x08003ded

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003250:	2b01      	cmp	r3, #1
 8003252:	f040 814c 	bne.w	80034ee <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8145 	beq.w	80034ee <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 813e 	beq.w	80034ee <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2210      	movs	r2, #16
 8003278:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003284:	2b40      	cmp	r3, #64	@ 0x40
 8003286:	f040 80b6 	bne.w	80033f6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003296:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8150 	beq.w	8003540 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032aa:	429a      	cmp	r2, r3
 80032ac:	f080 8148 	bcs.w	8003540 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032c4:	f000 8086 	beq.w	80033d4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80032f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80032f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80032fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800330a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1da      	bne.n	80032c8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3308      	adds	r3, #8
 8003318:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003322:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3308      	adds	r3, #8
 8003332:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003336:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800333a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800333e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003348:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e1      	bne.n	8003312 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3308      	adds	r3, #8
 8003354:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800335e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003360:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003364:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3308      	adds	r3, #8
 800336e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003372:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003374:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003378:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800337a:	e841 2300 	strex	r3, r2, [r1]
 800337e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003380:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e3      	bne.n	800334e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2220      	movs	r2, #32
 800338a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033a4:	f023 0310 	bic.w	r3, r3, #16
 80033a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e4      	bne.n	8003394 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe f929 	bl	8001626 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8c2 	bl	8003578 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033f4:	e0a4      	b.n	8003540 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003402:	b29b      	uxth	r3, r3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8096 	beq.w	8003544 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8091 	beq.w	8003544 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800342a:	e853 3f00 	ldrex	r3, [r3]
 800342e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003436:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003444:	647b      	str	r3, [r7, #68]	@ 0x44
 8003446:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800344a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e4      	bne.n	8003422 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3308      	adds	r3, #8
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	623b      	str	r3, [r7, #32]
   return(result);
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3308      	adds	r3, #8
 8003478:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800347c:	633a      	str	r2, [r7, #48]	@ 0x30
 800347e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800348a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e3      	bne.n	8003458 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f023 0310 	bic.w	r3, r3, #16
 80034b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034c6:	61fb      	str	r3, [r7, #28]
 80034c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ca:	69b9      	ldr	r1, [r7, #24]
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	617b      	str	r3, [r7, #20]
   return(result);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e4      	bne.n	80034a4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f846 	bl	8003578 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034ec:	e02a      	b.n	8003544 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00e      	beq.n	8003518 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d01c      	beq.n	8003548 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
    }
    return;
 8003516:	e017      	b.n	8003548 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800351c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d012      	beq.n	800354a <HAL_UART_IRQHandler+0x59e>
 8003524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00c      	beq.n	800354a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fc71 	bl	8003e18 <UART_EndTransmit_IT>
    return;
 8003536:	e008      	b.n	800354a <HAL_UART_IRQHandler+0x59e>
      return;
 8003538:	bf00      	nop
 800353a:	e006      	b.n	800354a <HAL_UART_IRQHandler+0x59e>
    return;
 800353c:	bf00      	nop
 800353e:	e004      	b.n	800354a <HAL_UART_IRQHandler+0x59e>
      return;
 8003540:	bf00      	nop
 8003542:	e002      	b.n	800354a <HAL_UART_IRQHandler+0x59e>
      return;
 8003544:	bf00      	nop
 8003546:	e000      	b.n	800354a <HAL_UART_IRQHandler+0x59e>
    return;
 8003548:	bf00      	nop
  }

}
 800354a:	37e8      	adds	r7, #232	@ 0xe8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4ba6      	ldr	r3, [pc, #664]	@ (8003854 <UART_SetConfig+0x2c4>)
 80035bc:	4013      	ands	r3, r2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	6979      	ldr	r1, [r7, #20]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a94      	ldr	r2, [pc, #592]	@ (8003858 <UART_SetConfig+0x2c8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d120      	bne.n	800364e <UART_SetConfig+0xbe>
 800360c:	4b93      	ldr	r3, [pc, #588]	@ (800385c <UART_SetConfig+0x2cc>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b03      	cmp	r3, #3
 8003618:	d816      	bhi.n	8003648 <UART_SetConfig+0xb8>
 800361a:	a201      	add	r2, pc, #4	@ (adr r2, 8003620 <UART_SetConfig+0x90>)
 800361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003620:	08003631 	.word	0x08003631
 8003624:	0800363d 	.word	0x0800363d
 8003628:	08003637 	.word	0x08003637
 800362c:	08003643 	.word	0x08003643
 8003630:	2301      	movs	r3, #1
 8003632:	77fb      	strb	r3, [r7, #31]
 8003634:	e150      	b.n	80038d8 <UART_SetConfig+0x348>
 8003636:	2302      	movs	r3, #2
 8003638:	77fb      	strb	r3, [r7, #31]
 800363a:	e14d      	b.n	80038d8 <UART_SetConfig+0x348>
 800363c:	2304      	movs	r3, #4
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e14a      	b.n	80038d8 <UART_SetConfig+0x348>
 8003642:	2308      	movs	r3, #8
 8003644:	77fb      	strb	r3, [r7, #31]
 8003646:	e147      	b.n	80038d8 <UART_SetConfig+0x348>
 8003648:	2310      	movs	r3, #16
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e144      	b.n	80038d8 <UART_SetConfig+0x348>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a83      	ldr	r2, [pc, #524]	@ (8003860 <UART_SetConfig+0x2d0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d132      	bne.n	80036be <UART_SetConfig+0x12e>
 8003658:	4b80      	ldr	r3, [pc, #512]	@ (800385c <UART_SetConfig+0x2cc>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d828      	bhi.n	80036b8 <UART_SetConfig+0x128>
 8003666:	a201      	add	r2, pc, #4	@ (adr r2, 800366c <UART_SetConfig+0xdc>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	080036a1 	.word	0x080036a1
 8003670:	080036b9 	.word	0x080036b9
 8003674:	080036b9 	.word	0x080036b9
 8003678:	080036b9 	.word	0x080036b9
 800367c:	080036ad 	.word	0x080036ad
 8003680:	080036b9 	.word	0x080036b9
 8003684:	080036b9 	.word	0x080036b9
 8003688:	080036b9 	.word	0x080036b9
 800368c:	080036a7 	.word	0x080036a7
 8003690:	080036b9 	.word	0x080036b9
 8003694:	080036b9 	.word	0x080036b9
 8003698:	080036b9 	.word	0x080036b9
 800369c:	080036b3 	.word	0x080036b3
 80036a0:	2300      	movs	r3, #0
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e118      	b.n	80038d8 <UART_SetConfig+0x348>
 80036a6:	2302      	movs	r3, #2
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e115      	b.n	80038d8 <UART_SetConfig+0x348>
 80036ac:	2304      	movs	r3, #4
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e112      	b.n	80038d8 <UART_SetConfig+0x348>
 80036b2:	2308      	movs	r3, #8
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e10f      	b.n	80038d8 <UART_SetConfig+0x348>
 80036b8:	2310      	movs	r3, #16
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e10c      	b.n	80038d8 <UART_SetConfig+0x348>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a68      	ldr	r2, [pc, #416]	@ (8003864 <UART_SetConfig+0x2d4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d120      	bne.n	800370a <UART_SetConfig+0x17a>
 80036c8:	4b64      	ldr	r3, [pc, #400]	@ (800385c <UART_SetConfig+0x2cc>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80036d2:	2b30      	cmp	r3, #48	@ 0x30
 80036d4:	d013      	beq.n	80036fe <UART_SetConfig+0x16e>
 80036d6:	2b30      	cmp	r3, #48	@ 0x30
 80036d8:	d814      	bhi.n	8003704 <UART_SetConfig+0x174>
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d009      	beq.n	80036f2 <UART_SetConfig+0x162>
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d810      	bhi.n	8003704 <UART_SetConfig+0x174>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <UART_SetConfig+0x15c>
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d006      	beq.n	80036f8 <UART_SetConfig+0x168>
 80036ea:	e00b      	b.n	8003704 <UART_SetConfig+0x174>
 80036ec:	2300      	movs	r3, #0
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e0f2      	b.n	80038d8 <UART_SetConfig+0x348>
 80036f2:	2302      	movs	r3, #2
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e0ef      	b.n	80038d8 <UART_SetConfig+0x348>
 80036f8:	2304      	movs	r3, #4
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e0ec      	b.n	80038d8 <UART_SetConfig+0x348>
 80036fe:	2308      	movs	r3, #8
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	e0e9      	b.n	80038d8 <UART_SetConfig+0x348>
 8003704:	2310      	movs	r3, #16
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e0e6      	b.n	80038d8 <UART_SetConfig+0x348>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a56      	ldr	r2, [pc, #344]	@ (8003868 <UART_SetConfig+0x2d8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d120      	bne.n	8003756 <UART_SetConfig+0x1c6>
 8003714:	4b51      	ldr	r3, [pc, #324]	@ (800385c <UART_SetConfig+0x2cc>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800371e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003720:	d013      	beq.n	800374a <UART_SetConfig+0x1ba>
 8003722:	2bc0      	cmp	r3, #192	@ 0xc0
 8003724:	d814      	bhi.n	8003750 <UART_SetConfig+0x1c0>
 8003726:	2b80      	cmp	r3, #128	@ 0x80
 8003728:	d009      	beq.n	800373e <UART_SetConfig+0x1ae>
 800372a:	2b80      	cmp	r3, #128	@ 0x80
 800372c:	d810      	bhi.n	8003750 <UART_SetConfig+0x1c0>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <UART_SetConfig+0x1a8>
 8003732:	2b40      	cmp	r3, #64	@ 0x40
 8003734:	d006      	beq.n	8003744 <UART_SetConfig+0x1b4>
 8003736:	e00b      	b.n	8003750 <UART_SetConfig+0x1c0>
 8003738:	2300      	movs	r3, #0
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e0cc      	b.n	80038d8 <UART_SetConfig+0x348>
 800373e:	2302      	movs	r3, #2
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e0c9      	b.n	80038d8 <UART_SetConfig+0x348>
 8003744:	2304      	movs	r3, #4
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e0c6      	b.n	80038d8 <UART_SetConfig+0x348>
 800374a:	2308      	movs	r3, #8
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e0c3      	b.n	80038d8 <UART_SetConfig+0x348>
 8003750:	2310      	movs	r3, #16
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e0c0      	b.n	80038d8 <UART_SetConfig+0x348>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a44      	ldr	r2, [pc, #272]	@ (800386c <UART_SetConfig+0x2dc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d125      	bne.n	80037ac <UART_SetConfig+0x21c>
 8003760:	4b3e      	ldr	r3, [pc, #248]	@ (800385c <UART_SetConfig+0x2cc>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800376a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800376e:	d017      	beq.n	80037a0 <UART_SetConfig+0x210>
 8003770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003774:	d817      	bhi.n	80037a6 <UART_SetConfig+0x216>
 8003776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800377a:	d00b      	beq.n	8003794 <UART_SetConfig+0x204>
 800377c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003780:	d811      	bhi.n	80037a6 <UART_SetConfig+0x216>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <UART_SetConfig+0x1fe>
 8003786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800378a:	d006      	beq.n	800379a <UART_SetConfig+0x20a>
 800378c:	e00b      	b.n	80037a6 <UART_SetConfig+0x216>
 800378e:	2300      	movs	r3, #0
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	e0a1      	b.n	80038d8 <UART_SetConfig+0x348>
 8003794:	2302      	movs	r3, #2
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e09e      	b.n	80038d8 <UART_SetConfig+0x348>
 800379a:	2304      	movs	r3, #4
 800379c:	77fb      	strb	r3, [r7, #31]
 800379e:	e09b      	b.n	80038d8 <UART_SetConfig+0x348>
 80037a0:	2308      	movs	r3, #8
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e098      	b.n	80038d8 <UART_SetConfig+0x348>
 80037a6:	2310      	movs	r3, #16
 80037a8:	77fb      	strb	r3, [r7, #31]
 80037aa:	e095      	b.n	80038d8 <UART_SetConfig+0x348>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003870 <UART_SetConfig+0x2e0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d125      	bne.n	8003802 <UART_SetConfig+0x272>
 80037b6:	4b29      	ldr	r3, [pc, #164]	@ (800385c <UART_SetConfig+0x2cc>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037c4:	d017      	beq.n	80037f6 <UART_SetConfig+0x266>
 80037c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037ca:	d817      	bhi.n	80037fc <UART_SetConfig+0x26c>
 80037cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037d0:	d00b      	beq.n	80037ea <UART_SetConfig+0x25a>
 80037d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037d6:	d811      	bhi.n	80037fc <UART_SetConfig+0x26c>
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <UART_SetConfig+0x254>
 80037dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e0:	d006      	beq.n	80037f0 <UART_SetConfig+0x260>
 80037e2:	e00b      	b.n	80037fc <UART_SetConfig+0x26c>
 80037e4:	2301      	movs	r3, #1
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e076      	b.n	80038d8 <UART_SetConfig+0x348>
 80037ea:	2302      	movs	r3, #2
 80037ec:	77fb      	strb	r3, [r7, #31]
 80037ee:	e073      	b.n	80038d8 <UART_SetConfig+0x348>
 80037f0:	2304      	movs	r3, #4
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e070      	b.n	80038d8 <UART_SetConfig+0x348>
 80037f6:	2308      	movs	r3, #8
 80037f8:	77fb      	strb	r3, [r7, #31]
 80037fa:	e06d      	b.n	80038d8 <UART_SetConfig+0x348>
 80037fc:	2310      	movs	r3, #16
 80037fe:	77fb      	strb	r3, [r7, #31]
 8003800:	e06a      	b.n	80038d8 <UART_SetConfig+0x348>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1b      	ldr	r2, [pc, #108]	@ (8003874 <UART_SetConfig+0x2e4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d138      	bne.n	800387e <UART_SetConfig+0x2ee>
 800380c:	4b13      	ldr	r3, [pc, #76]	@ (800385c <UART_SetConfig+0x2cc>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003812:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003816:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800381a:	d017      	beq.n	800384c <UART_SetConfig+0x2bc>
 800381c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003820:	d82a      	bhi.n	8003878 <UART_SetConfig+0x2e8>
 8003822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003826:	d00b      	beq.n	8003840 <UART_SetConfig+0x2b0>
 8003828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800382c:	d824      	bhi.n	8003878 <UART_SetConfig+0x2e8>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <UART_SetConfig+0x2aa>
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003836:	d006      	beq.n	8003846 <UART_SetConfig+0x2b6>
 8003838:	e01e      	b.n	8003878 <UART_SetConfig+0x2e8>
 800383a:	2300      	movs	r3, #0
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e04b      	b.n	80038d8 <UART_SetConfig+0x348>
 8003840:	2302      	movs	r3, #2
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e048      	b.n	80038d8 <UART_SetConfig+0x348>
 8003846:	2304      	movs	r3, #4
 8003848:	77fb      	strb	r3, [r7, #31]
 800384a:	e045      	b.n	80038d8 <UART_SetConfig+0x348>
 800384c:	2308      	movs	r3, #8
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e042      	b.n	80038d8 <UART_SetConfig+0x348>
 8003852:	bf00      	nop
 8003854:	efff69f3 	.word	0xefff69f3
 8003858:	40011000 	.word	0x40011000
 800385c:	40023800 	.word	0x40023800
 8003860:	40004400 	.word	0x40004400
 8003864:	40004800 	.word	0x40004800
 8003868:	40004c00 	.word	0x40004c00
 800386c:	40005000 	.word	0x40005000
 8003870:	40011400 	.word	0x40011400
 8003874:	40007800 	.word	0x40007800
 8003878:	2310      	movs	r3, #16
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e02c      	b.n	80038d8 <UART_SetConfig+0x348>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a72      	ldr	r2, [pc, #456]	@ (8003a4c <UART_SetConfig+0x4bc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d125      	bne.n	80038d4 <UART_SetConfig+0x344>
 8003888:	4b71      	ldr	r3, [pc, #452]	@ (8003a50 <UART_SetConfig+0x4c0>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003892:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003896:	d017      	beq.n	80038c8 <UART_SetConfig+0x338>
 8003898:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800389c:	d817      	bhi.n	80038ce <UART_SetConfig+0x33e>
 800389e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038a2:	d00b      	beq.n	80038bc <UART_SetConfig+0x32c>
 80038a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038a8:	d811      	bhi.n	80038ce <UART_SetConfig+0x33e>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <UART_SetConfig+0x326>
 80038ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038b2:	d006      	beq.n	80038c2 <UART_SetConfig+0x332>
 80038b4:	e00b      	b.n	80038ce <UART_SetConfig+0x33e>
 80038b6:	2300      	movs	r3, #0
 80038b8:	77fb      	strb	r3, [r7, #31]
 80038ba:	e00d      	b.n	80038d8 <UART_SetConfig+0x348>
 80038bc:	2302      	movs	r3, #2
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e00a      	b.n	80038d8 <UART_SetConfig+0x348>
 80038c2:	2304      	movs	r3, #4
 80038c4:	77fb      	strb	r3, [r7, #31]
 80038c6:	e007      	b.n	80038d8 <UART_SetConfig+0x348>
 80038c8:	2308      	movs	r3, #8
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e004      	b.n	80038d8 <UART_SetConfig+0x348>
 80038ce:	2310      	movs	r3, #16
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e001      	b.n	80038d8 <UART_SetConfig+0x348>
 80038d4:	2310      	movs	r3, #16
 80038d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e0:	d15b      	bne.n	800399a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80038e2:	7ffb      	ldrb	r3, [r7, #31]
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d828      	bhi.n	800393a <UART_SetConfig+0x3aa>
 80038e8:	a201      	add	r2, pc, #4	@ (adr r2, 80038f0 <UART_SetConfig+0x360>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003915 	.word	0x08003915
 80038f4:	0800391d 	.word	0x0800391d
 80038f8:	08003925 	.word	0x08003925
 80038fc:	0800393b 	.word	0x0800393b
 8003900:	0800392b 	.word	0x0800392b
 8003904:	0800393b 	.word	0x0800393b
 8003908:	0800393b 	.word	0x0800393b
 800390c:	0800393b 	.word	0x0800393b
 8003910:	08003933 	.word	0x08003933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003914:	f7fe fd92 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 8003918:	61b8      	str	r0, [r7, #24]
        break;
 800391a:	e013      	b.n	8003944 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800391c:	f7fe fda2 	bl	8002464 <HAL_RCC_GetPCLK2Freq>
 8003920:	61b8      	str	r0, [r7, #24]
        break;
 8003922:	e00f      	b.n	8003944 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003924:	4b4b      	ldr	r3, [pc, #300]	@ (8003a54 <UART_SetConfig+0x4c4>)
 8003926:	61bb      	str	r3, [r7, #24]
        break;
 8003928:	e00c      	b.n	8003944 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800392a:	f7fe fcb5 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 800392e:	61b8      	str	r0, [r7, #24]
        break;
 8003930:	e008      	b.n	8003944 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003936:	61bb      	str	r3, [r7, #24]
        break;
 8003938:	e004      	b.n	8003944 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	77bb      	strb	r3, [r7, #30]
        break;
 8003942:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d074      	beq.n	8003a34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	005a      	lsls	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	441a      	add	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b0f      	cmp	r3, #15
 8003964:	d916      	bls.n	8003994 <UART_SetConfig+0x404>
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396c:	d212      	bcs.n	8003994 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	b29b      	uxth	r3, r3
 8003972:	f023 030f 	bic.w	r3, r3, #15
 8003976:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	b29b      	uxth	r3, r3
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	b29a      	uxth	r2, r3
 8003984:	89fb      	ldrh	r3, [r7, #14]
 8003986:	4313      	orrs	r3, r2
 8003988:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	89fa      	ldrh	r2, [r7, #14]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	e04f      	b.n	8003a34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	77bb      	strb	r3, [r7, #30]
 8003998:	e04c      	b.n	8003a34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800399a:	7ffb      	ldrb	r3, [r7, #31]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d828      	bhi.n	80039f2 <UART_SetConfig+0x462>
 80039a0:	a201      	add	r2, pc, #4	@ (adr r2, 80039a8 <UART_SetConfig+0x418>)
 80039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a6:	bf00      	nop
 80039a8:	080039cd 	.word	0x080039cd
 80039ac:	080039d5 	.word	0x080039d5
 80039b0:	080039dd 	.word	0x080039dd
 80039b4:	080039f3 	.word	0x080039f3
 80039b8:	080039e3 	.word	0x080039e3
 80039bc:	080039f3 	.word	0x080039f3
 80039c0:	080039f3 	.word	0x080039f3
 80039c4:	080039f3 	.word	0x080039f3
 80039c8:	080039eb 	.word	0x080039eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039cc:	f7fe fd36 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 80039d0:	61b8      	str	r0, [r7, #24]
        break;
 80039d2:	e013      	b.n	80039fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d4:	f7fe fd46 	bl	8002464 <HAL_RCC_GetPCLK2Freq>
 80039d8:	61b8      	str	r0, [r7, #24]
        break;
 80039da:	e00f      	b.n	80039fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a54 <UART_SetConfig+0x4c4>)
 80039de:	61bb      	str	r3, [r7, #24]
        break;
 80039e0:	e00c      	b.n	80039fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039e2:	f7fe fc59 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 80039e6:	61b8      	str	r0, [r7, #24]
        break;
 80039e8:	e008      	b.n	80039fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ee:	61bb      	str	r3, [r7, #24]
        break;
 80039f0:	e004      	b.n	80039fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	77bb      	strb	r3, [r7, #30]
        break;
 80039fa:	bf00      	nop
    }

    if (pclk != 0U)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d018      	beq.n	8003a34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	085a      	lsrs	r2, r3, #1
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	441a      	add	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b0f      	cmp	r3, #15
 8003a1a:	d909      	bls.n	8003a30 <UART_SetConfig+0x4a0>
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a22:	d205      	bcs.n	8003a30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	e001      	b.n	8003a34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a40:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40007c00 	.word	0x40007c00
 8003a50:	40023800 	.word	0x40023800
 8003a54:	00f42400 	.word	0x00f42400

08003a58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01a      	beq.n	8003b6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b56:	d10a      	bne.n	8003b6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	605a      	str	r2, [r3, #4]
  }
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08c      	sub	sp, #48	@ 0x30
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bac:	f7fd fc1e 	bl	80013ec <HAL_GetTick>
 8003bb0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d12e      	bne.n	8003c1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f83b 	bl	8003c4a <UART_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d021      	beq.n	8003c1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bee:	623b      	str	r3, [r7, #32]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	69b9      	ldr	r1, [r7, #24]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	617b      	str	r3, [r7, #20]
   return(result);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e6      	bne.n	8003bda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e011      	b.n	8003c42 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3728      	adds	r7, #40	@ 0x28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5a:	e04f      	b.n	8003cfc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c62:	d04b      	beq.n	8003cfc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c64:	f7fd fbc2 	bl	80013ec <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d302      	bcc.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e04e      	b.n	8003d1c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d037      	beq.n	8003cfc <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b80      	cmp	r3, #128	@ 0x80
 8003c90:	d034      	beq.n	8003cfc <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b40      	cmp	r3, #64	@ 0x40
 8003c96:	d031      	beq.n	8003cfc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d110      	bne.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2208      	movs	r2, #8
 8003cac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f838 	bl	8003d24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e029      	b.n	8003d1c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cd6:	d111      	bne.n	8003cfc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ce0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f81e 	bl	8003d24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e00f      	b.n	8003d1c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4013      	ands	r3, r2
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d0a0      	beq.n	8003c5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b095      	sub	sp, #84	@ 0x54
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e6      	bne.n	8003d2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3308      	adds	r3, #8
 8003d64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e5      	bne.n	8003d5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d118      	bne.n	8003dcc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f023 0310 	bic.w	r3, r3, #16
 8003dae:	647b      	str	r3, [r7, #68]	@ 0x44
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	6979      	ldr	r1, [r7, #20]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e6      	bne.n	8003d9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003de0:	bf00      	nop
 8003de2:	3754      	adds	r7, #84	@ 0x54
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f7ff fbaa 	bl	8003564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6979      	ldr	r1, [r7, #20]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e6      	bne.n	8003e20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff fb76 	bl	8003550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e64:	bf00      	nop
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e7e:	2b84      	cmp	r3, #132	@ 0x84
 8003e80:	d005      	beq.n	8003e8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	3303      	adds	r3, #3
 8003e8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ea0:	f000 fd08 	bl	80048b4 <vTaskStartScheduler>
  
  return osOK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eac:	b089      	sub	sp, #36	@ 0x24
 8003eae:	af04      	add	r7, sp, #16
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d020      	beq.n	8003efe <osThreadCreate+0x54>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01c      	beq.n	8003efe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685c      	ldr	r4, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691e      	ldr	r6, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ffc8 	bl	8003e6c <makeFreeRtosPriority>
 8003edc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ee6:	9202      	str	r2, [sp, #8]
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	9100      	str	r1, [sp, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	4632      	mov	r2, r6
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f000 f9bc 	bl	8004270 <xTaskCreateStatic>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	e01c      	b.n	8003f38 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685c      	ldr	r4, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f0a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff ffaa 	bl	8003e6c <makeFreeRtosPriority>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	f107 030c 	add.w	r3, r7, #12
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	9200      	str	r2, [sp, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	4632      	mov	r2, r6
 8003f26:	4629      	mov	r1, r5
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f000 fa07 	bl	800433c <xTaskCreate>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d001      	beq.n	8003f38 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f38:	68fb      	ldr	r3, [r7, #12]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f42 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <osDelay+0x16>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	e000      	b.n	8003f5a <osDelay+0x18>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fb48 	bl	80045f0 <vTaskDelay>
  
  return osOK;
 8003f60:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f103 0208 	add.w	r2, r3, #8
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f82:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f103 0208 	add.w	r2, r3, #8
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f103 0208 	add.w	r2, r3, #8
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	601a      	str	r2, [r3, #0]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004022:	d103      	bne.n	800402c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	e00c      	b.n	8004046 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3308      	adds	r3, #8
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	e002      	b.n	800403a <vListInsert+0x2e>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	429a      	cmp	r2, r3
 8004044:	d2f6      	bcs.n	8004034 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	601a      	str	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6892      	ldr	r2, [r2, #8]
 8004094:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6852      	ldr	r2, [r2, #4]
 800409e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d103      	bne.n	80040b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	1e5a      	subs	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10d      	bne.n	8004104 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ec:	b672      	cpsid	i
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	b662      	cpsie	i
 80040fc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	e7fd      	b.n	8004100 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004104:	f001 f912 	bl	800532c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	441a      	add	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004134:	3b01      	subs	r3, #1
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	441a      	add	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	22ff      	movs	r2, #255	@ 0xff
 8004148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	22ff      	movs	r2, #255	@ 0xff
 8004150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d114      	bne.n	8004184 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d01a      	beq.n	8004198 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3310      	adds	r3, #16
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fe06 	bl	8004d78 <xTaskRemoveFromEventList>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d012      	beq.n	8004198 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004172:	4b0d      	ldr	r3, [pc, #52]	@ (80041a8 <xQueueGenericReset+0xd4>)
 8004174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	e009      	b.n	8004198 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3310      	adds	r3, #16
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff feee 	bl	8003f6a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3324      	adds	r3, #36	@ 0x24
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fee9 	bl	8003f6a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004198:	f001 f8fe 	bl	8005398 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800419c:	2301      	movs	r3, #1
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	e000ed04 	.word	0xe000ed04

080041ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	@ 0x28
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	4613      	mov	r3, r2
 80041b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10d      	bne.n	80041dc <xQueueGenericCreate+0x30>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c4:	b672      	cpsid	i
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	b662      	cpsie	i
 80041d4:	613b      	str	r3, [r7, #16]
}
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	e7fd      	b.n	80041d8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	e004      	b.n	80041f2 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3348      	adds	r3, #72	@ 0x48
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 f980 	bl	80054fc <pvPortMalloc>
 80041fc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d011      	beq.n	8004228 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	3348      	adds	r3, #72	@ 0x48
 800420c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004216:	79fa      	ldrb	r2, [r7, #7]
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	68b9      	ldr	r1, [r7, #8]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f805 	bl	8004232 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004228:	69bb      	ldr	r3, [r7, #24]
	}
 800422a:	4618      	mov	r0, r3
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d103      	bne.n	800424e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	e002      	b.n	8004254 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004260:	2101      	movs	r1, #1
 8004262:	69b8      	ldr	r0, [r7, #24]
 8004264:	f7ff ff36 	bl	80040d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08e      	sub	sp, #56	@ 0x38
 8004274:	af04      	add	r7, sp, #16
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800427e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10d      	bne.n	80042a0 <xTaskCreateStatic+0x30>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004288:	b672      	cpsid	i
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	b662      	cpsie	i
 8004298:	623b      	str	r3, [r7, #32]
}
 800429a:	bf00      	nop
 800429c:	bf00      	nop
 800429e:	e7fd      	b.n	800429c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80042a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10d      	bne.n	80042c2 <xTaskCreateStatic+0x52>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042aa:	b672      	cpsid	i
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	b662      	cpsie	i
 80042ba:	61fb      	str	r3, [r7, #28]
}
 80042bc:	bf00      	nop
 80042be:	bf00      	nop
 80042c0:	e7fd      	b.n	80042be <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042c2:	23a0      	movs	r3, #160	@ 0xa0
 80042c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80042ca:	d00d      	beq.n	80042e8 <xTaskCreateStatic+0x78>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d0:	b672      	cpsid	i
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	b662      	cpsie	i
 80042e0:	61bb      	str	r3, [r7, #24]
}
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
 80042e6:	e7fd      	b.n	80042e4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01e      	beq.n	800432e <xTaskCreateStatic+0xbe>
 80042f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01b      	beq.n	800432e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	2202      	movs	r2, #2
 8004304:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004308:	2300      	movs	r3, #0
 800430a:	9303      	str	r3, [sp, #12]
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	9302      	str	r3, [sp, #8]
 8004310:	f107 0314 	add.w	r3, r7, #20
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f851 	bl	80043c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004326:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004328:	f000 f8f8 	bl	800451c <prvAddNewTaskToReadyList>
 800432c:	e001      	b.n	8004332 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004332:	697b      	ldr	r3, [r7, #20]
	}
 8004334:	4618      	mov	r0, r3
 8004336:	3728      	adds	r7, #40	@ 0x28
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08c      	sub	sp, #48	@ 0x30
 8004340:	af04      	add	r7, sp, #16
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	4613      	mov	r3, r2
 800434a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4618      	mov	r0, r3
 8004352:	f001 f8d3 	bl	80054fc <pvPortMalloc>
 8004356:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00e      	beq.n	800437c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800435e:	20a0      	movs	r0, #160	@ 0xa0
 8004360:	f001 f8cc 	bl	80054fc <pvPortMalloc>
 8004364:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	631a      	str	r2, [r3, #48]	@ 0x30
 8004372:	e005      	b.n	8004380 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004374:	6978      	ldr	r0, [r7, #20]
 8004376:	f001 f98f 	bl	8005698 <vPortFree>
 800437a:	e001      	b.n	8004380 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d017      	beq.n	80043b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800438e:	88fa      	ldrh	r2, [r7, #6]
 8004390:	2300      	movs	r3, #0
 8004392:	9303      	str	r3, [sp, #12]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	9302      	str	r3, [sp, #8]
 8004398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68b9      	ldr	r1, [r7, #8]
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f80f 	bl	80043c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043aa:	69f8      	ldr	r0, [r7, #28]
 80043ac:	f000 f8b6 	bl	800451c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043b0:	2301      	movs	r3, #1
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	e002      	b.n	80043bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043b6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043bc:	69bb      	ldr	r3, [r7, #24]
	}
 80043be:	4618      	mov	r0, r3
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	461a      	mov	r2, r3
 80043e0:	21a5      	movs	r1, #165	@ 0xa5
 80043e2:	f001 fd3d 	bl	8005e60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80043f0:	440b      	add	r3, r1
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	f023 0307 	bic.w	r3, r3, #7
 80043fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00d      	beq.n	8004426 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440e:	b672      	cpsid	i
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	b662      	cpsie	i
 800441e:	617b      	str	r3, [r7, #20]
}
 8004420:	bf00      	nop
 8004422:	bf00      	nop
 8004424:	e7fd      	b.n	8004422 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01f      	beq.n	800446c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800442c:	2300      	movs	r3, #0
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	e012      	b.n	8004458 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	7819      	ldrb	r1, [r3, #0]
 800443a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	4413      	add	r3, r2
 8004440:	3334      	adds	r3, #52	@ 0x34
 8004442:	460a      	mov	r2, r1
 8004444:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	4413      	add	r3, r2
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d006      	beq.n	8004460 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3301      	adds	r3, #1
 8004456:	61fb      	str	r3, [r7, #28]
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	2b0f      	cmp	r3, #15
 800445c:	d9e9      	bls.n	8004432 <prvInitialiseNewTask+0x6a>
 800445e:	e000      	b.n	8004462 <prvInitialiseNewTask+0x9a>
			{
				break;
 8004460:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800446a:	e003      	b.n	8004474 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004476:	2b06      	cmp	r3, #6
 8004478:	d901      	bls.n	800447e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800447a:	2306      	movs	r3, #6
 800447c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800447e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004480:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004482:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004488:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	2200      	movs	r2, #0
 800448e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004492:	3304      	adds	r3, #4
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fd88 	bl	8003faa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449c:	3318      	adds	r3, #24
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff fd83 	bl	8003faa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ac:	f1c3 0207 	rsb	r2, r3, #7
 80044b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044bc:	2200      	movs	r2, #0
 80044be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80044ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044cc:	334c      	adds	r3, #76	@ 0x4c
 80044ce:	224c      	movs	r2, #76	@ 0x4c
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 fcc4 	bl	8005e60 <memset>
 80044d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044da:	4a0d      	ldr	r2, [pc, #52]	@ (8004510 <prvInitialiseNewTask+0x148>)
 80044dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80044de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004514 <prvInitialiseNewTask+0x14c>)
 80044e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004518 <prvInitialiseNewTask+0x150>)
 80044e8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	68f9      	ldr	r1, [r7, #12]
 80044ee:	69b8      	ldr	r0, [r7, #24]
 80044f0:	f000 fe0a 	bl	8005108 <pxPortInitialiseStack>
 80044f4:	4602      	mov	r2, r0
 80044f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004506:	bf00      	nop
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20004530 	.word	0x20004530
 8004514:	20004598 	.word	0x20004598
 8004518:	20004600 	.word	0x20004600

0800451c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004524:	f000 ff02 	bl	800532c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004528:	4b2a      	ldr	r3, [pc, #168]	@ (80045d4 <prvAddNewTaskToReadyList+0xb8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	4a29      	ldr	r2, [pc, #164]	@ (80045d4 <prvAddNewTaskToReadyList+0xb8>)
 8004530:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004532:	4b29      	ldr	r3, [pc, #164]	@ (80045d8 <prvAddNewTaskToReadyList+0xbc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800453a:	4a27      	ldr	r2, [pc, #156]	@ (80045d8 <prvAddNewTaskToReadyList+0xbc>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004540:	4b24      	ldr	r3, [pc, #144]	@ (80045d4 <prvAddNewTaskToReadyList+0xb8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d110      	bne.n	800456a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004548:	f000 fc94 	bl	8004e74 <prvInitialiseTaskLists>
 800454c:	e00d      	b.n	800456a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800454e:	4b23      	ldr	r3, [pc, #140]	@ (80045dc <prvAddNewTaskToReadyList+0xc0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004556:	4b20      	ldr	r3, [pc, #128]	@ (80045d8 <prvAddNewTaskToReadyList+0xbc>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	429a      	cmp	r2, r3
 8004562:	d802      	bhi.n	800456a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004564:	4a1c      	ldr	r2, [pc, #112]	@ (80045d8 <prvAddNewTaskToReadyList+0xbc>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800456a:	4b1d      	ldr	r3, [pc, #116]	@ (80045e0 <prvAddNewTaskToReadyList+0xc4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3301      	adds	r3, #1
 8004570:	4a1b      	ldr	r2, [pc, #108]	@ (80045e0 <prvAddNewTaskToReadyList+0xc4>)
 8004572:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	2201      	movs	r2, #1
 800457a:	409a      	lsls	r2, r3
 800457c:	4b19      	ldr	r3, [pc, #100]	@ (80045e4 <prvAddNewTaskToReadyList+0xc8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4313      	orrs	r3, r2
 8004582:	4a18      	ldr	r2, [pc, #96]	@ (80045e4 <prvAddNewTaskToReadyList+0xc8>)
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800458a:	4613      	mov	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4a15      	ldr	r2, [pc, #84]	@ (80045e8 <prvAddNewTaskToReadyList+0xcc>)
 8004594:	441a      	add	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3304      	adds	r3, #4
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f7ff fd11 	bl	8003fc4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045a2:	f000 fef9 	bl	8005398 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045a6:	4b0d      	ldr	r3, [pc, #52]	@ (80045dc <prvAddNewTaskToReadyList+0xc0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00e      	beq.n	80045cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045ae:	4b0a      	ldr	r3, [pc, #40]	@ (80045d8 <prvAddNewTaskToReadyList+0xbc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d207      	bcs.n	80045cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045bc:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <prvAddNewTaskToReadyList+0xd0>)
 80045be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	200008e4 	.word	0x200008e4
 80045d8:	200007e4 	.word	0x200007e4
 80045dc:	200008f0 	.word	0x200008f0
 80045e0:	20000900 	.word	0x20000900
 80045e4:	200008ec 	.word	0x200008ec
 80045e8:	200007e8 	.word	0x200007e8
 80045ec:	e000ed04 	.word	0xe000ed04

080045f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d01a      	beq.n	8004638 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004602:	4b15      	ldr	r3, [pc, #84]	@ (8004658 <vTaskDelay+0x68>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00d      	beq.n	8004626 <vTaskDelay+0x36>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460e:	b672      	cpsid	i
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	b662      	cpsie	i
 800461e:	60bb      	str	r3, [r7, #8]
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	e7fd      	b.n	8004622 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004626:	f000 f9b3 	bl	8004990 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800462a:	2100      	movs	r1, #0
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fd05 	bl	800503c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004632:	f000 f9bb 	bl	80049ac <xTaskResumeAll>
 8004636:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d107      	bne.n	800464e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800463e:	4b07      	ldr	r3, [pc, #28]	@ (800465c <vTaskDelay+0x6c>)
 8004640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	2000090c 	.word	0x2000090c
 800465c:	e000ed04 	.word	0xe000ed04

08004660 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004668:	f000 fe60 	bl	800532c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <vTaskSuspend+0x18>
 8004672:	4b3e      	ldr	r3, [pc, #248]	@ (800476c <vTaskSuspend+0x10c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	e000      	b.n	800467a <vTaskSuspend+0x1a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3304      	adds	r3, #4
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fcfc 	bl	800407e <uxListRemove>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d115      	bne.n	80046b8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004690:	4937      	ldr	r1, [pc, #220]	@ (8004770 <vTaskSuspend+0x110>)
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <vTaskSuspend+0x58>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a6:	2201      	movs	r2, #1
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43da      	mvns	r2, r3
 80046ae:	4b31      	ldr	r3, [pc, #196]	@ (8004774 <vTaskSuspend+0x114>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4013      	ands	r3, r2
 80046b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004774 <vTaskSuspend+0x114>)
 80046b6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d004      	beq.n	80046ca <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3318      	adds	r3, #24
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fcda 	bl	800407e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3304      	adds	r3, #4
 80046ce:	4619      	mov	r1, r3
 80046d0:	4829      	ldr	r0, [pc, #164]	@ (8004778 <vTaskSuspend+0x118>)
 80046d2:	f7ff fc77 	bl	8003fc4 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d103      	bne.n	80046ea <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80046ea:	f000 fe55 	bl	8005398 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80046ee:	4b23      	ldr	r3, [pc, #140]	@ (800477c <vTaskSuspend+0x11c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80046f6:	f000 fe19 	bl	800532c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80046fa:	f000 fc61 	bl	8004fc0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80046fe:	f000 fe4b 	bl	8005398 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004702:	4b1a      	ldr	r3, [pc, #104]	@ (800476c <vTaskSuspend+0x10c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	429a      	cmp	r2, r3
 800470a:	d12a      	bne.n	8004762 <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 800470c:	4b1b      	ldr	r3, [pc, #108]	@ (800477c <vTaskSuspend+0x11c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01a      	beq.n	800474a <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004714:	4b1a      	ldr	r3, [pc, #104]	@ (8004780 <vTaskSuspend+0x120>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <vTaskSuspend+0xd8>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004720:	b672      	cpsid	i
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	b662      	cpsie	i
 8004730:	60bb      	str	r3, [r7, #8]
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	e7fd      	b.n	8004734 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8004738:	4b12      	ldr	r3, [pc, #72]	@ (8004784 <vTaskSuspend+0x124>)
 800473a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004748:	e00b      	b.n	8004762 <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800474a:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <vTaskSuspend+0x118>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b0e      	ldr	r3, [pc, #56]	@ (8004788 <vTaskSuspend+0x128>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d103      	bne.n	800475e <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 8004756:	4b05      	ldr	r3, [pc, #20]	@ (800476c <vTaskSuspend+0x10c>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
	}
 800475c:	e001      	b.n	8004762 <vTaskSuspend+0x102>
					vTaskSwitchContext();
 800475e:	f000 fa81 	bl	8004c64 <vTaskSwitchContext>
	}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	200007e4 	.word	0x200007e4
 8004770:	200007e8 	.word	0x200007e8
 8004774:	200008ec 	.word	0x200008ec
 8004778:	200008d0 	.word	0x200008d0
 800477c:	200008f0 	.word	0x200008f0
 8004780:	2000090c 	.word	0x2000090c
 8004784:	e000ed04 	.word	0xe000ed04
 8004788:	200008e4 	.word	0x200008e4

0800478c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10d      	bne.n	80047be <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a6:	b672      	cpsid	i
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	b662      	cpsie	i
 80047b6:	60fb      	str	r3, [r7, #12]
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	e7fd      	b.n	80047ba <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	4a0a      	ldr	r2, [pc, #40]	@ (80047ec <prvTaskIsTaskSuspended+0x60>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d10a      	bne.n	80047de <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047cc:	4a08      	ldr	r2, [pc, #32]	@ (80047f0 <prvTaskIsTaskSuspended+0x64>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d005      	beq.n	80047de <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 80047da:	2301      	movs	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047de:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80047e0:	4618      	mov	r0, r3
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	200008d0 	.word	0x200008d0
 80047f0:	200008a4 	.word	0x200008a4

080047f4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10d      	bne.n	8004822 <vTaskResume+0x2e>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480a:	b672      	cpsid	i
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	b662      	cpsie	i
 800481a:	60bb      	str	r3, [r7, #8]
}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	e7fd      	b.n	800481e <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004822:	4b20      	ldr	r3, [pc, #128]	@ (80048a4 <vTaskResume+0xb0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	429a      	cmp	r2, r3
 800482a:	d037      	beq.n	800489c <vTaskResume+0xa8>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d034      	beq.n	800489c <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8004832:	f000 fd7b 	bl	800532c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7ff ffa8 	bl	800478c <prvTaskIsTaskSuspended>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d02a      	beq.n	8004898 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3304      	adds	r3, #4
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fc19 	bl	800407e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004850:	2201      	movs	r2, #1
 8004852:	409a      	lsls	r2, r3
 8004854:	4b14      	ldr	r3, [pc, #80]	@ (80048a8 <vTaskResume+0xb4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4313      	orrs	r3, r2
 800485a:	4a13      	ldr	r2, [pc, #76]	@ (80048a8 <vTaskResume+0xb4>)
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4a10      	ldr	r2, [pc, #64]	@ (80048ac <vTaskResume+0xb8>)
 800486c:	441a      	add	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7ff fba5 	bl	8003fc4 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800487e:	4b09      	ldr	r3, [pc, #36]	@ (80048a4 <vTaskResume+0xb0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	429a      	cmp	r2, r3
 8004886:	d307      	bcc.n	8004898 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8004888:	4b09      	ldr	r3, [pc, #36]	@ (80048b0 <vTaskResume+0xbc>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8004898:	f000 fd7e 	bl	8005398 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800489c:	bf00      	nop
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	200007e4 	.word	0x200007e4
 80048a8:	200008ec 	.word	0x200008ec
 80048ac:	200007e8 	.word	0x200007e8
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	@ 0x28
 80048b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80048c2:	463a      	mov	r2, r7
 80048c4:	1d39      	adds	r1, r7, #4
 80048c6:	f107 0308 	add.w	r3, r7, #8
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fb fe86 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	9202      	str	r2, [sp, #8]
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	2300      	movs	r3, #0
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	2300      	movs	r3, #0
 80048e0:	460a      	mov	r2, r1
 80048e2:	4923      	ldr	r1, [pc, #140]	@ (8004970 <vTaskStartScheduler+0xbc>)
 80048e4:	4823      	ldr	r0, [pc, #140]	@ (8004974 <vTaskStartScheduler+0xc0>)
 80048e6:	f7ff fcc3 	bl	8004270 <xTaskCreateStatic>
 80048ea:	4603      	mov	r3, r0
 80048ec:	4a22      	ldr	r2, [pc, #136]	@ (8004978 <vTaskStartScheduler+0xc4>)
 80048ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048f0:	4b21      	ldr	r3, [pc, #132]	@ (8004978 <vTaskStartScheduler+0xc4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048f8:	2301      	movs	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e001      	b.n	8004902 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d11d      	bne.n	8004944 <vTaskStartScheduler+0x90>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490c:	b672      	cpsid	i
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	b662      	cpsie	i
 800491c:	613b      	str	r3, [r7, #16]
}
 800491e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004920:	4b16      	ldr	r3, [pc, #88]	@ (800497c <vTaskStartScheduler+0xc8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	334c      	adds	r3, #76	@ 0x4c
 8004926:	4a16      	ldr	r2, [pc, #88]	@ (8004980 <vTaskStartScheduler+0xcc>)
 8004928:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800492a:	4b16      	ldr	r3, [pc, #88]	@ (8004984 <vTaskStartScheduler+0xd0>)
 800492c:	f04f 32ff 	mov.w	r2, #4294967295
 8004930:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004932:	4b15      	ldr	r3, [pc, #84]	@ (8004988 <vTaskStartScheduler+0xd4>)
 8004934:	2201      	movs	r2, #1
 8004936:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004938:	4b14      	ldr	r3, [pc, #80]	@ (800498c <vTaskStartScheduler+0xd8>)
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800493e:	f000 fc77 	bl	8005230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004942:	e011      	b.n	8004968 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d10d      	bne.n	8004968 <vTaskStartScheduler+0xb4>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004950:	b672      	cpsid	i
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	b662      	cpsie	i
 8004960:	60fb      	str	r3, [r7, #12]
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	e7fd      	b.n	8004964 <vTaskStartScheduler+0xb0>
}
 8004968:	bf00      	nop
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	08007168 	.word	0x08007168
 8004974:	08004e45 	.word	0x08004e45
 8004978:	20000908 	.word	0x20000908
 800497c:	200007e4 	.word	0x200007e4
 8004980:	20000028 	.word	0x20000028
 8004984:	20000904 	.word	0x20000904
 8004988:	200008f0 	.word	0x200008f0
 800498c:	200008e8 	.word	0x200008e8

08004990 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004994:	4b04      	ldr	r3, [pc, #16]	@ (80049a8 <vTaskSuspendAll+0x18>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3301      	adds	r3, #1
 800499a:	4a03      	ldr	r2, [pc, #12]	@ (80049a8 <vTaskSuspendAll+0x18>)
 800499c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800499e:	bf00      	nop
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	2000090c 	.word	0x2000090c

080049ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80049ba:	4b43      	ldr	r3, [pc, #268]	@ (8004ac8 <xTaskResumeAll+0x11c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10d      	bne.n	80049de <xTaskResumeAll+0x32>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c6:	b672      	cpsid	i
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	b662      	cpsie	i
 80049d6:	603b      	str	r3, [r7, #0]
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	e7fd      	b.n	80049da <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049de:	f000 fca5 	bl	800532c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049e2:	4b39      	ldr	r3, [pc, #228]	@ (8004ac8 <xTaskResumeAll+0x11c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	4a37      	ldr	r2, [pc, #220]	@ (8004ac8 <xTaskResumeAll+0x11c>)
 80049ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ec:	4b36      	ldr	r3, [pc, #216]	@ (8004ac8 <xTaskResumeAll+0x11c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d161      	bne.n	8004ab8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049f4:	4b35      	ldr	r3, [pc, #212]	@ (8004acc <xTaskResumeAll+0x120>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d05d      	beq.n	8004ab8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049fc:	e02e      	b.n	8004a5c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049fe:	4b34      	ldr	r3, [pc, #208]	@ (8004ad0 <xTaskResumeAll+0x124>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	3318      	adds	r3, #24
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff fb37 	bl	800407e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff fb32 	bl	800407e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1e:	2201      	movs	r2, #1
 8004a20:	409a      	lsls	r2, r3
 8004a22:	4b2c      	ldr	r3, [pc, #176]	@ (8004ad4 <xTaskResumeAll+0x128>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad4 <xTaskResumeAll+0x128>)
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4a27      	ldr	r2, [pc, #156]	@ (8004ad8 <xTaskResumeAll+0x12c>)
 8004a3a:	441a      	add	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f7ff fabe 	bl	8003fc4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a4c:	4b23      	ldr	r3, [pc, #140]	@ (8004adc <xTaskResumeAll+0x130>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d302      	bcc.n	8004a5c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8004a56:	4b22      	ldr	r3, [pc, #136]	@ (8004ae0 <xTaskResumeAll+0x134>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ad0 <xTaskResumeAll+0x124>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1cc      	bne.n	80049fe <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a6a:	f000 faa9 	bl	8004fc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ae4 <xTaskResumeAll+0x138>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d010      	beq.n	8004a9c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a7a:	f000 f837 	bl	8004aec <xTaskIncrementTick>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004a84:	4b16      	ldr	r3, [pc, #88]	@ (8004ae0 <xTaskResumeAll+0x134>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f1      	bne.n	8004a7a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8004a96:	4b13      	ldr	r3, [pc, #76]	@ (8004ae4 <xTaskResumeAll+0x138>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ae0 <xTaskResumeAll+0x134>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d009      	beq.n	8004ab8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae8 <xTaskResumeAll+0x13c>)
 8004aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ab8:	f000 fc6e 	bl	8005398 <vPortExitCritical>

	return xAlreadyYielded;
 8004abc:	68bb      	ldr	r3, [r7, #8]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	2000090c 	.word	0x2000090c
 8004acc:	200008e4 	.word	0x200008e4
 8004ad0:	200008a4 	.word	0x200008a4
 8004ad4:	200008ec 	.word	0x200008ec
 8004ad8:	200007e8 	.word	0x200007e8
 8004adc:	200007e4 	.word	0x200007e4
 8004ae0:	200008f8 	.word	0x200008f8
 8004ae4:	200008f4 	.word	0x200008f4
 8004ae8:	e000ed04 	.word	0xe000ed04

08004aec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af6:	4b50      	ldr	r3, [pc, #320]	@ (8004c38 <xTaskIncrementTick+0x14c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 808b 	bne.w	8004c16 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b00:	4b4e      	ldr	r3, [pc, #312]	@ (8004c3c <xTaskIncrementTick+0x150>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3301      	adds	r3, #1
 8004b06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b08:	4a4c      	ldr	r2, [pc, #304]	@ (8004c3c <xTaskIncrementTick+0x150>)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d123      	bne.n	8004b5c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b14:	4b4a      	ldr	r3, [pc, #296]	@ (8004c40 <xTaskIncrementTick+0x154>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <xTaskIncrementTick+0x4e>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b22:	b672      	cpsid	i
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	b662      	cpsie	i
 8004b32:	603b      	str	r3, [r7, #0]
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	e7fd      	b.n	8004b36 <xTaskIncrementTick+0x4a>
 8004b3a:	4b41      	ldr	r3, [pc, #260]	@ (8004c40 <xTaskIncrementTick+0x154>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	4b40      	ldr	r3, [pc, #256]	@ (8004c44 <xTaskIncrementTick+0x158>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a3e      	ldr	r2, [pc, #248]	@ (8004c40 <xTaskIncrementTick+0x154>)
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	4a3e      	ldr	r2, [pc, #248]	@ (8004c44 <xTaskIncrementTick+0x158>)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c48 <xTaskIncrementTick+0x15c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3301      	adds	r3, #1
 8004b54:	4a3c      	ldr	r2, [pc, #240]	@ (8004c48 <xTaskIncrementTick+0x15c>)
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	f000 fa32 	bl	8004fc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c4c <xTaskIncrementTick+0x160>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d348      	bcc.n	8004bf8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b66:	4b36      	ldr	r3, [pc, #216]	@ (8004c40 <xTaskIncrementTick+0x154>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b70:	4b36      	ldr	r3, [pc, #216]	@ (8004c4c <xTaskIncrementTick+0x160>)
 8004b72:	f04f 32ff 	mov.w	r2, #4294967295
 8004b76:	601a      	str	r2, [r3, #0]
					break;
 8004b78:	e03e      	b.n	8004bf8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b7a:	4b31      	ldr	r3, [pc, #196]	@ (8004c40 <xTaskIncrementTick+0x154>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d203      	bcs.n	8004b9a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b92:	4a2e      	ldr	r2, [pc, #184]	@ (8004c4c <xTaskIncrementTick+0x160>)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b98:	e02e      	b.n	8004bf8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fa6d 	bl	800407e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d004      	beq.n	8004bb6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	3318      	adds	r3, #24
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fa64 	bl	800407e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bba:	2201      	movs	r2, #1
 8004bbc:	409a      	lsls	r2, r3
 8004bbe:	4b24      	ldr	r3, [pc, #144]	@ (8004c50 <xTaskIncrementTick+0x164>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	4a22      	ldr	r2, [pc, #136]	@ (8004c50 <xTaskIncrementTick+0x164>)
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c54 <xTaskIncrementTick+0x168>)
 8004bd6:	441a      	add	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4610      	mov	r0, r2
 8004be0:	f7ff f9f0 	bl	8003fc4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c58 <xTaskIncrementTick+0x16c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d3b9      	bcc.n	8004b66 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bf6:	e7b6      	b.n	8004b66 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bf8:	4b17      	ldr	r3, [pc, #92]	@ (8004c58 <xTaskIncrementTick+0x16c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bfe:	4915      	ldr	r1, [pc, #84]	@ (8004c54 <xTaskIncrementTick+0x168>)
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d907      	bls.n	8004c20 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004c10:	2301      	movs	r3, #1
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e004      	b.n	8004c20 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c16:	4b11      	ldr	r3, [pc, #68]	@ (8004c5c <xTaskIncrementTick+0x170>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8004c5c <xTaskIncrementTick+0x170>)
 8004c1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c20:	4b0f      	ldr	r3, [pc, #60]	@ (8004c60 <xTaskIncrementTick+0x174>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004c2c:	697b      	ldr	r3, [r7, #20]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	2000090c 	.word	0x2000090c
 8004c3c:	200008e8 	.word	0x200008e8
 8004c40:	2000089c 	.word	0x2000089c
 8004c44:	200008a0 	.word	0x200008a0
 8004c48:	200008fc 	.word	0x200008fc
 8004c4c:	20000904 	.word	0x20000904
 8004c50:	200008ec 	.word	0x200008ec
 8004c54:	200007e8 	.word	0x200007e8
 8004c58:	200007e4 	.word	0x200007e4
 8004c5c:	200008f4 	.word	0x200008f4
 8004c60:	200008f8 	.word	0x200008f8

08004c64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d60 <vTaskSwitchContext+0xfc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c72:	4b3c      	ldr	r3, [pc, #240]	@ (8004d64 <vTaskSwitchContext+0x100>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c78:	e06e      	b.n	8004d58 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8004c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d64 <vTaskSwitchContext+0x100>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004c80:	4b39      	ldr	r3, [pc, #228]	@ (8004d68 <vTaskSwitchContext+0x104>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d111      	bne.n	8004cbc <vTaskSwitchContext+0x58>
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d10b      	bne.n	8004cbc <vTaskSwitchContext+0x58>
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d105      	bne.n	8004cbc <vTaskSwitchContext+0x58>
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d008      	beq.n	8004cce <vTaskSwitchContext+0x6a>
 8004cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004d68 <vTaskSwitchContext+0x104>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4b29      	ldr	r3, [pc, #164]	@ (8004d68 <vTaskSwitchContext+0x104>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3334      	adds	r3, #52	@ 0x34
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f7fb fe11 	bl	80008f0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cce:	4b27      	ldr	r3, [pc, #156]	@ (8004d6c <vTaskSwitchContext+0x108>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004cdc:	7afb      	ldrb	r3, [r7, #11]
 8004cde:	f1c3 031f 	rsb	r3, r3, #31
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	4922      	ldr	r1, [pc, #136]	@ (8004d70 <vTaskSwitchContext+0x10c>)
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10d      	bne.n	8004d14 <vTaskSwitchContext+0xb0>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfc:	b672      	cpsid	i
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	b662      	cpsie	i
 8004d0c:	607b      	str	r3, [r7, #4]
}
 8004d0e:	bf00      	nop
 8004d10:	bf00      	nop
 8004d12:	e7fd      	b.n	8004d10 <vTaskSwitchContext+0xac>
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4a14      	ldr	r2, [pc, #80]	@ (8004d70 <vTaskSwitchContext+0x10c>)
 8004d20:	4413      	add	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	605a      	str	r2, [r3, #4]
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	3308      	adds	r3, #8
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d104      	bne.n	8004d44 <vTaskSwitchContext+0xe0>
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	605a      	str	r2, [r3, #4]
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	4a07      	ldr	r2, [pc, #28]	@ (8004d68 <vTaskSwitchContext+0x104>)
 8004d4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d4e:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <vTaskSwitchContext+0x104>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	334c      	adds	r3, #76	@ 0x4c
 8004d54:	4a07      	ldr	r2, [pc, #28]	@ (8004d74 <vTaskSwitchContext+0x110>)
 8004d56:	6013      	str	r3, [r2, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	2000090c 	.word	0x2000090c
 8004d64:	200008f8 	.word	0x200008f8
 8004d68:	200007e4 	.word	0x200007e4
 8004d6c:	200008ec 	.word	0x200008ec
 8004d70:	200007e8 	.word	0x200007e8
 8004d74:	20000028 	.word	0x20000028

08004d78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	b672      	cpsid	i
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	b662      	cpsie	i
 8004da2:	60fb      	str	r3, [r7, #12]
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop
 8004da8:	e7fd      	b.n	8004da6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	3318      	adds	r3, #24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff f965 	bl	800407e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004db4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e2c <xTaskRemoveFromEventList+0xb4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d11c      	bne.n	8004df6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff f95c 	bl	800407e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	2201      	movs	r2, #1
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	4b18      	ldr	r3, [pc, #96]	@ (8004e30 <xTaskRemoveFromEventList+0xb8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	4a16      	ldr	r2, [pc, #88]	@ (8004e30 <xTaskRemoveFromEventList+0xb8>)
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4a13      	ldr	r2, [pc, #76]	@ (8004e34 <xTaskRemoveFromEventList+0xbc>)
 8004de6:	441a      	add	r2, r3
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f7ff f8e8 	bl	8003fc4 <vListInsertEnd>
 8004df4:	e005      	b.n	8004e02 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	3318      	adds	r3, #24
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	480e      	ldr	r0, [pc, #56]	@ (8004e38 <xTaskRemoveFromEventList+0xc0>)
 8004dfe:	f7ff f8e1 	bl	8003fc4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e06:	4b0d      	ldr	r3, [pc, #52]	@ (8004e3c <xTaskRemoveFromEventList+0xc4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d905      	bls.n	8004e1c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e10:	2301      	movs	r3, #1
 8004e12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e14:	4b0a      	ldr	r3, [pc, #40]	@ (8004e40 <xTaskRemoveFromEventList+0xc8>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	e001      	b.n	8004e20 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e20:	697b      	ldr	r3, [r7, #20]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	2000090c 	.word	0x2000090c
 8004e30:	200008ec 	.word	0x200008ec
 8004e34:	200007e8 	.word	0x200007e8
 8004e38:	200008a4 	.word	0x200008a4
 8004e3c:	200007e4 	.word	0x200007e4
 8004e40:	200008f8 	.word	0x200008f8

08004e44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e4c:	f000 f852 	bl	8004ef4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e50:	4b06      	ldr	r3, [pc, #24]	@ (8004e6c <prvIdleTask+0x28>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d9f9      	bls.n	8004e4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <prvIdleTask+0x2c>)
 8004e5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e68:	e7f0      	b.n	8004e4c <prvIdleTask+0x8>
 8004e6a:	bf00      	nop
 8004e6c:	200007e8 	.word	0x200007e8
 8004e70:	e000ed04 	.word	0xe000ed04

08004e74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	607b      	str	r3, [r7, #4]
 8004e7e:	e00c      	b.n	8004e9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4a12      	ldr	r2, [pc, #72]	@ (8004ed4 <prvInitialiseTaskLists+0x60>)
 8004e8c:	4413      	add	r3, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff f86b 	bl	8003f6a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3301      	adds	r3, #1
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b06      	cmp	r3, #6
 8004e9e:	d9ef      	bls.n	8004e80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ea0:	480d      	ldr	r0, [pc, #52]	@ (8004ed8 <prvInitialiseTaskLists+0x64>)
 8004ea2:	f7ff f862 	bl	8003f6a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ea6:	480d      	ldr	r0, [pc, #52]	@ (8004edc <prvInitialiseTaskLists+0x68>)
 8004ea8:	f7ff f85f 	bl	8003f6a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004eac:	480c      	ldr	r0, [pc, #48]	@ (8004ee0 <prvInitialiseTaskLists+0x6c>)
 8004eae:	f7ff f85c 	bl	8003f6a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004eb2:	480c      	ldr	r0, [pc, #48]	@ (8004ee4 <prvInitialiseTaskLists+0x70>)
 8004eb4:	f7ff f859 	bl	8003f6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004eb8:	480b      	ldr	r0, [pc, #44]	@ (8004ee8 <prvInitialiseTaskLists+0x74>)
 8004eba:	f7ff f856 	bl	8003f6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <prvInitialiseTaskLists+0x78>)
 8004ec0:	4a05      	ldr	r2, [pc, #20]	@ (8004ed8 <prvInitialiseTaskLists+0x64>)
 8004ec2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef0 <prvInitialiseTaskLists+0x7c>)
 8004ec6:	4a05      	ldr	r2, [pc, #20]	@ (8004edc <prvInitialiseTaskLists+0x68>)
 8004ec8:	601a      	str	r2, [r3, #0]
}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200007e8 	.word	0x200007e8
 8004ed8:	20000874 	.word	0x20000874
 8004edc:	20000888 	.word	0x20000888
 8004ee0:	200008a4 	.word	0x200008a4
 8004ee4:	200008b8 	.word	0x200008b8
 8004ee8:	200008d0 	.word	0x200008d0
 8004eec:	2000089c 	.word	0x2000089c
 8004ef0:	200008a0 	.word	0x200008a0

08004ef4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004efa:	e019      	b.n	8004f30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004efc:	f000 fa16 	bl	800532c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f00:	4b10      	ldr	r3, [pc, #64]	@ (8004f44 <prvCheckTasksWaitingTermination+0x50>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff f8b6 	bl	800407e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <prvCheckTasksWaitingTermination+0x54>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	4a0b      	ldr	r2, [pc, #44]	@ (8004f48 <prvCheckTasksWaitingTermination+0x54>)
 8004f1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <prvCheckTasksWaitingTermination+0x58>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	4a0a      	ldr	r2, [pc, #40]	@ (8004f4c <prvCheckTasksWaitingTermination+0x58>)
 8004f24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f26:	f000 fa37 	bl	8005398 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f810 	bl	8004f50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f30:	4b06      	ldr	r3, [pc, #24]	@ (8004f4c <prvCheckTasksWaitingTermination+0x58>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e1      	bne.n	8004efc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	200008b8 	.word	0x200008b8
 8004f48:	200008e4 	.word	0x200008e4
 8004f4c:	200008cc 	.word	0x200008cc

08004f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	334c      	adds	r3, #76	@ 0x4c
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 ff97 	bl	8005e90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d108      	bne.n	8004f7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fb91 	bl	8005698 <vPortFree>
				vPortFree( pxTCB );
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fb8e 	bl	8005698 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f7c:	e01b      	b.n	8004fb6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d103      	bne.n	8004f90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fb85 	bl	8005698 <vPortFree>
	}
 8004f8e:	e012      	b.n	8004fb6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d00d      	beq.n	8004fb6 <prvDeleteTCB+0x66>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9e:	b672      	cpsid	i
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	b662      	cpsie	i
 8004fae:	60fb      	str	r3, [r7, #12]
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop
 8004fb4:	e7fd      	b.n	8004fb2 <prvDeleteTCB+0x62>
	}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff8 <prvResetNextTaskUnblockTime+0x38>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d104      	bne.n	8004fda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ffc <prvResetNextTaskUnblockTime+0x3c>)
 8004fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fd8:	e008      	b.n	8004fec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fda:	4b07      	ldr	r3, [pc, #28]	@ (8004ff8 <prvResetNextTaskUnblockTime+0x38>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	4a04      	ldr	r2, [pc, #16]	@ (8004ffc <prvResetNextTaskUnblockTime+0x3c>)
 8004fea:	6013      	str	r3, [r2, #0]
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	2000089c 	.word	0x2000089c
 8004ffc:	20000904 	.word	0x20000904

08005000 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005006:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <xTaskGetSchedulerState+0x34>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800500e:	2301      	movs	r3, #1
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	e008      	b.n	8005026 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005014:	4b08      	ldr	r3, [pc, #32]	@ (8005038 <xTaskGetSchedulerState+0x38>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d102      	bne.n	8005022 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800501c:	2302      	movs	r3, #2
 800501e:	607b      	str	r3, [r7, #4]
 8005020:	e001      	b.n	8005026 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005022:	2300      	movs	r3, #0
 8005024:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005026:	687b      	ldr	r3, [r7, #4]
	}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	200008f0 	.word	0x200008f0
 8005038:	2000090c 	.word	0x2000090c

0800503c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005046:	4b29      	ldr	r3, [pc, #164]	@ (80050ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800504c:	4b28      	ldr	r3, [pc, #160]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3304      	adds	r3, #4
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff f813 	bl	800407e <uxListRemove>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10b      	bne.n	8005076 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800505e:	4b24      	ldr	r3, [pc, #144]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005064:	2201      	movs	r2, #1
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43da      	mvns	r2, r3
 800506c:	4b21      	ldr	r3, [pc, #132]	@ (80050f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4013      	ands	r3, r2
 8005072:	4a20      	ldr	r2, [pc, #128]	@ (80050f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005074:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d10a      	bne.n	8005094 <prvAddCurrentTaskToDelayedList+0x58>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d007      	beq.n	8005094 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005084:	4b1a      	ldr	r3, [pc, #104]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3304      	adds	r3, #4
 800508a:	4619      	mov	r1, r3
 800508c:	481a      	ldr	r0, [pc, #104]	@ (80050f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800508e:	f7fe ff99 	bl	8003fc4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005092:	e026      	b.n	80050e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800509c:	4b14      	ldr	r3, [pc, #80]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d209      	bcs.n	80050c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ac:	4b13      	ldr	r3, [pc, #76]	@ (80050fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	4b0f      	ldr	r3, [pc, #60]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4619      	mov	r1, r3
 80050b8:	4610      	mov	r0, r2
 80050ba:	f7fe ffa7 	bl	800400c <vListInsert>
}
 80050be:	e010      	b.n	80050e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005100 <prvAddCurrentTaskToDelayedList+0xc4>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f7fe ff9d 	bl	800400c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d202      	bcs.n	80050e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80050dc:	4a09      	ldr	r2, [pc, #36]	@ (8005104 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	6013      	str	r3, [r2, #0]
}
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	200008e8 	.word	0x200008e8
 80050f0:	200007e4 	.word	0x200007e4
 80050f4:	200008ec 	.word	0x200008ec
 80050f8:	200008d0 	.word	0x200008d0
 80050fc:	200008a0 	.word	0x200008a0
 8005100:	2000089c 	.word	0x2000089c
 8005104:	20000904 	.word	0x20000904

08005108 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3b04      	subs	r3, #4
 8005118:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3b04      	subs	r3, #4
 8005126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f023 0201 	bic.w	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3b04      	subs	r3, #4
 8005136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005138:	4a0c      	ldr	r2, [pc, #48]	@ (800516c <pxPortInitialiseStack+0x64>)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3b14      	subs	r3, #20
 8005142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b04      	subs	r3, #4
 800514e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f06f 0202 	mvn.w	r2, #2
 8005156:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3b20      	subs	r3, #32
 800515c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800515e:	68fb      	ldr	r3, [r7, #12]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	08005171 	.word	0x08005171

08005170 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005176:	2300      	movs	r3, #0
 8005178:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800517a:	4b15      	ldr	r3, [pc, #84]	@ (80051d0 <prvTaskExitError+0x60>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005182:	d00d      	beq.n	80051a0 <prvTaskExitError+0x30>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	b672      	cpsid	i
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	b662      	cpsie	i
 8005198:	60fb      	str	r3, [r7, #12]
}
 800519a:	bf00      	nop
 800519c:	bf00      	nop
 800519e:	e7fd      	b.n	800519c <prvTaskExitError+0x2c>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a4:	b672      	cpsid	i
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	b662      	cpsie	i
 80051b4:	60bb      	str	r3, [r7, #8]
}
 80051b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051b8:	bf00      	nop
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0fc      	beq.n	80051ba <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20000018 	.word	0x20000018
	...

080051e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051e0:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <pxCurrentTCBConst2>)
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	6808      	ldr	r0, [r1, #0]
 80051e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ea:	f380 8809 	msr	PSP, r0
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f380 8811 	msr	BASEPRI, r0
 80051fa:	4770      	bx	lr
 80051fc:	f3af 8000 	nop.w

08005200 <pxCurrentTCBConst2>:
 8005200:	200007e4 	.word	0x200007e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005208:	4808      	ldr	r0, [pc, #32]	@ (800522c <prvPortStartFirstTask+0x24>)
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	6800      	ldr	r0, [r0, #0]
 800520e:	f380 8808 	msr	MSP, r0
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8814 	msr	CONTROL, r0
 800521a:	b662      	cpsie	i
 800521c:	b661      	cpsie	f
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	df00      	svc	0
 8005228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800522a:	bf00      	nop
 800522c:	e000ed08 	.word	0xe000ed08

08005230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005236:	4b37      	ldr	r3, [pc, #220]	@ (8005314 <xPortStartScheduler+0xe4>)
 8005238:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	22ff      	movs	r2, #255	@ 0xff
 8005246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005258:	b2da      	uxtb	r2, r3
 800525a:	4b2f      	ldr	r3, [pc, #188]	@ (8005318 <xPortStartScheduler+0xe8>)
 800525c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800525e:	4b2f      	ldr	r3, [pc, #188]	@ (800531c <xPortStartScheduler+0xec>)
 8005260:	2207      	movs	r2, #7
 8005262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005264:	e009      	b.n	800527a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005266:	4b2d      	ldr	r3, [pc, #180]	@ (800531c <xPortStartScheduler+0xec>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3b01      	subs	r3, #1
 800526c:	4a2b      	ldr	r2, [pc, #172]	@ (800531c <xPortStartScheduler+0xec>)
 800526e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	b2db      	uxtb	r3, r3
 8005278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005282:	2b80      	cmp	r3, #128	@ 0x80
 8005284:	d0ef      	beq.n	8005266 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005286:	4b25      	ldr	r3, [pc, #148]	@ (800531c <xPortStartScheduler+0xec>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f1c3 0307 	rsb	r3, r3, #7
 800528e:	2b04      	cmp	r3, #4
 8005290:	d00d      	beq.n	80052ae <xPortStartScheduler+0x7e>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005296:	b672      	cpsid	i
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	b662      	cpsie	i
 80052a6:	60bb      	str	r3, [r7, #8]
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	e7fd      	b.n	80052aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052ae:	4b1b      	ldr	r3, [pc, #108]	@ (800531c <xPortStartScheduler+0xec>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	4a19      	ldr	r2, [pc, #100]	@ (800531c <xPortStartScheduler+0xec>)
 80052b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052b8:	4b18      	ldr	r3, [pc, #96]	@ (800531c <xPortStartScheduler+0xec>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052c0:	4a16      	ldr	r2, [pc, #88]	@ (800531c <xPortStartScheduler+0xec>)
 80052c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052cc:	4b14      	ldr	r3, [pc, #80]	@ (8005320 <xPortStartScheduler+0xf0>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a13      	ldr	r2, [pc, #76]	@ (8005320 <xPortStartScheduler+0xf0>)
 80052d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052d8:	4b11      	ldr	r3, [pc, #68]	@ (8005320 <xPortStartScheduler+0xf0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a10      	ldr	r2, [pc, #64]	@ (8005320 <xPortStartScheduler+0xf0>)
 80052de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052e4:	f000 f8dc 	bl	80054a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005324 <xPortStartScheduler+0xf4>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052ee:	f000 f8fb 	bl	80054e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005328 <xPortStartScheduler+0xf8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005328 <xPortStartScheduler+0xf8>)
 80052f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80052fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052fe:	f7ff ff83 	bl	8005208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005302:	f7ff fcaf 	bl	8004c64 <vTaskSwitchContext>
	prvTaskExitError();
 8005306:	f7ff ff33 	bl	8005170 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	e000e400 	.word	0xe000e400
 8005318:	20000910 	.word	0x20000910
 800531c:	20000914 	.word	0x20000914
 8005320:	e000ed20 	.word	0xe000ed20
 8005324:	20000018 	.word	0x20000018
 8005328:	e000ef34 	.word	0xe000ef34

0800532c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005336:	b672      	cpsid	i
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	b662      	cpsie	i
 8005346:	607b      	str	r3, [r7, #4]
}
 8005348:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800534a:	4b11      	ldr	r3, [pc, #68]	@ (8005390 <vPortEnterCritical+0x64>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3301      	adds	r3, #1
 8005350:	4a0f      	ldr	r2, [pc, #60]	@ (8005390 <vPortEnterCritical+0x64>)
 8005352:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005354:	4b0e      	ldr	r3, [pc, #56]	@ (8005390 <vPortEnterCritical+0x64>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d112      	bne.n	8005382 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800535c:	4b0d      	ldr	r3, [pc, #52]	@ (8005394 <vPortEnterCritical+0x68>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <vPortEnterCritical+0x56>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536a:	b672      	cpsid	i
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	b662      	cpsie	i
 800537a:	603b      	str	r3, [r7, #0]
}
 800537c:	bf00      	nop
 800537e:	bf00      	nop
 8005380:	e7fd      	b.n	800537e <vPortEnterCritical+0x52>
	}
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20000018 	.word	0x20000018
 8005394:	e000ed04 	.word	0xe000ed04

08005398 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800539e:	4b13      	ldr	r3, [pc, #76]	@ (80053ec <vPortExitCritical+0x54>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10d      	bne.n	80053c2 <vPortExitCritical+0x2a>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053aa:	b672      	cpsid	i
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	b662      	cpsie	i
 80053ba:	607b      	str	r3, [r7, #4]
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	e7fd      	b.n	80053be <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80053c2:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <vPortExitCritical+0x54>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	4a08      	ldr	r2, [pc, #32]	@ (80053ec <vPortExitCritical+0x54>)
 80053ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053cc:	4b07      	ldr	r3, [pc, #28]	@ (80053ec <vPortExitCritical+0x54>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d105      	bne.n	80053e0 <vPortExitCritical+0x48>
 80053d4:	2300      	movs	r3, #0
 80053d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	20000018 	.word	0x20000018

080053f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053f0:	f3ef 8009 	mrs	r0, PSP
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	4b15      	ldr	r3, [pc, #84]	@ (8005450 <pxCurrentTCBConst>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	f01e 0f10 	tst.w	lr, #16
 8005400:	bf08      	it	eq
 8005402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540a:	6010      	str	r0, [r2, #0]
 800540c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005410:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005414:	b672      	cpsid	i
 8005416:	f380 8811 	msr	BASEPRI, r0
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	b662      	cpsie	i
 8005424:	f7ff fc1e 	bl	8004c64 <vTaskSwitchContext>
 8005428:	f04f 0000 	mov.w	r0, #0
 800542c:	f380 8811 	msr	BASEPRI, r0
 8005430:	bc09      	pop	{r0, r3}
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	6808      	ldr	r0, [r1, #0]
 8005436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800543a:	f01e 0f10 	tst.w	lr, #16
 800543e:	bf08      	it	eq
 8005440:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005444:	f380 8809 	msr	PSP, r0
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop

08005450 <pxCurrentTCBConst>:
 8005450:	200007e4 	.word	0x200007e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop

08005458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	b672      	cpsid	i
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	b662      	cpsie	i
 8005472:	607b      	str	r3, [r7, #4]
}
 8005474:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005476:	f7ff fb39 	bl	8004aec <xTaskIncrementTick>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005480:	4b06      	ldr	r3, [pc, #24]	@ (800549c <xPortSysTickHandler+0x44>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	2300      	movs	r3, #0
 800548a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	f383 8811 	msr	BASEPRI, r3
}
 8005492:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	e000ed04 	.word	0xe000ed04

080054a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054a4:	4b0b      	ldr	r3, [pc, #44]	@ (80054d4 <vPortSetupTimerInterrupt+0x34>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054aa:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <vPortSetupTimerInterrupt+0x38>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054b0:	4b0a      	ldr	r3, [pc, #40]	@ (80054dc <vPortSetupTimerInterrupt+0x3c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a0a      	ldr	r2, [pc, #40]	@ (80054e0 <vPortSetupTimerInterrupt+0x40>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	099b      	lsrs	r3, r3, #6
 80054bc:	4a09      	ldr	r2, [pc, #36]	@ (80054e4 <vPortSetupTimerInterrupt+0x44>)
 80054be:	3b01      	subs	r3, #1
 80054c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054c2:	4b04      	ldr	r3, [pc, #16]	@ (80054d4 <vPortSetupTimerInterrupt+0x34>)
 80054c4:	2207      	movs	r2, #7
 80054c6:	601a      	str	r2, [r3, #0]
}
 80054c8:	bf00      	nop
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	e000e010 	.word	0xe000e010
 80054d8:	e000e018 	.word	0xe000e018
 80054dc:	2000000c 	.word	0x2000000c
 80054e0:	10624dd3 	.word	0x10624dd3
 80054e4:	e000e014 	.word	0xe000e014

080054e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80054f8 <vPortEnableVFP+0x10>
 80054ec:	6801      	ldr	r1, [r0, #0]
 80054ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80054f2:	6001      	str	r1, [r0, #0]
 80054f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054f6:	bf00      	nop
 80054f8:	e000ed88 	.word	0xe000ed88

080054fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	@ 0x28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005508:	f7ff fa42 	bl	8004990 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800550c:	4b5d      	ldr	r3, [pc, #372]	@ (8005684 <pvPortMalloc+0x188>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005514:	f000 f920 	bl	8005758 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005518:	4b5b      	ldr	r3, [pc, #364]	@ (8005688 <pvPortMalloc+0x18c>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	f040 8094 	bne.w	800564e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d020      	beq.n	800556e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800552c:	2208      	movs	r2, #8
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4413      	add	r3, r2
 8005532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b00      	cmp	r3, #0
 800553c:	d017      	beq.n	800556e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f023 0307 	bic.w	r3, r3, #7
 8005544:	3308      	adds	r3, #8
 8005546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00d      	beq.n	800556e <pvPortMalloc+0x72>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005556:	b672      	cpsid	i
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	b662      	cpsie	i
 8005566:	617b      	str	r3, [r7, #20]
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	e7fd      	b.n	800556a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d06c      	beq.n	800564e <pvPortMalloc+0x152>
 8005574:	4b45      	ldr	r3, [pc, #276]	@ (800568c <pvPortMalloc+0x190>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	429a      	cmp	r2, r3
 800557c:	d867      	bhi.n	800564e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800557e:	4b44      	ldr	r3, [pc, #272]	@ (8005690 <pvPortMalloc+0x194>)
 8005580:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005582:	4b43      	ldr	r3, [pc, #268]	@ (8005690 <pvPortMalloc+0x194>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005588:	e004      	b.n	8005594 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d903      	bls.n	80055a6 <pvPortMalloc+0xaa>
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f1      	bne.n	800558a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055a6:	4b37      	ldr	r3, [pc, #220]	@ (8005684 <pvPortMalloc+0x188>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d04e      	beq.n	800564e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2208      	movs	r2, #8
 80055b6:	4413      	add	r3, r2
 80055b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	1ad2      	subs	r2, r2, r3
 80055ca:	2308      	movs	r3, #8
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d922      	bls.n	8005618 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4413      	add	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00d      	beq.n	8005600 <pvPortMalloc+0x104>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e8:	b672      	cpsid	i
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	b662      	cpsie	i
 80055f8:	613b      	str	r3, [r7, #16]
}
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
 80055fe:	e7fd      	b.n	80055fc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	1ad2      	subs	r2, r2, r3
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005612:	69b8      	ldr	r0, [r7, #24]
 8005614:	f000 f902 	bl	800581c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005618:	4b1c      	ldr	r3, [pc, #112]	@ (800568c <pvPortMalloc+0x190>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	4a1a      	ldr	r2, [pc, #104]	@ (800568c <pvPortMalloc+0x190>)
 8005624:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005626:	4b19      	ldr	r3, [pc, #100]	@ (800568c <pvPortMalloc+0x190>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b1a      	ldr	r3, [pc, #104]	@ (8005694 <pvPortMalloc+0x198>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d203      	bcs.n	800563a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005632:	4b16      	ldr	r3, [pc, #88]	@ (800568c <pvPortMalloc+0x190>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a17      	ldr	r2, [pc, #92]	@ (8005694 <pvPortMalloc+0x198>)
 8005638:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	4b12      	ldr	r3, [pc, #72]	@ (8005688 <pvPortMalloc+0x18c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	431a      	orrs	r2, r3
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800564e:	f7ff f9ad 	bl	80049ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00d      	beq.n	8005678 <pvPortMalloc+0x17c>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005660:	b672      	cpsid	i
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	b662      	cpsie	i
 8005670:	60fb      	str	r3, [r7, #12]
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	e7fd      	b.n	8005674 <pvPortMalloc+0x178>
	return pvReturn;
 8005678:	69fb      	ldr	r3, [r7, #28]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3728      	adds	r7, #40	@ 0x28
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20004520 	.word	0x20004520
 8005688:	2000452c 	.word	0x2000452c
 800568c:	20004524 	.word	0x20004524
 8005690:	20004518 	.word	0x20004518
 8005694:	20004528 	.word	0x20004528

08005698 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d04e      	beq.n	8005748 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056aa:	2308      	movs	r3, #8
 80056ac:	425b      	negs	r3, r3
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4413      	add	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	4b24      	ldr	r3, [pc, #144]	@ (8005750 <vPortFree+0xb8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10d      	bne.n	80056e2 <vPortFree+0x4a>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ca:	b672      	cpsid	i
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	b662      	cpsie	i
 80056da:	60fb      	str	r3, [r7, #12]
}
 80056dc:	bf00      	nop
 80056de:	bf00      	nop
 80056e0:	e7fd      	b.n	80056de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00d      	beq.n	8005706 <vPortFree+0x6e>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	b672      	cpsid	i
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	b662      	cpsie	i
 80056fe:	60bb      	str	r3, [r7, #8]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	4b11      	ldr	r3, [pc, #68]	@ (8005750 <vPortFree+0xb8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4013      	ands	r3, r2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d019      	beq.n	8005748 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d115      	bne.n	8005748 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	4b0b      	ldr	r3, [pc, #44]	@ (8005750 <vPortFree+0xb8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	43db      	mvns	r3, r3
 8005726:	401a      	ands	r2, r3
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800572c:	f7ff f930 	bl	8004990 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	4b07      	ldr	r3, [pc, #28]	@ (8005754 <vPortFree+0xbc>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4413      	add	r3, r2
 800573a:	4a06      	ldr	r2, [pc, #24]	@ (8005754 <vPortFree+0xbc>)
 800573c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800573e:	6938      	ldr	r0, [r7, #16]
 8005740:	f000 f86c 	bl	800581c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005744:	f7ff f932 	bl	80049ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005748:	bf00      	nop
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	2000452c 	.word	0x2000452c
 8005754:	20004524 	.word	0x20004524

08005758 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800575e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005762:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005764:	4b27      	ldr	r3, [pc, #156]	@ (8005804 <prvHeapInit+0xac>)
 8005766:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00c      	beq.n	800578c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3307      	adds	r3, #7
 8005776:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0307 	bic.w	r3, r3, #7
 800577e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	4a1f      	ldr	r2, [pc, #124]	@ (8005804 <prvHeapInit+0xac>)
 8005788:	4413      	add	r3, r2
 800578a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005790:	4a1d      	ldr	r2, [pc, #116]	@ (8005808 <prvHeapInit+0xb0>)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005796:	4b1c      	ldr	r3, [pc, #112]	@ (8005808 <prvHeapInit+0xb0>)
 8005798:	2200      	movs	r2, #0
 800579a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4413      	add	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057a4:	2208      	movs	r2, #8
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0307 	bic.w	r3, r3, #7
 80057b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4a15      	ldr	r2, [pc, #84]	@ (800580c <prvHeapInit+0xb4>)
 80057b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057ba:	4b14      	ldr	r3, [pc, #80]	@ (800580c <prvHeapInit+0xb4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057c2:	4b12      	ldr	r3, [pc, #72]	@ (800580c <prvHeapInit+0xb4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	1ad2      	subs	r2, r2, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057d8:	4b0c      	ldr	r3, [pc, #48]	@ (800580c <prvHeapInit+0xb4>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005810 <prvHeapInit+0xb8>)
 80057e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	4a09      	ldr	r2, [pc, #36]	@ (8005814 <prvHeapInit+0xbc>)
 80057ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057f0:	4b09      	ldr	r3, [pc, #36]	@ (8005818 <prvHeapInit+0xc0>)
 80057f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80057f6:	601a      	str	r2, [r3, #0]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	20000918 	.word	0x20000918
 8005808:	20004518 	.word	0x20004518
 800580c:	20004520 	.word	0x20004520
 8005810:	20004528 	.word	0x20004528
 8005814:	20004524 	.word	0x20004524
 8005818:	2000452c 	.word	0x2000452c

0800581c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005824:	4b28      	ldr	r3, [pc, #160]	@ (80058c8 <prvInsertBlockIntoFreeList+0xac>)
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e002      	b.n	8005830 <prvInsertBlockIntoFreeList+0x14>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	429a      	cmp	r2, r3
 8005838:	d8f7      	bhi.n	800582a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	4413      	add	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	429a      	cmp	r2, r3
 800584a:	d108      	bne.n	800585e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	441a      	add	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	441a      	add	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d118      	bne.n	80058a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b15      	ldr	r3, [pc, #84]	@ (80058cc <prvInsertBlockIntoFreeList+0xb0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d00d      	beq.n	800589a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	441a      	add	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	e008      	b.n	80058ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800589a:	4b0c      	ldr	r3, [pc, #48]	@ (80058cc <prvInsertBlockIntoFreeList+0xb0>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	e003      	b.n	80058ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d002      	beq.n	80058ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ba:	bf00      	nop
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	20004518 	.word	0x20004518
 80058cc:	20004520 	.word	0x20004520

080058d0 <atoi>:
 80058d0:	220a      	movs	r2, #10
 80058d2:	2100      	movs	r1, #0
 80058d4:	f000 b87a 	b.w	80059cc <strtol>

080058d8 <_strtol_l.isra.0>:
 80058d8:	2b24      	cmp	r3, #36	@ 0x24
 80058da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058de:	4686      	mov	lr, r0
 80058e0:	4690      	mov	r8, r2
 80058e2:	d801      	bhi.n	80058e8 <_strtol_l.isra.0+0x10>
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d106      	bne.n	80058f6 <_strtol_l.isra.0+0x1e>
 80058e8:	f000 fb66 	bl	8005fb8 <__errno>
 80058ec:	2316      	movs	r3, #22
 80058ee:	6003      	str	r3, [r0, #0]
 80058f0:	2000      	movs	r0, #0
 80058f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f6:	4834      	ldr	r0, [pc, #208]	@ (80059c8 <_strtol_l.isra.0+0xf0>)
 80058f8:	460d      	mov	r5, r1
 80058fa:	462a      	mov	r2, r5
 80058fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005900:	5d06      	ldrb	r6, [r0, r4]
 8005902:	f016 0608 	ands.w	r6, r6, #8
 8005906:	d1f8      	bne.n	80058fa <_strtol_l.isra.0+0x22>
 8005908:	2c2d      	cmp	r4, #45	@ 0x2d
 800590a:	d110      	bne.n	800592e <_strtol_l.isra.0+0x56>
 800590c:	782c      	ldrb	r4, [r5, #0]
 800590e:	2601      	movs	r6, #1
 8005910:	1c95      	adds	r5, r2, #2
 8005912:	f033 0210 	bics.w	r2, r3, #16
 8005916:	d115      	bne.n	8005944 <_strtol_l.isra.0+0x6c>
 8005918:	2c30      	cmp	r4, #48	@ 0x30
 800591a:	d10d      	bne.n	8005938 <_strtol_l.isra.0+0x60>
 800591c:	782a      	ldrb	r2, [r5, #0]
 800591e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005922:	2a58      	cmp	r2, #88	@ 0x58
 8005924:	d108      	bne.n	8005938 <_strtol_l.isra.0+0x60>
 8005926:	786c      	ldrb	r4, [r5, #1]
 8005928:	3502      	adds	r5, #2
 800592a:	2310      	movs	r3, #16
 800592c:	e00a      	b.n	8005944 <_strtol_l.isra.0+0x6c>
 800592e:	2c2b      	cmp	r4, #43	@ 0x2b
 8005930:	bf04      	itt	eq
 8005932:	782c      	ldrbeq	r4, [r5, #0]
 8005934:	1c95      	addeq	r5, r2, #2
 8005936:	e7ec      	b.n	8005912 <_strtol_l.isra.0+0x3a>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f6      	bne.n	800592a <_strtol_l.isra.0+0x52>
 800593c:	2c30      	cmp	r4, #48	@ 0x30
 800593e:	bf14      	ite	ne
 8005940:	230a      	movne	r3, #10
 8005942:	2308      	moveq	r3, #8
 8005944:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005948:	f10c 3cff 	add.w	ip, ip, #4294967295
 800594c:	2200      	movs	r2, #0
 800594e:	fbbc f9f3 	udiv	r9, ip, r3
 8005952:	4610      	mov	r0, r2
 8005954:	fb03 ca19 	mls	sl, r3, r9, ip
 8005958:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800595c:	2f09      	cmp	r7, #9
 800595e:	d80f      	bhi.n	8005980 <_strtol_l.isra.0+0xa8>
 8005960:	463c      	mov	r4, r7
 8005962:	42a3      	cmp	r3, r4
 8005964:	dd1b      	ble.n	800599e <_strtol_l.isra.0+0xc6>
 8005966:	1c57      	adds	r7, r2, #1
 8005968:	d007      	beq.n	800597a <_strtol_l.isra.0+0xa2>
 800596a:	4581      	cmp	r9, r0
 800596c:	d314      	bcc.n	8005998 <_strtol_l.isra.0+0xc0>
 800596e:	d101      	bne.n	8005974 <_strtol_l.isra.0+0x9c>
 8005970:	45a2      	cmp	sl, r4
 8005972:	db11      	blt.n	8005998 <_strtol_l.isra.0+0xc0>
 8005974:	fb00 4003 	mla	r0, r0, r3, r4
 8005978:	2201      	movs	r2, #1
 800597a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800597e:	e7eb      	b.n	8005958 <_strtol_l.isra.0+0x80>
 8005980:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005984:	2f19      	cmp	r7, #25
 8005986:	d801      	bhi.n	800598c <_strtol_l.isra.0+0xb4>
 8005988:	3c37      	subs	r4, #55	@ 0x37
 800598a:	e7ea      	b.n	8005962 <_strtol_l.isra.0+0x8a>
 800598c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005990:	2f19      	cmp	r7, #25
 8005992:	d804      	bhi.n	800599e <_strtol_l.isra.0+0xc6>
 8005994:	3c57      	subs	r4, #87	@ 0x57
 8005996:	e7e4      	b.n	8005962 <_strtol_l.isra.0+0x8a>
 8005998:	f04f 32ff 	mov.w	r2, #4294967295
 800599c:	e7ed      	b.n	800597a <_strtol_l.isra.0+0xa2>
 800599e:	1c53      	adds	r3, r2, #1
 80059a0:	d108      	bne.n	80059b4 <_strtol_l.isra.0+0xdc>
 80059a2:	2322      	movs	r3, #34	@ 0x22
 80059a4:	f8ce 3000 	str.w	r3, [lr]
 80059a8:	4660      	mov	r0, ip
 80059aa:	f1b8 0f00 	cmp.w	r8, #0
 80059ae:	d0a0      	beq.n	80058f2 <_strtol_l.isra.0+0x1a>
 80059b0:	1e69      	subs	r1, r5, #1
 80059b2:	e006      	b.n	80059c2 <_strtol_l.isra.0+0xea>
 80059b4:	b106      	cbz	r6, 80059b8 <_strtol_l.isra.0+0xe0>
 80059b6:	4240      	negs	r0, r0
 80059b8:	f1b8 0f00 	cmp.w	r8, #0
 80059bc:	d099      	beq.n	80058f2 <_strtol_l.isra.0+0x1a>
 80059be:	2a00      	cmp	r2, #0
 80059c0:	d1f6      	bne.n	80059b0 <_strtol_l.isra.0+0xd8>
 80059c2:	f8c8 1000 	str.w	r1, [r8]
 80059c6:	e794      	b.n	80058f2 <_strtol_l.isra.0+0x1a>
 80059c8:	08007191 	.word	0x08007191

080059cc <strtol>:
 80059cc:	4613      	mov	r3, r2
 80059ce:	460a      	mov	r2, r1
 80059d0:	4601      	mov	r1, r0
 80059d2:	4802      	ldr	r0, [pc, #8]	@ (80059dc <strtol+0x10>)
 80059d4:	6800      	ldr	r0, [r0, #0]
 80059d6:	f7ff bf7f 	b.w	80058d8 <_strtol_l.isra.0>
 80059da:	bf00      	nop
 80059dc:	20000028 	.word	0x20000028

080059e0 <std>:
 80059e0:	2300      	movs	r3, #0
 80059e2:	b510      	push	{r4, lr}
 80059e4:	4604      	mov	r4, r0
 80059e6:	e9c0 3300 	strd	r3, r3, [r0]
 80059ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059ee:	6083      	str	r3, [r0, #8]
 80059f0:	8181      	strh	r1, [r0, #12]
 80059f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80059f4:	81c2      	strh	r2, [r0, #14]
 80059f6:	6183      	str	r3, [r0, #24]
 80059f8:	4619      	mov	r1, r3
 80059fa:	2208      	movs	r2, #8
 80059fc:	305c      	adds	r0, #92	@ 0x5c
 80059fe:	f000 fa2f 	bl	8005e60 <memset>
 8005a02:	4b0d      	ldr	r3, [pc, #52]	@ (8005a38 <std+0x58>)
 8005a04:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a06:	4b0d      	ldr	r3, [pc, #52]	@ (8005a3c <std+0x5c>)
 8005a08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a40 <std+0x60>)
 8005a0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a44 <std+0x64>)
 8005a10:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a12:	4b0d      	ldr	r3, [pc, #52]	@ (8005a48 <std+0x68>)
 8005a14:	6224      	str	r4, [r4, #32]
 8005a16:	429c      	cmp	r4, r3
 8005a18:	d006      	beq.n	8005a28 <std+0x48>
 8005a1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a1e:	4294      	cmp	r4, r2
 8005a20:	d002      	beq.n	8005a28 <std+0x48>
 8005a22:	33d0      	adds	r3, #208	@ 0xd0
 8005a24:	429c      	cmp	r4, r3
 8005a26:	d105      	bne.n	8005a34 <std+0x54>
 8005a28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a30:	f000 baec 	b.w	800600c <__retarget_lock_init_recursive>
 8005a34:	bd10      	pop	{r4, pc}
 8005a36:	bf00      	nop
 8005a38:	08005cb1 	.word	0x08005cb1
 8005a3c:	08005cd3 	.word	0x08005cd3
 8005a40:	08005d0b 	.word	0x08005d0b
 8005a44:	08005d2f 	.word	0x08005d2f
 8005a48:	20004530 	.word	0x20004530

08005a4c <stdio_exit_handler>:
 8005a4c:	4a02      	ldr	r2, [pc, #8]	@ (8005a58 <stdio_exit_handler+0xc>)
 8005a4e:	4903      	ldr	r1, [pc, #12]	@ (8005a5c <stdio_exit_handler+0x10>)
 8005a50:	4803      	ldr	r0, [pc, #12]	@ (8005a60 <stdio_exit_handler+0x14>)
 8005a52:	f000 b869 	b.w	8005b28 <_fwalk_sglue>
 8005a56:	bf00      	nop
 8005a58:	2000001c 	.word	0x2000001c
 8005a5c:	08006b75 	.word	0x08006b75
 8005a60:	2000002c 	.word	0x2000002c

08005a64 <cleanup_stdio>:
 8005a64:	6841      	ldr	r1, [r0, #4]
 8005a66:	4b0c      	ldr	r3, [pc, #48]	@ (8005a98 <cleanup_stdio+0x34>)
 8005a68:	4299      	cmp	r1, r3
 8005a6a:	b510      	push	{r4, lr}
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	d001      	beq.n	8005a74 <cleanup_stdio+0x10>
 8005a70:	f001 f880 	bl	8006b74 <_fflush_r>
 8005a74:	68a1      	ldr	r1, [r4, #8]
 8005a76:	4b09      	ldr	r3, [pc, #36]	@ (8005a9c <cleanup_stdio+0x38>)
 8005a78:	4299      	cmp	r1, r3
 8005a7a:	d002      	beq.n	8005a82 <cleanup_stdio+0x1e>
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f001 f879 	bl	8006b74 <_fflush_r>
 8005a82:	68e1      	ldr	r1, [r4, #12]
 8005a84:	4b06      	ldr	r3, [pc, #24]	@ (8005aa0 <cleanup_stdio+0x3c>)
 8005a86:	4299      	cmp	r1, r3
 8005a88:	d004      	beq.n	8005a94 <cleanup_stdio+0x30>
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a90:	f001 b870 	b.w	8006b74 <_fflush_r>
 8005a94:	bd10      	pop	{r4, pc}
 8005a96:	bf00      	nop
 8005a98:	20004530 	.word	0x20004530
 8005a9c:	20004598 	.word	0x20004598
 8005aa0:	20004600 	.word	0x20004600

08005aa4 <global_stdio_init.part.0>:
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <global_stdio_init.part.0+0x30>)
 8005aa8:	4c0b      	ldr	r4, [pc, #44]	@ (8005ad8 <global_stdio_init.part.0+0x34>)
 8005aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8005adc <global_stdio_init.part.0+0x38>)
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	4620      	mov	r0, r4
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2104      	movs	r1, #4
 8005ab4:	f7ff ff94 	bl	80059e0 <std>
 8005ab8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005abc:	2201      	movs	r2, #1
 8005abe:	2109      	movs	r1, #9
 8005ac0:	f7ff ff8e 	bl	80059e0 <std>
 8005ac4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ac8:	2202      	movs	r2, #2
 8005aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ace:	2112      	movs	r1, #18
 8005ad0:	f7ff bf86 	b.w	80059e0 <std>
 8005ad4:	20004668 	.word	0x20004668
 8005ad8:	20004530 	.word	0x20004530
 8005adc:	08005a4d 	.word	0x08005a4d

08005ae0 <__sfp_lock_acquire>:
 8005ae0:	4801      	ldr	r0, [pc, #4]	@ (8005ae8 <__sfp_lock_acquire+0x8>)
 8005ae2:	f000 ba94 	b.w	800600e <__retarget_lock_acquire_recursive>
 8005ae6:	bf00      	nop
 8005ae8:	20004671 	.word	0x20004671

08005aec <__sfp_lock_release>:
 8005aec:	4801      	ldr	r0, [pc, #4]	@ (8005af4 <__sfp_lock_release+0x8>)
 8005aee:	f000 ba8f 	b.w	8006010 <__retarget_lock_release_recursive>
 8005af2:	bf00      	nop
 8005af4:	20004671 	.word	0x20004671

08005af8 <__sinit>:
 8005af8:	b510      	push	{r4, lr}
 8005afa:	4604      	mov	r4, r0
 8005afc:	f7ff fff0 	bl	8005ae0 <__sfp_lock_acquire>
 8005b00:	6a23      	ldr	r3, [r4, #32]
 8005b02:	b11b      	cbz	r3, 8005b0c <__sinit+0x14>
 8005b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b08:	f7ff bff0 	b.w	8005aec <__sfp_lock_release>
 8005b0c:	4b04      	ldr	r3, [pc, #16]	@ (8005b20 <__sinit+0x28>)
 8005b0e:	6223      	str	r3, [r4, #32]
 8005b10:	4b04      	ldr	r3, [pc, #16]	@ (8005b24 <__sinit+0x2c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1f5      	bne.n	8005b04 <__sinit+0xc>
 8005b18:	f7ff ffc4 	bl	8005aa4 <global_stdio_init.part.0>
 8005b1c:	e7f2      	b.n	8005b04 <__sinit+0xc>
 8005b1e:	bf00      	nop
 8005b20:	08005a65 	.word	0x08005a65
 8005b24:	20004668 	.word	0x20004668

08005b28 <_fwalk_sglue>:
 8005b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	4688      	mov	r8, r1
 8005b30:	4614      	mov	r4, r2
 8005b32:	2600      	movs	r6, #0
 8005b34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b38:	f1b9 0901 	subs.w	r9, r9, #1
 8005b3c:	d505      	bpl.n	8005b4a <_fwalk_sglue+0x22>
 8005b3e:	6824      	ldr	r4, [r4, #0]
 8005b40:	2c00      	cmp	r4, #0
 8005b42:	d1f7      	bne.n	8005b34 <_fwalk_sglue+0xc>
 8005b44:	4630      	mov	r0, r6
 8005b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b4a:	89ab      	ldrh	r3, [r5, #12]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d907      	bls.n	8005b60 <_fwalk_sglue+0x38>
 8005b50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b54:	3301      	adds	r3, #1
 8005b56:	d003      	beq.n	8005b60 <_fwalk_sglue+0x38>
 8005b58:	4629      	mov	r1, r5
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	47c0      	blx	r8
 8005b5e:	4306      	orrs	r6, r0
 8005b60:	3568      	adds	r5, #104	@ 0x68
 8005b62:	e7e9      	b.n	8005b38 <_fwalk_sglue+0x10>

08005b64 <iprintf>:
 8005b64:	b40f      	push	{r0, r1, r2, r3}
 8005b66:	b507      	push	{r0, r1, r2, lr}
 8005b68:	4906      	ldr	r1, [pc, #24]	@ (8005b84 <iprintf+0x20>)
 8005b6a:	ab04      	add	r3, sp, #16
 8005b6c:	6808      	ldr	r0, [r1, #0]
 8005b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b72:	6881      	ldr	r1, [r0, #8]
 8005b74:	9301      	str	r3, [sp, #4]
 8005b76:	f000 fcd5 	bl	8006524 <_vfiprintf_r>
 8005b7a:	b003      	add	sp, #12
 8005b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b80:	b004      	add	sp, #16
 8005b82:	4770      	bx	lr
 8005b84:	20000028 	.word	0x20000028

08005b88 <_puts_r>:
 8005b88:	6a03      	ldr	r3, [r0, #32]
 8005b8a:	b570      	push	{r4, r5, r6, lr}
 8005b8c:	6884      	ldr	r4, [r0, #8]
 8005b8e:	4605      	mov	r5, r0
 8005b90:	460e      	mov	r6, r1
 8005b92:	b90b      	cbnz	r3, 8005b98 <_puts_r+0x10>
 8005b94:	f7ff ffb0 	bl	8005af8 <__sinit>
 8005b98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b9a:	07db      	lsls	r3, r3, #31
 8005b9c:	d405      	bmi.n	8005baa <_puts_r+0x22>
 8005b9e:	89a3      	ldrh	r3, [r4, #12]
 8005ba0:	0598      	lsls	r0, r3, #22
 8005ba2:	d402      	bmi.n	8005baa <_puts_r+0x22>
 8005ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ba6:	f000 fa32 	bl	800600e <__retarget_lock_acquire_recursive>
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	0719      	lsls	r1, r3, #28
 8005bae:	d502      	bpl.n	8005bb6 <_puts_r+0x2e>
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d135      	bne.n	8005c22 <_puts_r+0x9a>
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f000 f8fb 	bl	8005db4 <__swsetup_r>
 8005bbe:	b380      	cbz	r0, 8005c22 <_puts_r+0x9a>
 8005bc0:	f04f 35ff 	mov.w	r5, #4294967295
 8005bc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bc6:	07da      	lsls	r2, r3, #31
 8005bc8:	d405      	bmi.n	8005bd6 <_puts_r+0x4e>
 8005bca:	89a3      	ldrh	r3, [r4, #12]
 8005bcc:	059b      	lsls	r3, r3, #22
 8005bce:	d402      	bmi.n	8005bd6 <_puts_r+0x4e>
 8005bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bd2:	f000 fa1d 	bl	8006010 <__retarget_lock_release_recursive>
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	bd70      	pop	{r4, r5, r6, pc}
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	da04      	bge.n	8005be8 <_puts_r+0x60>
 8005bde:	69a2      	ldr	r2, [r4, #24]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	dc17      	bgt.n	8005c14 <_puts_r+0x8c>
 8005be4:	290a      	cmp	r1, #10
 8005be6:	d015      	beq.n	8005c14 <_puts_r+0x8c>
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	6022      	str	r2, [r4, #0]
 8005bee:	7019      	strb	r1, [r3, #0]
 8005bf0:	68a3      	ldr	r3, [r4, #8]
 8005bf2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	60a3      	str	r3, [r4, #8]
 8005bfa:	2900      	cmp	r1, #0
 8005bfc:	d1ed      	bne.n	8005bda <_puts_r+0x52>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	da11      	bge.n	8005c26 <_puts_r+0x9e>
 8005c02:	4622      	mov	r2, r4
 8005c04:	210a      	movs	r1, #10
 8005c06:	4628      	mov	r0, r5
 8005c08:	f000 f895 	bl	8005d36 <__swbuf_r>
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d0d7      	beq.n	8005bc0 <_puts_r+0x38>
 8005c10:	250a      	movs	r5, #10
 8005c12:	e7d7      	b.n	8005bc4 <_puts_r+0x3c>
 8005c14:	4622      	mov	r2, r4
 8005c16:	4628      	mov	r0, r5
 8005c18:	f000 f88d 	bl	8005d36 <__swbuf_r>
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d1e7      	bne.n	8005bf0 <_puts_r+0x68>
 8005c20:	e7ce      	b.n	8005bc0 <_puts_r+0x38>
 8005c22:	3e01      	subs	r6, #1
 8005c24:	e7e4      	b.n	8005bf0 <_puts_r+0x68>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	6022      	str	r2, [r4, #0]
 8005c2c:	220a      	movs	r2, #10
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	e7ee      	b.n	8005c10 <_puts_r+0x88>
	...

08005c34 <puts>:
 8005c34:	4b02      	ldr	r3, [pc, #8]	@ (8005c40 <puts+0xc>)
 8005c36:	4601      	mov	r1, r0
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	f7ff bfa5 	b.w	8005b88 <_puts_r>
 8005c3e:	bf00      	nop
 8005c40:	20000028 	.word	0x20000028

08005c44 <sniprintf>:
 8005c44:	b40c      	push	{r2, r3}
 8005c46:	b530      	push	{r4, r5, lr}
 8005c48:	4b18      	ldr	r3, [pc, #96]	@ (8005cac <sniprintf+0x68>)
 8005c4a:	1e0c      	subs	r4, r1, #0
 8005c4c:	681d      	ldr	r5, [r3, #0]
 8005c4e:	b09d      	sub	sp, #116	@ 0x74
 8005c50:	da08      	bge.n	8005c64 <sniprintf+0x20>
 8005c52:	238b      	movs	r3, #139	@ 0x8b
 8005c54:	602b      	str	r3, [r5, #0]
 8005c56:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5a:	b01d      	add	sp, #116	@ 0x74
 8005c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c60:	b002      	add	sp, #8
 8005c62:	4770      	bx	lr
 8005c64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005c68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005c72:	bf14      	ite	ne
 8005c74:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005c78:	4623      	moveq	r3, r4
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	9307      	str	r3, [sp, #28]
 8005c7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c82:	9002      	str	r0, [sp, #8]
 8005c84:	9006      	str	r0, [sp, #24]
 8005c86:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005c8c:	ab21      	add	r3, sp, #132	@ 0x84
 8005c8e:	a902      	add	r1, sp, #8
 8005c90:	4628      	mov	r0, r5
 8005c92:	9301      	str	r3, [sp, #4]
 8005c94:	f000 fb20 	bl	80062d8 <_svfiprintf_r>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	bfbc      	itt	lt
 8005c9c:	238b      	movlt	r3, #139	@ 0x8b
 8005c9e:	602b      	strlt	r3, [r5, #0]
 8005ca0:	2c00      	cmp	r4, #0
 8005ca2:	d0da      	beq.n	8005c5a <sniprintf+0x16>
 8005ca4:	9b02      	ldr	r3, [sp, #8]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	e7d6      	b.n	8005c5a <sniprintf+0x16>
 8005cac:	20000028 	.word	0x20000028

08005cb0 <__sread>:
 8005cb0:	b510      	push	{r4, lr}
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb8:	f000 f95a 	bl	8005f70 <_read_r>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	bfab      	itete	ge
 8005cc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8005cc4:	181b      	addge	r3, r3, r0
 8005cc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005cca:	bfac      	ite	ge
 8005ccc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005cce:	81a3      	strhlt	r3, [r4, #12]
 8005cd0:	bd10      	pop	{r4, pc}

08005cd2 <__swrite>:
 8005cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd6:	461f      	mov	r7, r3
 8005cd8:	898b      	ldrh	r3, [r1, #12]
 8005cda:	05db      	lsls	r3, r3, #23
 8005cdc:	4605      	mov	r5, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	4616      	mov	r6, r2
 8005ce2:	d505      	bpl.n	8005cf0 <__swrite+0x1e>
 8005ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce8:	2302      	movs	r3, #2
 8005cea:	2200      	movs	r2, #0
 8005cec:	f000 f92e 	bl	8005f4c <_lseek_r>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cfa:	81a3      	strh	r3, [r4, #12]
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	463b      	mov	r3, r7
 8005d00:	4628      	mov	r0, r5
 8005d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d06:	f000 b945 	b.w	8005f94 <_write_r>

08005d0a <__sseek>:
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d12:	f000 f91b 	bl	8005f4c <_lseek_r>
 8005d16:	1c43      	adds	r3, r0, #1
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	bf15      	itete	ne
 8005d1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d26:	81a3      	strheq	r3, [r4, #12]
 8005d28:	bf18      	it	ne
 8005d2a:	81a3      	strhne	r3, [r4, #12]
 8005d2c:	bd10      	pop	{r4, pc}

08005d2e <__sclose>:
 8005d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d32:	f000 b89d 	b.w	8005e70 <_close_r>

08005d36 <__swbuf_r>:
 8005d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d38:	460e      	mov	r6, r1
 8005d3a:	4614      	mov	r4, r2
 8005d3c:	4605      	mov	r5, r0
 8005d3e:	b118      	cbz	r0, 8005d48 <__swbuf_r+0x12>
 8005d40:	6a03      	ldr	r3, [r0, #32]
 8005d42:	b90b      	cbnz	r3, 8005d48 <__swbuf_r+0x12>
 8005d44:	f7ff fed8 	bl	8005af8 <__sinit>
 8005d48:	69a3      	ldr	r3, [r4, #24]
 8005d4a:	60a3      	str	r3, [r4, #8]
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	071a      	lsls	r2, r3, #28
 8005d50:	d501      	bpl.n	8005d56 <__swbuf_r+0x20>
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	b943      	cbnz	r3, 8005d68 <__swbuf_r+0x32>
 8005d56:	4621      	mov	r1, r4
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f000 f82b 	bl	8005db4 <__swsetup_r>
 8005d5e:	b118      	cbz	r0, 8005d68 <__swbuf_r+0x32>
 8005d60:	f04f 37ff 	mov.w	r7, #4294967295
 8005d64:	4638      	mov	r0, r7
 8005d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	6922      	ldr	r2, [r4, #16]
 8005d6c:	1a98      	subs	r0, r3, r2
 8005d6e:	6963      	ldr	r3, [r4, #20]
 8005d70:	b2f6      	uxtb	r6, r6
 8005d72:	4283      	cmp	r3, r0
 8005d74:	4637      	mov	r7, r6
 8005d76:	dc05      	bgt.n	8005d84 <__swbuf_r+0x4e>
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f000 fefa 	bl	8006b74 <_fflush_r>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d1ed      	bne.n	8005d60 <__swbuf_r+0x2a>
 8005d84:	68a3      	ldr	r3, [r4, #8]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	60a3      	str	r3, [r4, #8]
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	6022      	str	r2, [r4, #0]
 8005d90:	701e      	strb	r6, [r3, #0]
 8005d92:	6962      	ldr	r2, [r4, #20]
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d004      	beq.n	8005da4 <__swbuf_r+0x6e>
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	07db      	lsls	r3, r3, #31
 8005d9e:	d5e1      	bpl.n	8005d64 <__swbuf_r+0x2e>
 8005da0:	2e0a      	cmp	r6, #10
 8005da2:	d1df      	bne.n	8005d64 <__swbuf_r+0x2e>
 8005da4:	4621      	mov	r1, r4
 8005da6:	4628      	mov	r0, r5
 8005da8:	f000 fee4 	bl	8006b74 <_fflush_r>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d0d9      	beq.n	8005d64 <__swbuf_r+0x2e>
 8005db0:	e7d6      	b.n	8005d60 <__swbuf_r+0x2a>
	...

08005db4 <__swsetup_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4b29      	ldr	r3, [pc, #164]	@ (8005e5c <__swsetup_r+0xa8>)
 8005db8:	4605      	mov	r5, r0
 8005dba:	6818      	ldr	r0, [r3, #0]
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	b118      	cbz	r0, 8005dc8 <__swsetup_r+0x14>
 8005dc0:	6a03      	ldr	r3, [r0, #32]
 8005dc2:	b90b      	cbnz	r3, 8005dc8 <__swsetup_r+0x14>
 8005dc4:	f7ff fe98 	bl	8005af8 <__sinit>
 8005dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dcc:	0719      	lsls	r1, r3, #28
 8005dce:	d422      	bmi.n	8005e16 <__swsetup_r+0x62>
 8005dd0:	06da      	lsls	r2, r3, #27
 8005dd2:	d407      	bmi.n	8005de4 <__swsetup_r+0x30>
 8005dd4:	2209      	movs	r2, #9
 8005dd6:	602a      	str	r2, [r5, #0]
 8005dd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ddc:	81a3      	strh	r3, [r4, #12]
 8005dde:	f04f 30ff 	mov.w	r0, #4294967295
 8005de2:	e033      	b.n	8005e4c <__swsetup_r+0x98>
 8005de4:	0758      	lsls	r0, r3, #29
 8005de6:	d512      	bpl.n	8005e0e <__swsetup_r+0x5a>
 8005de8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005dea:	b141      	cbz	r1, 8005dfe <__swsetup_r+0x4a>
 8005dec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005df0:	4299      	cmp	r1, r3
 8005df2:	d002      	beq.n	8005dfa <__swsetup_r+0x46>
 8005df4:	4628      	mov	r0, r5
 8005df6:	f000 f91b 	bl	8006030 <_free_r>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005dfe:	89a3      	ldrh	r3, [r4, #12]
 8005e00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e04:	81a3      	strh	r3, [r4, #12]
 8005e06:	2300      	movs	r3, #0
 8005e08:	6063      	str	r3, [r4, #4]
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	89a3      	ldrh	r3, [r4, #12]
 8005e10:	f043 0308 	orr.w	r3, r3, #8
 8005e14:	81a3      	strh	r3, [r4, #12]
 8005e16:	6923      	ldr	r3, [r4, #16]
 8005e18:	b94b      	cbnz	r3, 8005e2e <__swsetup_r+0x7a>
 8005e1a:	89a3      	ldrh	r3, [r4, #12]
 8005e1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e24:	d003      	beq.n	8005e2e <__swsetup_r+0x7a>
 8005e26:	4621      	mov	r1, r4
 8005e28:	4628      	mov	r0, r5
 8005e2a:	f000 fef1 	bl	8006c10 <__smakebuf_r>
 8005e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e32:	f013 0201 	ands.w	r2, r3, #1
 8005e36:	d00a      	beq.n	8005e4e <__swsetup_r+0x9a>
 8005e38:	2200      	movs	r2, #0
 8005e3a:	60a2      	str	r2, [r4, #8]
 8005e3c:	6962      	ldr	r2, [r4, #20]
 8005e3e:	4252      	negs	r2, r2
 8005e40:	61a2      	str	r2, [r4, #24]
 8005e42:	6922      	ldr	r2, [r4, #16]
 8005e44:	b942      	cbnz	r2, 8005e58 <__swsetup_r+0xa4>
 8005e46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e4a:	d1c5      	bne.n	8005dd8 <__swsetup_r+0x24>
 8005e4c:	bd38      	pop	{r3, r4, r5, pc}
 8005e4e:	0799      	lsls	r1, r3, #30
 8005e50:	bf58      	it	pl
 8005e52:	6962      	ldrpl	r2, [r4, #20]
 8005e54:	60a2      	str	r2, [r4, #8]
 8005e56:	e7f4      	b.n	8005e42 <__swsetup_r+0x8e>
 8005e58:	2000      	movs	r0, #0
 8005e5a:	e7f7      	b.n	8005e4c <__swsetup_r+0x98>
 8005e5c:	20000028 	.word	0x20000028

08005e60 <memset>:
 8005e60:	4402      	add	r2, r0
 8005e62:	4603      	mov	r3, r0
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d100      	bne.n	8005e6a <memset+0xa>
 8005e68:	4770      	bx	lr
 8005e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e6e:	e7f9      	b.n	8005e64 <memset+0x4>

08005e70 <_close_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	4d06      	ldr	r5, [pc, #24]	@ (8005e8c <_close_r+0x1c>)
 8005e74:	2300      	movs	r3, #0
 8005e76:	4604      	mov	r4, r0
 8005e78:	4608      	mov	r0, r1
 8005e7a:	602b      	str	r3, [r5, #0]
 8005e7c:	f7fb f905 	bl	800108a <_close>
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	d102      	bne.n	8005e8a <_close_r+0x1a>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	b103      	cbz	r3, 8005e8a <_close_r+0x1a>
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	2000466c 	.word	0x2000466c

08005e90 <_reclaim_reent>:
 8005e90:	4b2d      	ldr	r3, [pc, #180]	@ (8005f48 <_reclaim_reent+0xb8>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4283      	cmp	r3, r0
 8005e96:	b570      	push	{r4, r5, r6, lr}
 8005e98:	4604      	mov	r4, r0
 8005e9a:	d053      	beq.n	8005f44 <_reclaim_reent+0xb4>
 8005e9c:	69c3      	ldr	r3, [r0, #28]
 8005e9e:	b31b      	cbz	r3, 8005ee8 <_reclaim_reent+0x58>
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	b163      	cbz	r3, 8005ebe <_reclaim_reent+0x2e>
 8005ea4:	2500      	movs	r5, #0
 8005ea6:	69e3      	ldr	r3, [r4, #28]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	5959      	ldr	r1, [r3, r5]
 8005eac:	b9b1      	cbnz	r1, 8005edc <_reclaim_reent+0x4c>
 8005eae:	3504      	adds	r5, #4
 8005eb0:	2d80      	cmp	r5, #128	@ 0x80
 8005eb2:	d1f8      	bne.n	8005ea6 <_reclaim_reent+0x16>
 8005eb4:	69e3      	ldr	r3, [r4, #28]
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	68d9      	ldr	r1, [r3, #12]
 8005eba:	f000 f8b9 	bl	8006030 <_free_r>
 8005ebe:	69e3      	ldr	r3, [r4, #28]
 8005ec0:	6819      	ldr	r1, [r3, #0]
 8005ec2:	b111      	cbz	r1, 8005eca <_reclaim_reent+0x3a>
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f000 f8b3 	bl	8006030 <_free_r>
 8005eca:	69e3      	ldr	r3, [r4, #28]
 8005ecc:	689d      	ldr	r5, [r3, #8]
 8005ece:	b15d      	cbz	r5, 8005ee8 <_reclaim_reent+0x58>
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	682d      	ldr	r5, [r5, #0]
 8005ed6:	f000 f8ab 	bl	8006030 <_free_r>
 8005eda:	e7f8      	b.n	8005ece <_reclaim_reent+0x3e>
 8005edc:	680e      	ldr	r6, [r1, #0]
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 f8a6 	bl	8006030 <_free_r>
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	e7e1      	b.n	8005eac <_reclaim_reent+0x1c>
 8005ee8:	6961      	ldr	r1, [r4, #20]
 8005eea:	b111      	cbz	r1, 8005ef2 <_reclaim_reent+0x62>
 8005eec:	4620      	mov	r0, r4
 8005eee:	f000 f89f 	bl	8006030 <_free_r>
 8005ef2:	69e1      	ldr	r1, [r4, #28]
 8005ef4:	b111      	cbz	r1, 8005efc <_reclaim_reent+0x6c>
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f000 f89a 	bl	8006030 <_free_r>
 8005efc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005efe:	b111      	cbz	r1, 8005f06 <_reclaim_reent+0x76>
 8005f00:	4620      	mov	r0, r4
 8005f02:	f000 f895 	bl	8006030 <_free_r>
 8005f06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f08:	b111      	cbz	r1, 8005f10 <_reclaim_reent+0x80>
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f000 f890 	bl	8006030 <_free_r>
 8005f10:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005f12:	b111      	cbz	r1, 8005f1a <_reclaim_reent+0x8a>
 8005f14:	4620      	mov	r0, r4
 8005f16:	f000 f88b 	bl	8006030 <_free_r>
 8005f1a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005f1c:	b111      	cbz	r1, 8005f24 <_reclaim_reent+0x94>
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f000 f886 	bl	8006030 <_free_r>
 8005f24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005f26:	b111      	cbz	r1, 8005f2e <_reclaim_reent+0x9e>
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f000 f881 	bl	8006030 <_free_r>
 8005f2e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005f30:	b111      	cbz	r1, 8005f38 <_reclaim_reent+0xa8>
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 f87c 	bl	8006030 <_free_r>
 8005f38:	6a23      	ldr	r3, [r4, #32]
 8005f3a:	b11b      	cbz	r3, 8005f44 <_reclaim_reent+0xb4>
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f42:	4718      	bx	r3
 8005f44:	bd70      	pop	{r4, r5, r6, pc}
 8005f46:	bf00      	nop
 8005f48:	20000028 	.word	0x20000028

08005f4c <_lseek_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4d07      	ldr	r5, [pc, #28]	@ (8005f6c <_lseek_r+0x20>)
 8005f50:	4604      	mov	r4, r0
 8005f52:	4608      	mov	r0, r1
 8005f54:	4611      	mov	r1, r2
 8005f56:	2200      	movs	r2, #0
 8005f58:	602a      	str	r2, [r5, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f7fb f8bc 	bl	80010d8 <_lseek>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_lseek_r+0x1e>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_lseek_r+0x1e>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	2000466c 	.word	0x2000466c

08005f70 <_read_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4d07      	ldr	r5, [pc, #28]	@ (8005f90 <_read_r+0x20>)
 8005f74:	4604      	mov	r4, r0
 8005f76:	4608      	mov	r0, r1
 8005f78:	4611      	mov	r1, r2
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	602a      	str	r2, [r5, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f7fb f84a 	bl	8001018 <_read>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d102      	bne.n	8005f8e <_read_r+0x1e>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	b103      	cbz	r3, 8005f8e <_read_r+0x1e>
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	2000466c 	.word	0x2000466c

08005f94 <_write_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4d07      	ldr	r5, [pc, #28]	@ (8005fb4 <_write_r+0x20>)
 8005f98:	4604      	mov	r4, r0
 8005f9a:	4608      	mov	r0, r1
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	602a      	str	r2, [r5, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f7fb f855 	bl	8001052 <_write>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_write_r+0x1e>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_write_r+0x1e>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	2000466c 	.word	0x2000466c

08005fb8 <__errno>:
 8005fb8:	4b01      	ldr	r3, [pc, #4]	@ (8005fc0 <__errno+0x8>)
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	20000028 	.word	0x20000028

08005fc4 <__libc_init_array>:
 8005fc4:	b570      	push	{r4, r5, r6, lr}
 8005fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8005ffc <__libc_init_array+0x38>)
 8005fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8006000 <__libc_init_array+0x3c>)
 8005fca:	1b64      	subs	r4, r4, r5
 8005fcc:	10a4      	asrs	r4, r4, #2
 8005fce:	2600      	movs	r6, #0
 8005fd0:	42a6      	cmp	r6, r4
 8005fd2:	d109      	bne.n	8005fe8 <__libc_init_array+0x24>
 8005fd4:	4d0b      	ldr	r5, [pc, #44]	@ (8006004 <__libc_init_array+0x40>)
 8005fd6:	4c0c      	ldr	r4, [pc, #48]	@ (8006008 <__libc_init_array+0x44>)
 8005fd8:	f000 fed8 	bl	8006d8c <_init>
 8005fdc:	1b64      	subs	r4, r4, r5
 8005fde:	10a4      	asrs	r4, r4, #2
 8005fe0:	2600      	movs	r6, #0
 8005fe2:	42a6      	cmp	r6, r4
 8005fe4:	d105      	bne.n	8005ff2 <__libc_init_array+0x2e>
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}
 8005fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fec:	4798      	blx	r3
 8005fee:	3601      	adds	r6, #1
 8005ff0:	e7ee      	b.n	8005fd0 <__libc_init_array+0xc>
 8005ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ff6:	4798      	blx	r3
 8005ff8:	3601      	adds	r6, #1
 8005ffa:	e7f2      	b.n	8005fe2 <__libc_init_array+0x1e>
 8005ffc:	080072cc 	.word	0x080072cc
 8006000:	080072cc 	.word	0x080072cc
 8006004:	080072cc 	.word	0x080072cc
 8006008:	080072d0 	.word	0x080072d0

0800600c <__retarget_lock_init_recursive>:
 800600c:	4770      	bx	lr

0800600e <__retarget_lock_acquire_recursive>:
 800600e:	4770      	bx	lr

08006010 <__retarget_lock_release_recursive>:
 8006010:	4770      	bx	lr

08006012 <memcpy>:
 8006012:	440a      	add	r2, r1
 8006014:	4291      	cmp	r1, r2
 8006016:	f100 33ff 	add.w	r3, r0, #4294967295
 800601a:	d100      	bne.n	800601e <memcpy+0xc>
 800601c:	4770      	bx	lr
 800601e:	b510      	push	{r4, lr}
 8006020:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006024:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006028:	4291      	cmp	r1, r2
 800602a:	d1f9      	bne.n	8006020 <memcpy+0xe>
 800602c:	bd10      	pop	{r4, pc}
	...

08006030 <_free_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4605      	mov	r5, r0
 8006034:	2900      	cmp	r1, #0
 8006036:	d041      	beq.n	80060bc <_free_r+0x8c>
 8006038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800603c:	1f0c      	subs	r4, r1, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	bfb8      	it	lt
 8006042:	18e4      	addlt	r4, r4, r3
 8006044:	f000 f8e0 	bl	8006208 <__malloc_lock>
 8006048:	4a1d      	ldr	r2, [pc, #116]	@ (80060c0 <_free_r+0x90>)
 800604a:	6813      	ldr	r3, [r2, #0]
 800604c:	b933      	cbnz	r3, 800605c <_free_r+0x2c>
 800604e:	6063      	str	r3, [r4, #4]
 8006050:	6014      	str	r4, [r2, #0]
 8006052:	4628      	mov	r0, r5
 8006054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006058:	f000 b8dc 	b.w	8006214 <__malloc_unlock>
 800605c:	42a3      	cmp	r3, r4
 800605e:	d908      	bls.n	8006072 <_free_r+0x42>
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	1821      	adds	r1, r4, r0
 8006064:	428b      	cmp	r3, r1
 8006066:	bf01      	itttt	eq
 8006068:	6819      	ldreq	r1, [r3, #0]
 800606a:	685b      	ldreq	r3, [r3, #4]
 800606c:	1809      	addeq	r1, r1, r0
 800606e:	6021      	streq	r1, [r4, #0]
 8006070:	e7ed      	b.n	800604e <_free_r+0x1e>
 8006072:	461a      	mov	r2, r3
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	b10b      	cbz	r3, 800607c <_free_r+0x4c>
 8006078:	42a3      	cmp	r3, r4
 800607a:	d9fa      	bls.n	8006072 <_free_r+0x42>
 800607c:	6811      	ldr	r1, [r2, #0]
 800607e:	1850      	adds	r0, r2, r1
 8006080:	42a0      	cmp	r0, r4
 8006082:	d10b      	bne.n	800609c <_free_r+0x6c>
 8006084:	6820      	ldr	r0, [r4, #0]
 8006086:	4401      	add	r1, r0
 8006088:	1850      	adds	r0, r2, r1
 800608a:	4283      	cmp	r3, r0
 800608c:	6011      	str	r1, [r2, #0]
 800608e:	d1e0      	bne.n	8006052 <_free_r+0x22>
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	6053      	str	r3, [r2, #4]
 8006096:	4408      	add	r0, r1
 8006098:	6010      	str	r0, [r2, #0]
 800609a:	e7da      	b.n	8006052 <_free_r+0x22>
 800609c:	d902      	bls.n	80060a4 <_free_r+0x74>
 800609e:	230c      	movs	r3, #12
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	e7d6      	b.n	8006052 <_free_r+0x22>
 80060a4:	6820      	ldr	r0, [r4, #0]
 80060a6:	1821      	adds	r1, r4, r0
 80060a8:	428b      	cmp	r3, r1
 80060aa:	bf04      	itt	eq
 80060ac:	6819      	ldreq	r1, [r3, #0]
 80060ae:	685b      	ldreq	r3, [r3, #4]
 80060b0:	6063      	str	r3, [r4, #4]
 80060b2:	bf04      	itt	eq
 80060b4:	1809      	addeq	r1, r1, r0
 80060b6:	6021      	streq	r1, [r4, #0]
 80060b8:	6054      	str	r4, [r2, #4]
 80060ba:	e7ca      	b.n	8006052 <_free_r+0x22>
 80060bc:	bd38      	pop	{r3, r4, r5, pc}
 80060be:	bf00      	nop
 80060c0:	20004678 	.word	0x20004678

080060c4 <sbrk_aligned>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	4e0f      	ldr	r6, [pc, #60]	@ (8006104 <sbrk_aligned+0x40>)
 80060c8:	460c      	mov	r4, r1
 80060ca:	6831      	ldr	r1, [r6, #0]
 80060cc:	4605      	mov	r5, r0
 80060ce:	b911      	cbnz	r1, 80060d6 <sbrk_aligned+0x12>
 80060d0:	f000 fe16 	bl	8006d00 <_sbrk_r>
 80060d4:	6030      	str	r0, [r6, #0]
 80060d6:	4621      	mov	r1, r4
 80060d8:	4628      	mov	r0, r5
 80060da:	f000 fe11 	bl	8006d00 <_sbrk_r>
 80060de:	1c43      	adds	r3, r0, #1
 80060e0:	d103      	bne.n	80060ea <sbrk_aligned+0x26>
 80060e2:	f04f 34ff 	mov.w	r4, #4294967295
 80060e6:	4620      	mov	r0, r4
 80060e8:	bd70      	pop	{r4, r5, r6, pc}
 80060ea:	1cc4      	adds	r4, r0, #3
 80060ec:	f024 0403 	bic.w	r4, r4, #3
 80060f0:	42a0      	cmp	r0, r4
 80060f2:	d0f8      	beq.n	80060e6 <sbrk_aligned+0x22>
 80060f4:	1a21      	subs	r1, r4, r0
 80060f6:	4628      	mov	r0, r5
 80060f8:	f000 fe02 	bl	8006d00 <_sbrk_r>
 80060fc:	3001      	adds	r0, #1
 80060fe:	d1f2      	bne.n	80060e6 <sbrk_aligned+0x22>
 8006100:	e7ef      	b.n	80060e2 <sbrk_aligned+0x1e>
 8006102:	bf00      	nop
 8006104:	20004674 	.word	0x20004674

08006108 <_malloc_r>:
 8006108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800610c:	1ccd      	adds	r5, r1, #3
 800610e:	f025 0503 	bic.w	r5, r5, #3
 8006112:	3508      	adds	r5, #8
 8006114:	2d0c      	cmp	r5, #12
 8006116:	bf38      	it	cc
 8006118:	250c      	movcc	r5, #12
 800611a:	2d00      	cmp	r5, #0
 800611c:	4606      	mov	r6, r0
 800611e:	db01      	blt.n	8006124 <_malloc_r+0x1c>
 8006120:	42a9      	cmp	r1, r5
 8006122:	d904      	bls.n	800612e <_malloc_r+0x26>
 8006124:	230c      	movs	r3, #12
 8006126:	6033      	str	r3, [r6, #0]
 8006128:	2000      	movs	r0, #0
 800612a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800612e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006204 <_malloc_r+0xfc>
 8006132:	f000 f869 	bl	8006208 <__malloc_lock>
 8006136:	f8d8 3000 	ldr.w	r3, [r8]
 800613a:	461c      	mov	r4, r3
 800613c:	bb44      	cbnz	r4, 8006190 <_malloc_r+0x88>
 800613e:	4629      	mov	r1, r5
 8006140:	4630      	mov	r0, r6
 8006142:	f7ff ffbf 	bl	80060c4 <sbrk_aligned>
 8006146:	1c43      	adds	r3, r0, #1
 8006148:	4604      	mov	r4, r0
 800614a:	d158      	bne.n	80061fe <_malloc_r+0xf6>
 800614c:	f8d8 4000 	ldr.w	r4, [r8]
 8006150:	4627      	mov	r7, r4
 8006152:	2f00      	cmp	r7, #0
 8006154:	d143      	bne.n	80061de <_malloc_r+0xd6>
 8006156:	2c00      	cmp	r4, #0
 8006158:	d04b      	beq.n	80061f2 <_malloc_r+0xea>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	4639      	mov	r1, r7
 800615e:	4630      	mov	r0, r6
 8006160:	eb04 0903 	add.w	r9, r4, r3
 8006164:	f000 fdcc 	bl	8006d00 <_sbrk_r>
 8006168:	4581      	cmp	r9, r0
 800616a:	d142      	bne.n	80061f2 <_malloc_r+0xea>
 800616c:	6821      	ldr	r1, [r4, #0]
 800616e:	1a6d      	subs	r5, r5, r1
 8006170:	4629      	mov	r1, r5
 8006172:	4630      	mov	r0, r6
 8006174:	f7ff ffa6 	bl	80060c4 <sbrk_aligned>
 8006178:	3001      	adds	r0, #1
 800617a:	d03a      	beq.n	80061f2 <_malloc_r+0xea>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	442b      	add	r3, r5
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	f8d8 3000 	ldr.w	r3, [r8]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	bb62      	cbnz	r2, 80061e4 <_malloc_r+0xdc>
 800618a:	f8c8 7000 	str.w	r7, [r8]
 800618e:	e00f      	b.n	80061b0 <_malloc_r+0xa8>
 8006190:	6822      	ldr	r2, [r4, #0]
 8006192:	1b52      	subs	r2, r2, r5
 8006194:	d420      	bmi.n	80061d8 <_malloc_r+0xd0>
 8006196:	2a0b      	cmp	r2, #11
 8006198:	d917      	bls.n	80061ca <_malloc_r+0xc2>
 800619a:	1961      	adds	r1, r4, r5
 800619c:	42a3      	cmp	r3, r4
 800619e:	6025      	str	r5, [r4, #0]
 80061a0:	bf18      	it	ne
 80061a2:	6059      	strne	r1, [r3, #4]
 80061a4:	6863      	ldr	r3, [r4, #4]
 80061a6:	bf08      	it	eq
 80061a8:	f8c8 1000 	streq.w	r1, [r8]
 80061ac:	5162      	str	r2, [r4, r5]
 80061ae:	604b      	str	r3, [r1, #4]
 80061b0:	4630      	mov	r0, r6
 80061b2:	f000 f82f 	bl	8006214 <__malloc_unlock>
 80061b6:	f104 000b 	add.w	r0, r4, #11
 80061ba:	1d23      	adds	r3, r4, #4
 80061bc:	f020 0007 	bic.w	r0, r0, #7
 80061c0:	1ac2      	subs	r2, r0, r3
 80061c2:	bf1c      	itt	ne
 80061c4:	1a1b      	subne	r3, r3, r0
 80061c6:	50a3      	strne	r3, [r4, r2]
 80061c8:	e7af      	b.n	800612a <_malloc_r+0x22>
 80061ca:	6862      	ldr	r2, [r4, #4]
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	bf0c      	ite	eq
 80061d0:	f8c8 2000 	streq.w	r2, [r8]
 80061d4:	605a      	strne	r2, [r3, #4]
 80061d6:	e7eb      	b.n	80061b0 <_malloc_r+0xa8>
 80061d8:	4623      	mov	r3, r4
 80061da:	6864      	ldr	r4, [r4, #4]
 80061dc:	e7ae      	b.n	800613c <_malloc_r+0x34>
 80061de:	463c      	mov	r4, r7
 80061e0:	687f      	ldr	r7, [r7, #4]
 80061e2:	e7b6      	b.n	8006152 <_malloc_r+0x4a>
 80061e4:	461a      	mov	r2, r3
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	42a3      	cmp	r3, r4
 80061ea:	d1fb      	bne.n	80061e4 <_malloc_r+0xdc>
 80061ec:	2300      	movs	r3, #0
 80061ee:	6053      	str	r3, [r2, #4]
 80061f0:	e7de      	b.n	80061b0 <_malloc_r+0xa8>
 80061f2:	230c      	movs	r3, #12
 80061f4:	6033      	str	r3, [r6, #0]
 80061f6:	4630      	mov	r0, r6
 80061f8:	f000 f80c 	bl	8006214 <__malloc_unlock>
 80061fc:	e794      	b.n	8006128 <_malloc_r+0x20>
 80061fe:	6005      	str	r5, [r0, #0]
 8006200:	e7d6      	b.n	80061b0 <_malloc_r+0xa8>
 8006202:	bf00      	nop
 8006204:	20004678 	.word	0x20004678

08006208 <__malloc_lock>:
 8006208:	4801      	ldr	r0, [pc, #4]	@ (8006210 <__malloc_lock+0x8>)
 800620a:	f7ff bf00 	b.w	800600e <__retarget_lock_acquire_recursive>
 800620e:	bf00      	nop
 8006210:	20004670 	.word	0x20004670

08006214 <__malloc_unlock>:
 8006214:	4801      	ldr	r0, [pc, #4]	@ (800621c <__malloc_unlock+0x8>)
 8006216:	f7ff befb 	b.w	8006010 <__retarget_lock_release_recursive>
 800621a:	bf00      	nop
 800621c:	20004670 	.word	0x20004670

08006220 <__ssputs_r>:
 8006220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006224:	688e      	ldr	r6, [r1, #8]
 8006226:	461f      	mov	r7, r3
 8006228:	42be      	cmp	r6, r7
 800622a:	680b      	ldr	r3, [r1, #0]
 800622c:	4682      	mov	sl, r0
 800622e:	460c      	mov	r4, r1
 8006230:	4690      	mov	r8, r2
 8006232:	d82d      	bhi.n	8006290 <__ssputs_r+0x70>
 8006234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006238:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800623c:	d026      	beq.n	800628c <__ssputs_r+0x6c>
 800623e:	6965      	ldr	r5, [r4, #20]
 8006240:	6909      	ldr	r1, [r1, #16]
 8006242:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006246:	eba3 0901 	sub.w	r9, r3, r1
 800624a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800624e:	1c7b      	adds	r3, r7, #1
 8006250:	444b      	add	r3, r9
 8006252:	106d      	asrs	r5, r5, #1
 8006254:	429d      	cmp	r5, r3
 8006256:	bf38      	it	cc
 8006258:	461d      	movcc	r5, r3
 800625a:	0553      	lsls	r3, r2, #21
 800625c:	d527      	bpl.n	80062ae <__ssputs_r+0x8e>
 800625e:	4629      	mov	r1, r5
 8006260:	f7ff ff52 	bl	8006108 <_malloc_r>
 8006264:	4606      	mov	r6, r0
 8006266:	b360      	cbz	r0, 80062c2 <__ssputs_r+0xa2>
 8006268:	6921      	ldr	r1, [r4, #16]
 800626a:	464a      	mov	r2, r9
 800626c:	f7ff fed1 	bl	8006012 <memcpy>
 8006270:	89a3      	ldrh	r3, [r4, #12]
 8006272:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800627a:	81a3      	strh	r3, [r4, #12]
 800627c:	6126      	str	r6, [r4, #16]
 800627e:	6165      	str	r5, [r4, #20]
 8006280:	444e      	add	r6, r9
 8006282:	eba5 0509 	sub.w	r5, r5, r9
 8006286:	6026      	str	r6, [r4, #0]
 8006288:	60a5      	str	r5, [r4, #8]
 800628a:	463e      	mov	r6, r7
 800628c:	42be      	cmp	r6, r7
 800628e:	d900      	bls.n	8006292 <__ssputs_r+0x72>
 8006290:	463e      	mov	r6, r7
 8006292:	6820      	ldr	r0, [r4, #0]
 8006294:	4632      	mov	r2, r6
 8006296:	4641      	mov	r1, r8
 8006298:	f000 fcf6 	bl	8006c88 <memmove>
 800629c:	68a3      	ldr	r3, [r4, #8]
 800629e:	1b9b      	subs	r3, r3, r6
 80062a0:	60a3      	str	r3, [r4, #8]
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	4433      	add	r3, r6
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	2000      	movs	r0, #0
 80062aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ae:	462a      	mov	r2, r5
 80062b0:	f000 fd36 	bl	8006d20 <_realloc_r>
 80062b4:	4606      	mov	r6, r0
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d1e0      	bne.n	800627c <__ssputs_r+0x5c>
 80062ba:	6921      	ldr	r1, [r4, #16]
 80062bc:	4650      	mov	r0, sl
 80062be:	f7ff feb7 	bl	8006030 <_free_r>
 80062c2:	230c      	movs	r3, #12
 80062c4:	f8ca 3000 	str.w	r3, [sl]
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ce:	81a3      	strh	r3, [r4, #12]
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	e7e9      	b.n	80062aa <__ssputs_r+0x8a>
	...

080062d8 <_svfiprintf_r>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	4698      	mov	r8, r3
 80062de:	898b      	ldrh	r3, [r1, #12]
 80062e0:	061b      	lsls	r3, r3, #24
 80062e2:	b09d      	sub	sp, #116	@ 0x74
 80062e4:	4607      	mov	r7, r0
 80062e6:	460d      	mov	r5, r1
 80062e8:	4614      	mov	r4, r2
 80062ea:	d510      	bpl.n	800630e <_svfiprintf_r+0x36>
 80062ec:	690b      	ldr	r3, [r1, #16]
 80062ee:	b973      	cbnz	r3, 800630e <_svfiprintf_r+0x36>
 80062f0:	2140      	movs	r1, #64	@ 0x40
 80062f2:	f7ff ff09 	bl	8006108 <_malloc_r>
 80062f6:	6028      	str	r0, [r5, #0]
 80062f8:	6128      	str	r0, [r5, #16]
 80062fa:	b930      	cbnz	r0, 800630a <_svfiprintf_r+0x32>
 80062fc:	230c      	movs	r3, #12
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	f04f 30ff 	mov.w	r0, #4294967295
 8006304:	b01d      	add	sp, #116	@ 0x74
 8006306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630a:	2340      	movs	r3, #64	@ 0x40
 800630c:	616b      	str	r3, [r5, #20]
 800630e:	2300      	movs	r3, #0
 8006310:	9309      	str	r3, [sp, #36]	@ 0x24
 8006312:	2320      	movs	r3, #32
 8006314:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006318:	f8cd 800c 	str.w	r8, [sp, #12]
 800631c:	2330      	movs	r3, #48	@ 0x30
 800631e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80064bc <_svfiprintf_r+0x1e4>
 8006322:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006326:	f04f 0901 	mov.w	r9, #1
 800632a:	4623      	mov	r3, r4
 800632c:	469a      	mov	sl, r3
 800632e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006332:	b10a      	cbz	r2, 8006338 <_svfiprintf_r+0x60>
 8006334:	2a25      	cmp	r2, #37	@ 0x25
 8006336:	d1f9      	bne.n	800632c <_svfiprintf_r+0x54>
 8006338:	ebba 0b04 	subs.w	fp, sl, r4
 800633c:	d00b      	beq.n	8006356 <_svfiprintf_r+0x7e>
 800633e:	465b      	mov	r3, fp
 8006340:	4622      	mov	r2, r4
 8006342:	4629      	mov	r1, r5
 8006344:	4638      	mov	r0, r7
 8006346:	f7ff ff6b 	bl	8006220 <__ssputs_r>
 800634a:	3001      	adds	r0, #1
 800634c:	f000 80a7 	beq.w	800649e <_svfiprintf_r+0x1c6>
 8006350:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006352:	445a      	add	r2, fp
 8006354:	9209      	str	r2, [sp, #36]	@ 0x24
 8006356:	f89a 3000 	ldrb.w	r3, [sl]
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 809f 	beq.w	800649e <_svfiprintf_r+0x1c6>
 8006360:	2300      	movs	r3, #0
 8006362:	f04f 32ff 	mov.w	r2, #4294967295
 8006366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800636a:	f10a 0a01 	add.w	sl, sl, #1
 800636e:	9304      	str	r3, [sp, #16]
 8006370:	9307      	str	r3, [sp, #28]
 8006372:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006376:	931a      	str	r3, [sp, #104]	@ 0x68
 8006378:	4654      	mov	r4, sl
 800637a:	2205      	movs	r2, #5
 800637c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006380:	484e      	ldr	r0, [pc, #312]	@ (80064bc <_svfiprintf_r+0x1e4>)
 8006382:	f7f9 ff45 	bl	8000210 <memchr>
 8006386:	9a04      	ldr	r2, [sp, #16]
 8006388:	b9d8      	cbnz	r0, 80063c2 <_svfiprintf_r+0xea>
 800638a:	06d0      	lsls	r0, r2, #27
 800638c:	bf44      	itt	mi
 800638e:	2320      	movmi	r3, #32
 8006390:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006394:	0711      	lsls	r1, r2, #28
 8006396:	bf44      	itt	mi
 8006398:	232b      	movmi	r3, #43	@ 0x2b
 800639a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800639e:	f89a 3000 	ldrb.w	r3, [sl]
 80063a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80063a4:	d015      	beq.n	80063d2 <_svfiprintf_r+0xfa>
 80063a6:	9a07      	ldr	r2, [sp, #28]
 80063a8:	4654      	mov	r4, sl
 80063aa:	2000      	movs	r0, #0
 80063ac:	f04f 0c0a 	mov.w	ip, #10
 80063b0:	4621      	mov	r1, r4
 80063b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063b6:	3b30      	subs	r3, #48	@ 0x30
 80063b8:	2b09      	cmp	r3, #9
 80063ba:	d94b      	bls.n	8006454 <_svfiprintf_r+0x17c>
 80063bc:	b1b0      	cbz	r0, 80063ec <_svfiprintf_r+0x114>
 80063be:	9207      	str	r2, [sp, #28]
 80063c0:	e014      	b.n	80063ec <_svfiprintf_r+0x114>
 80063c2:	eba0 0308 	sub.w	r3, r0, r8
 80063c6:	fa09 f303 	lsl.w	r3, r9, r3
 80063ca:	4313      	orrs	r3, r2
 80063cc:	9304      	str	r3, [sp, #16]
 80063ce:	46a2      	mov	sl, r4
 80063d0:	e7d2      	b.n	8006378 <_svfiprintf_r+0xa0>
 80063d2:	9b03      	ldr	r3, [sp, #12]
 80063d4:	1d19      	adds	r1, r3, #4
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	9103      	str	r1, [sp, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bfbb      	ittet	lt
 80063de:	425b      	neglt	r3, r3
 80063e0:	f042 0202 	orrlt.w	r2, r2, #2
 80063e4:	9307      	strge	r3, [sp, #28]
 80063e6:	9307      	strlt	r3, [sp, #28]
 80063e8:	bfb8      	it	lt
 80063ea:	9204      	strlt	r2, [sp, #16]
 80063ec:	7823      	ldrb	r3, [r4, #0]
 80063ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80063f0:	d10a      	bne.n	8006408 <_svfiprintf_r+0x130>
 80063f2:	7863      	ldrb	r3, [r4, #1]
 80063f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80063f6:	d132      	bne.n	800645e <_svfiprintf_r+0x186>
 80063f8:	9b03      	ldr	r3, [sp, #12]
 80063fa:	1d1a      	adds	r2, r3, #4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	9203      	str	r2, [sp, #12]
 8006400:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006404:	3402      	adds	r4, #2
 8006406:	9305      	str	r3, [sp, #20]
 8006408:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80064cc <_svfiprintf_r+0x1f4>
 800640c:	7821      	ldrb	r1, [r4, #0]
 800640e:	2203      	movs	r2, #3
 8006410:	4650      	mov	r0, sl
 8006412:	f7f9 fefd 	bl	8000210 <memchr>
 8006416:	b138      	cbz	r0, 8006428 <_svfiprintf_r+0x150>
 8006418:	9b04      	ldr	r3, [sp, #16]
 800641a:	eba0 000a 	sub.w	r0, r0, sl
 800641e:	2240      	movs	r2, #64	@ 0x40
 8006420:	4082      	lsls	r2, r0
 8006422:	4313      	orrs	r3, r2
 8006424:	3401      	adds	r4, #1
 8006426:	9304      	str	r3, [sp, #16]
 8006428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800642c:	4824      	ldr	r0, [pc, #144]	@ (80064c0 <_svfiprintf_r+0x1e8>)
 800642e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006432:	2206      	movs	r2, #6
 8006434:	f7f9 feec 	bl	8000210 <memchr>
 8006438:	2800      	cmp	r0, #0
 800643a:	d036      	beq.n	80064aa <_svfiprintf_r+0x1d2>
 800643c:	4b21      	ldr	r3, [pc, #132]	@ (80064c4 <_svfiprintf_r+0x1ec>)
 800643e:	bb1b      	cbnz	r3, 8006488 <_svfiprintf_r+0x1b0>
 8006440:	9b03      	ldr	r3, [sp, #12]
 8006442:	3307      	adds	r3, #7
 8006444:	f023 0307 	bic.w	r3, r3, #7
 8006448:	3308      	adds	r3, #8
 800644a:	9303      	str	r3, [sp, #12]
 800644c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644e:	4433      	add	r3, r6
 8006450:	9309      	str	r3, [sp, #36]	@ 0x24
 8006452:	e76a      	b.n	800632a <_svfiprintf_r+0x52>
 8006454:	fb0c 3202 	mla	r2, ip, r2, r3
 8006458:	460c      	mov	r4, r1
 800645a:	2001      	movs	r0, #1
 800645c:	e7a8      	b.n	80063b0 <_svfiprintf_r+0xd8>
 800645e:	2300      	movs	r3, #0
 8006460:	3401      	adds	r4, #1
 8006462:	9305      	str	r3, [sp, #20]
 8006464:	4619      	mov	r1, r3
 8006466:	f04f 0c0a 	mov.w	ip, #10
 800646a:	4620      	mov	r0, r4
 800646c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006470:	3a30      	subs	r2, #48	@ 0x30
 8006472:	2a09      	cmp	r2, #9
 8006474:	d903      	bls.n	800647e <_svfiprintf_r+0x1a6>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0c6      	beq.n	8006408 <_svfiprintf_r+0x130>
 800647a:	9105      	str	r1, [sp, #20]
 800647c:	e7c4      	b.n	8006408 <_svfiprintf_r+0x130>
 800647e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006482:	4604      	mov	r4, r0
 8006484:	2301      	movs	r3, #1
 8006486:	e7f0      	b.n	800646a <_svfiprintf_r+0x192>
 8006488:	ab03      	add	r3, sp, #12
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	462a      	mov	r2, r5
 800648e:	4b0e      	ldr	r3, [pc, #56]	@ (80064c8 <_svfiprintf_r+0x1f0>)
 8006490:	a904      	add	r1, sp, #16
 8006492:	4638      	mov	r0, r7
 8006494:	f3af 8000 	nop.w
 8006498:	1c42      	adds	r2, r0, #1
 800649a:	4606      	mov	r6, r0
 800649c:	d1d6      	bne.n	800644c <_svfiprintf_r+0x174>
 800649e:	89ab      	ldrh	r3, [r5, #12]
 80064a0:	065b      	lsls	r3, r3, #25
 80064a2:	f53f af2d 	bmi.w	8006300 <_svfiprintf_r+0x28>
 80064a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064a8:	e72c      	b.n	8006304 <_svfiprintf_r+0x2c>
 80064aa:	ab03      	add	r3, sp, #12
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	462a      	mov	r2, r5
 80064b0:	4b05      	ldr	r3, [pc, #20]	@ (80064c8 <_svfiprintf_r+0x1f0>)
 80064b2:	a904      	add	r1, sp, #16
 80064b4:	4638      	mov	r0, r7
 80064b6:	f000 f9bb 	bl	8006830 <_printf_i>
 80064ba:	e7ed      	b.n	8006498 <_svfiprintf_r+0x1c0>
 80064bc:	08007291 	.word	0x08007291
 80064c0:	0800729b 	.word	0x0800729b
 80064c4:	00000000 	.word	0x00000000
 80064c8:	08006221 	.word	0x08006221
 80064cc:	08007297 	.word	0x08007297

080064d0 <__sfputc_r>:
 80064d0:	6893      	ldr	r3, [r2, #8]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	b410      	push	{r4}
 80064d8:	6093      	str	r3, [r2, #8]
 80064da:	da08      	bge.n	80064ee <__sfputc_r+0x1e>
 80064dc:	6994      	ldr	r4, [r2, #24]
 80064de:	42a3      	cmp	r3, r4
 80064e0:	db01      	blt.n	80064e6 <__sfputc_r+0x16>
 80064e2:	290a      	cmp	r1, #10
 80064e4:	d103      	bne.n	80064ee <__sfputc_r+0x1e>
 80064e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ea:	f7ff bc24 	b.w	8005d36 <__swbuf_r>
 80064ee:	6813      	ldr	r3, [r2, #0]
 80064f0:	1c58      	adds	r0, r3, #1
 80064f2:	6010      	str	r0, [r2, #0]
 80064f4:	7019      	strb	r1, [r3, #0]
 80064f6:	4608      	mov	r0, r1
 80064f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <__sfputs_r>:
 80064fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006500:	4606      	mov	r6, r0
 8006502:	460f      	mov	r7, r1
 8006504:	4614      	mov	r4, r2
 8006506:	18d5      	adds	r5, r2, r3
 8006508:	42ac      	cmp	r4, r5
 800650a:	d101      	bne.n	8006510 <__sfputs_r+0x12>
 800650c:	2000      	movs	r0, #0
 800650e:	e007      	b.n	8006520 <__sfputs_r+0x22>
 8006510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006514:	463a      	mov	r2, r7
 8006516:	4630      	mov	r0, r6
 8006518:	f7ff ffda 	bl	80064d0 <__sfputc_r>
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	d1f3      	bne.n	8006508 <__sfputs_r+0xa>
 8006520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006524 <_vfiprintf_r>:
 8006524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006528:	460d      	mov	r5, r1
 800652a:	b09d      	sub	sp, #116	@ 0x74
 800652c:	4614      	mov	r4, r2
 800652e:	4698      	mov	r8, r3
 8006530:	4606      	mov	r6, r0
 8006532:	b118      	cbz	r0, 800653c <_vfiprintf_r+0x18>
 8006534:	6a03      	ldr	r3, [r0, #32]
 8006536:	b90b      	cbnz	r3, 800653c <_vfiprintf_r+0x18>
 8006538:	f7ff fade 	bl	8005af8 <__sinit>
 800653c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800653e:	07d9      	lsls	r1, r3, #31
 8006540:	d405      	bmi.n	800654e <_vfiprintf_r+0x2a>
 8006542:	89ab      	ldrh	r3, [r5, #12]
 8006544:	059a      	lsls	r2, r3, #22
 8006546:	d402      	bmi.n	800654e <_vfiprintf_r+0x2a>
 8006548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800654a:	f7ff fd60 	bl	800600e <__retarget_lock_acquire_recursive>
 800654e:	89ab      	ldrh	r3, [r5, #12]
 8006550:	071b      	lsls	r3, r3, #28
 8006552:	d501      	bpl.n	8006558 <_vfiprintf_r+0x34>
 8006554:	692b      	ldr	r3, [r5, #16]
 8006556:	b99b      	cbnz	r3, 8006580 <_vfiprintf_r+0x5c>
 8006558:	4629      	mov	r1, r5
 800655a:	4630      	mov	r0, r6
 800655c:	f7ff fc2a 	bl	8005db4 <__swsetup_r>
 8006560:	b170      	cbz	r0, 8006580 <_vfiprintf_r+0x5c>
 8006562:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006564:	07dc      	lsls	r4, r3, #31
 8006566:	d504      	bpl.n	8006572 <_vfiprintf_r+0x4e>
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	b01d      	add	sp, #116	@ 0x74
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	89ab      	ldrh	r3, [r5, #12]
 8006574:	0598      	lsls	r0, r3, #22
 8006576:	d4f7      	bmi.n	8006568 <_vfiprintf_r+0x44>
 8006578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800657a:	f7ff fd49 	bl	8006010 <__retarget_lock_release_recursive>
 800657e:	e7f3      	b.n	8006568 <_vfiprintf_r+0x44>
 8006580:	2300      	movs	r3, #0
 8006582:	9309      	str	r3, [sp, #36]	@ 0x24
 8006584:	2320      	movs	r3, #32
 8006586:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800658a:	f8cd 800c 	str.w	r8, [sp, #12]
 800658e:	2330      	movs	r3, #48	@ 0x30
 8006590:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006740 <_vfiprintf_r+0x21c>
 8006594:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006598:	f04f 0901 	mov.w	r9, #1
 800659c:	4623      	mov	r3, r4
 800659e:	469a      	mov	sl, r3
 80065a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065a4:	b10a      	cbz	r2, 80065aa <_vfiprintf_r+0x86>
 80065a6:	2a25      	cmp	r2, #37	@ 0x25
 80065a8:	d1f9      	bne.n	800659e <_vfiprintf_r+0x7a>
 80065aa:	ebba 0b04 	subs.w	fp, sl, r4
 80065ae:	d00b      	beq.n	80065c8 <_vfiprintf_r+0xa4>
 80065b0:	465b      	mov	r3, fp
 80065b2:	4622      	mov	r2, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	4630      	mov	r0, r6
 80065b8:	f7ff ffa1 	bl	80064fe <__sfputs_r>
 80065bc:	3001      	adds	r0, #1
 80065be:	f000 80a7 	beq.w	8006710 <_vfiprintf_r+0x1ec>
 80065c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065c4:	445a      	add	r2, fp
 80065c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80065c8:	f89a 3000 	ldrb.w	r3, [sl]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 809f 	beq.w	8006710 <_vfiprintf_r+0x1ec>
 80065d2:	2300      	movs	r3, #0
 80065d4:	f04f 32ff 	mov.w	r2, #4294967295
 80065d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065dc:	f10a 0a01 	add.w	sl, sl, #1
 80065e0:	9304      	str	r3, [sp, #16]
 80065e2:	9307      	str	r3, [sp, #28]
 80065e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80065ea:	4654      	mov	r4, sl
 80065ec:	2205      	movs	r2, #5
 80065ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f2:	4853      	ldr	r0, [pc, #332]	@ (8006740 <_vfiprintf_r+0x21c>)
 80065f4:	f7f9 fe0c 	bl	8000210 <memchr>
 80065f8:	9a04      	ldr	r2, [sp, #16]
 80065fa:	b9d8      	cbnz	r0, 8006634 <_vfiprintf_r+0x110>
 80065fc:	06d1      	lsls	r1, r2, #27
 80065fe:	bf44      	itt	mi
 8006600:	2320      	movmi	r3, #32
 8006602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006606:	0713      	lsls	r3, r2, #28
 8006608:	bf44      	itt	mi
 800660a:	232b      	movmi	r3, #43	@ 0x2b
 800660c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006610:	f89a 3000 	ldrb.w	r3, [sl]
 8006614:	2b2a      	cmp	r3, #42	@ 0x2a
 8006616:	d015      	beq.n	8006644 <_vfiprintf_r+0x120>
 8006618:	9a07      	ldr	r2, [sp, #28]
 800661a:	4654      	mov	r4, sl
 800661c:	2000      	movs	r0, #0
 800661e:	f04f 0c0a 	mov.w	ip, #10
 8006622:	4621      	mov	r1, r4
 8006624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006628:	3b30      	subs	r3, #48	@ 0x30
 800662a:	2b09      	cmp	r3, #9
 800662c:	d94b      	bls.n	80066c6 <_vfiprintf_r+0x1a2>
 800662e:	b1b0      	cbz	r0, 800665e <_vfiprintf_r+0x13a>
 8006630:	9207      	str	r2, [sp, #28]
 8006632:	e014      	b.n	800665e <_vfiprintf_r+0x13a>
 8006634:	eba0 0308 	sub.w	r3, r0, r8
 8006638:	fa09 f303 	lsl.w	r3, r9, r3
 800663c:	4313      	orrs	r3, r2
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	46a2      	mov	sl, r4
 8006642:	e7d2      	b.n	80065ea <_vfiprintf_r+0xc6>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	1d19      	adds	r1, r3, #4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	9103      	str	r1, [sp, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	bfbb      	ittet	lt
 8006650:	425b      	neglt	r3, r3
 8006652:	f042 0202 	orrlt.w	r2, r2, #2
 8006656:	9307      	strge	r3, [sp, #28]
 8006658:	9307      	strlt	r3, [sp, #28]
 800665a:	bfb8      	it	lt
 800665c:	9204      	strlt	r2, [sp, #16]
 800665e:	7823      	ldrb	r3, [r4, #0]
 8006660:	2b2e      	cmp	r3, #46	@ 0x2e
 8006662:	d10a      	bne.n	800667a <_vfiprintf_r+0x156>
 8006664:	7863      	ldrb	r3, [r4, #1]
 8006666:	2b2a      	cmp	r3, #42	@ 0x2a
 8006668:	d132      	bne.n	80066d0 <_vfiprintf_r+0x1ac>
 800666a:	9b03      	ldr	r3, [sp, #12]
 800666c:	1d1a      	adds	r2, r3, #4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	9203      	str	r2, [sp, #12]
 8006672:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006676:	3402      	adds	r4, #2
 8006678:	9305      	str	r3, [sp, #20]
 800667a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006750 <_vfiprintf_r+0x22c>
 800667e:	7821      	ldrb	r1, [r4, #0]
 8006680:	2203      	movs	r2, #3
 8006682:	4650      	mov	r0, sl
 8006684:	f7f9 fdc4 	bl	8000210 <memchr>
 8006688:	b138      	cbz	r0, 800669a <_vfiprintf_r+0x176>
 800668a:	9b04      	ldr	r3, [sp, #16]
 800668c:	eba0 000a 	sub.w	r0, r0, sl
 8006690:	2240      	movs	r2, #64	@ 0x40
 8006692:	4082      	lsls	r2, r0
 8006694:	4313      	orrs	r3, r2
 8006696:	3401      	adds	r4, #1
 8006698:	9304      	str	r3, [sp, #16]
 800669a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800669e:	4829      	ldr	r0, [pc, #164]	@ (8006744 <_vfiprintf_r+0x220>)
 80066a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066a4:	2206      	movs	r2, #6
 80066a6:	f7f9 fdb3 	bl	8000210 <memchr>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d03f      	beq.n	800672e <_vfiprintf_r+0x20a>
 80066ae:	4b26      	ldr	r3, [pc, #152]	@ (8006748 <_vfiprintf_r+0x224>)
 80066b0:	bb1b      	cbnz	r3, 80066fa <_vfiprintf_r+0x1d6>
 80066b2:	9b03      	ldr	r3, [sp, #12]
 80066b4:	3307      	adds	r3, #7
 80066b6:	f023 0307 	bic.w	r3, r3, #7
 80066ba:	3308      	adds	r3, #8
 80066bc:	9303      	str	r3, [sp, #12]
 80066be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c0:	443b      	add	r3, r7
 80066c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80066c4:	e76a      	b.n	800659c <_vfiprintf_r+0x78>
 80066c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80066ca:	460c      	mov	r4, r1
 80066cc:	2001      	movs	r0, #1
 80066ce:	e7a8      	b.n	8006622 <_vfiprintf_r+0xfe>
 80066d0:	2300      	movs	r3, #0
 80066d2:	3401      	adds	r4, #1
 80066d4:	9305      	str	r3, [sp, #20]
 80066d6:	4619      	mov	r1, r3
 80066d8:	f04f 0c0a 	mov.w	ip, #10
 80066dc:	4620      	mov	r0, r4
 80066de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066e2:	3a30      	subs	r2, #48	@ 0x30
 80066e4:	2a09      	cmp	r2, #9
 80066e6:	d903      	bls.n	80066f0 <_vfiprintf_r+0x1cc>
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0c6      	beq.n	800667a <_vfiprintf_r+0x156>
 80066ec:	9105      	str	r1, [sp, #20]
 80066ee:	e7c4      	b.n	800667a <_vfiprintf_r+0x156>
 80066f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80066f4:	4604      	mov	r4, r0
 80066f6:	2301      	movs	r3, #1
 80066f8:	e7f0      	b.n	80066dc <_vfiprintf_r+0x1b8>
 80066fa:	ab03      	add	r3, sp, #12
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	462a      	mov	r2, r5
 8006700:	4b12      	ldr	r3, [pc, #72]	@ (800674c <_vfiprintf_r+0x228>)
 8006702:	a904      	add	r1, sp, #16
 8006704:	4630      	mov	r0, r6
 8006706:	f3af 8000 	nop.w
 800670a:	4607      	mov	r7, r0
 800670c:	1c78      	adds	r0, r7, #1
 800670e:	d1d6      	bne.n	80066be <_vfiprintf_r+0x19a>
 8006710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006712:	07d9      	lsls	r1, r3, #31
 8006714:	d405      	bmi.n	8006722 <_vfiprintf_r+0x1fe>
 8006716:	89ab      	ldrh	r3, [r5, #12]
 8006718:	059a      	lsls	r2, r3, #22
 800671a:	d402      	bmi.n	8006722 <_vfiprintf_r+0x1fe>
 800671c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800671e:	f7ff fc77 	bl	8006010 <__retarget_lock_release_recursive>
 8006722:	89ab      	ldrh	r3, [r5, #12]
 8006724:	065b      	lsls	r3, r3, #25
 8006726:	f53f af1f 	bmi.w	8006568 <_vfiprintf_r+0x44>
 800672a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800672c:	e71e      	b.n	800656c <_vfiprintf_r+0x48>
 800672e:	ab03      	add	r3, sp, #12
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	462a      	mov	r2, r5
 8006734:	4b05      	ldr	r3, [pc, #20]	@ (800674c <_vfiprintf_r+0x228>)
 8006736:	a904      	add	r1, sp, #16
 8006738:	4630      	mov	r0, r6
 800673a:	f000 f879 	bl	8006830 <_printf_i>
 800673e:	e7e4      	b.n	800670a <_vfiprintf_r+0x1e6>
 8006740:	08007291 	.word	0x08007291
 8006744:	0800729b 	.word	0x0800729b
 8006748:	00000000 	.word	0x00000000
 800674c:	080064ff 	.word	0x080064ff
 8006750:	08007297 	.word	0x08007297

08006754 <_printf_common>:
 8006754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006758:	4616      	mov	r6, r2
 800675a:	4698      	mov	r8, r3
 800675c:	688a      	ldr	r2, [r1, #8]
 800675e:	690b      	ldr	r3, [r1, #16]
 8006760:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006764:	4293      	cmp	r3, r2
 8006766:	bfb8      	it	lt
 8006768:	4613      	movlt	r3, r2
 800676a:	6033      	str	r3, [r6, #0]
 800676c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006770:	4607      	mov	r7, r0
 8006772:	460c      	mov	r4, r1
 8006774:	b10a      	cbz	r2, 800677a <_printf_common+0x26>
 8006776:	3301      	adds	r3, #1
 8006778:	6033      	str	r3, [r6, #0]
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	0699      	lsls	r1, r3, #26
 800677e:	bf42      	ittt	mi
 8006780:	6833      	ldrmi	r3, [r6, #0]
 8006782:	3302      	addmi	r3, #2
 8006784:	6033      	strmi	r3, [r6, #0]
 8006786:	6825      	ldr	r5, [r4, #0]
 8006788:	f015 0506 	ands.w	r5, r5, #6
 800678c:	d106      	bne.n	800679c <_printf_common+0x48>
 800678e:	f104 0a19 	add.w	sl, r4, #25
 8006792:	68e3      	ldr	r3, [r4, #12]
 8006794:	6832      	ldr	r2, [r6, #0]
 8006796:	1a9b      	subs	r3, r3, r2
 8006798:	42ab      	cmp	r3, r5
 800679a:	dc26      	bgt.n	80067ea <_printf_common+0x96>
 800679c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067a0:	6822      	ldr	r2, [r4, #0]
 80067a2:	3b00      	subs	r3, #0
 80067a4:	bf18      	it	ne
 80067a6:	2301      	movne	r3, #1
 80067a8:	0692      	lsls	r2, r2, #26
 80067aa:	d42b      	bmi.n	8006804 <_printf_common+0xb0>
 80067ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067b0:	4641      	mov	r1, r8
 80067b2:	4638      	mov	r0, r7
 80067b4:	47c8      	blx	r9
 80067b6:	3001      	adds	r0, #1
 80067b8:	d01e      	beq.n	80067f8 <_printf_common+0xa4>
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	6922      	ldr	r2, [r4, #16]
 80067be:	f003 0306 	and.w	r3, r3, #6
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	bf02      	ittt	eq
 80067c6:	68e5      	ldreq	r5, [r4, #12]
 80067c8:	6833      	ldreq	r3, [r6, #0]
 80067ca:	1aed      	subeq	r5, r5, r3
 80067cc:	68a3      	ldr	r3, [r4, #8]
 80067ce:	bf0c      	ite	eq
 80067d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067d4:	2500      	movne	r5, #0
 80067d6:	4293      	cmp	r3, r2
 80067d8:	bfc4      	itt	gt
 80067da:	1a9b      	subgt	r3, r3, r2
 80067dc:	18ed      	addgt	r5, r5, r3
 80067de:	2600      	movs	r6, #0
 80067e0:	341a      	adds	r4, #26
 80067e2:	42b5      	cmp	r5, r6
 80067e4:	d11a      	bne.n	800681c <_printf_common+0xc8>
 80067e6:	2000      	movs	r0, #0
 80067e8:	e008      	b.n	80067fc <_printf_common+0xa8>
 80067ea:	2301      	movs	r3, #1
 80067ec:	4652      	mov	r2, sl
 80067ee:	4641      	mov	r1, r8
 80067f0:	4638      	mov	r0, r7
 80067f2:	47c8      	blx	r9
 80067f4:	3001      	adds	r0, #1
 80067f6:	d103      	bne.n	8006800 <_printf_common+0xac>
 80067f8:	f04f 30ff 	mov.w	r0, #4294967295
 80067fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006800:	3501      	adds	r5, #1
 8006802:	e7c6      	b.n	8006792 <_printf_common+0x3e>
 8006804:	18e1      	adds	r1, r4, r3
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	2030      	movs	r0, #48	@ 0x30
 800680a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800680e:	4422      	add	r2, r4
 8006810:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006814:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006818:	3302      	adds	r3, #2
 800681a:	e7c7      	b.n	80067ac <_printf_common+0x58>
 800681c:	2301      	movs	r3, #1
 800681e:	4622      	mov	r2, r4
 8006820:	4641      	mov	r1, r8
 8006822:	4638      	mov	r0, r7
 8006824:	47c8      	blx	r9
 8006826:	3001      	adds	r0, #1
 8006828:	d0e6      	beq.n	80067f8 <_printf_common+0xa4>
 800682a:	3601      	adds	r6, #1
 800682c:	e7d9      	b.n	80067e2 <_printf_common+0x8e>
	...

08006830 <_printf_i>:
 8006830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	7e0f      	ldrb	r7, [r1, #24]
 8006836:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006838:	2f78      	cmp	r7, #120	@ 0x78
 800683a:	4691      	mov	r9, r2
 800683c:	4680      	mov	r8, r0
 800683e:	460c      	mov	r4, r1
 8006840:	469a      	mov	sl, r3
 8006842:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006846:	d807      	bhi.n	8006858 <_printf_i+0x28>
 8006848:	2f62      	cmp	r7, #98	@ 0x62
 800684a:	d80a      	bhi.n	8006862 <_printf_i+0x32>
 800684c:	2f00      	cmp	r7, #0
 800684e:	f000 80d1 	beq.w	80069f4 <_printf_i+0x1c4>
 8006852:	2f58      	cmp	r7, #88	@ 0x58
 8006854:	f000 80b8 	beq.w	80069c8 <_printf_i+0x198>
 8006858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800685c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006860:	e03a      	b.n	80068d8 <_printf_i+0xa8>
 8006862:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006866:	2b15      	cmp	r3, #21
 8006868:	d8f6      	bhi.n	8006858 <_printf_i+0x28>
 800686a:	a101      	add	r1, pc, #4	@ (adr r1, 8006870 <_printf_i+0x40>)
 800686c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006870:	080068c9 	.word	0x080068c9
 8006874:	080068dd 	.word	0x080068dd
 8006878:	08006859 	.word	0x08006859
 800687c:	08006859 	.word	0x08006859
 8006880:	08006859 	.word	0x08006859
 8006884:	08006859 	.word	0x08006859
 8006888:	080068dd 	.word	0x080068dd
 800688c:	08006859 	.word	0x08006859
 8006890:	08006859 	.word	0x08006859
 8006894:	08006859 	.word	0x08006859
 8006898:	08006859 	.word	0x08006859
 800689c:	080069db 	.word	0x080069db
 80068a0:	08006907 	.word	0x08006907
 80068a4:	08006995 	.word	0x08006995
 80068a8:	08006859 	.word	0x08006859
 80068ac:	08006859 	.word	0x08006859
 80068b0:	080069fd 	.word	0x080069fd
 80068b4:	08006859 	.word	0x08006859
 80068b8:	08006907 	.word	0x08006907
 80068bc:	08006859 	.word	0x08006859
 80068c0:	08006859 	.word	0x08006859
 80068c4:	0800699d 	.word	0x0800699d
 80068c8:	6833      	ldr	r3, [r6, #0]
 80068ca:	1d1a      	adds	r2, r3, #4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6032      	str	r2, [r6, #0]
 80068d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068d8:	2301      	movs	r3, #1
 80068da:	e09c      	b.n	8006a16 <_printf_i+0x1e6>
 80068dc:	6833      	ldr	r3, [r6, #0]
 80068de:	6820      	ldr	r0, [r4, #0]
 80068e0:	1d19      	adds	r1, r3, #4
 80068e2:	6031      	str	r1, [r6, #0]
 80068e4:	0606      	lsls	r6, r0, #24
 80068e6:	d501      	bpl.n	80068ec <_printf_i+0xbc>
 80068e8:	681d      	ldr	r5, [r3, #0]
 80068ea:	e003      	b.n	80068f4 <_printf_i+0xc4>
 80068ec:	0645      	lsls	r5, r0, #25
 80068ee:	d5fb      	bpl.n	80068e8 <_printf_i+0xb8>
 80068f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068f4:	2d00      	cmp	r5, #0
 80068f6:	da03      	bge.n	8006900 <_printf_i+0xd0>
 80068f8:	232d      	movs	r3, #45	@ 0x2d
 80068fa:	426d      	negs	r5, r5
 80068fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006900:	4858      	ldr	r0, [pc, #352]	@ (8006a64 <_printf_i+0x234>)
 8006902:	230a      	movs	r3, #10
 8006904:	e011      	b.n	800692a <_printf_i+0xfa>
 8006906:	6821      	ldr	r1, [r4, #0]
 8006908:	6833      	ldr	r3, [r6, #0]
 800690a:	0608      	lsls	r0, r1, #24
 800690c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006910:	d402      	bmi.n	8006918 <_printf_i+0xe8>
 8006912:	0649      	lsls	r1, r1, #25
 8006914:	bf48      	it	mi
 8006916:	b2ad      	uxthmi	r5, r5
 8006918:	2f6f      	cmp	r7, #111	@ 0x6f
 800691a:	4852      	ldr	r0, [pc, #328]	@ (8006a64 <_printf_i+0x234>)
 800691c:	6033      	str	r3, [r6, #0]
 800691e:	bf14      	ite	ne
 8006920:	230a      	movne	r3, #10
 8006922:	2308      	moveq	r3, #8
 8006924:	2100      	movs	r1, #0
 8006926:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800692a:	6866      	ldr	r6, [r4, #4]
 800692c:	60a6      	str	r6, [r4, #8]
 800692e:	2e00      	cmp	r6, #0
 8006930:	db05      	blt.n	800693e <_printf_i+0x10e>
 8006932:	6821      	ldr	r1, [r4, #0]
 8006934:	432e      	orrs	r6, r5
 8006936:	f021 0104 	bic.w	r1, r1, #4
 800693a:	6021      	str	r1, [r4, #0]
 800693c:	d04b      	beq.n	80069d6 <_printf_i+0x1a6>
 800693e:	4616      	mov	r6, r2
 8006940:	fbb5 f1f3 	udiv	r1, r5, r3
 8006944:	fb03 5711 	mls	r7, r3, r1, r5
 8006948:	5dc7      	ldrb	r7, [r0, r7]
 800694a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800694e:	462f      	mov	r7, r5
 8006950:	42bb      	cmp	r3, r7
 8006952:	460d      	mov	r5, r1
 8006954:	d9f4      	bls.n	8006940 <_printf_i+0x110>
 8006956:	2b08      	cmp	r3, #8
 8006958:	d10b      	bne.n	8006972 <_printf_i+0x142>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	07df      	lsls	r7, r3, #31
 800695e:	d508      	bpl.n	8006972 <_printf_i+0x142>
 8006960:	6923      	ldr	r3, [r4, #16]
 8006962:	6861      	ldr	r1, [r4, #4]
 8006964:	4299      	cmp	r1, r3
 8006966:	bfde      	ittt	le
 8006968:	2330      	movle	r3, #48	@ 0x30
 800696a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800696e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006972:	1b92      	subs	r2, r2, r6
 8006974:	6122      	str	r2, [r4, #16]
 8006976:	f8cd a000 	str.w	sl, [sp]
 800697a:	464b      	mov	r3, r9
 800697c:	aa03      	add	r2, sp, #12
 800697e:	4621      	mov	r1, r4
 8006980:	4640      	mov	r0, r8
 8006982:	f7ff fee7 	bl	8006754 <_printf_common>
 8006986:	3001      	adds	r0, #1
 8006988:	d14a      	bne.n	8006a20 <_printf_i+0x1f0>
 800698a:	f04f 30ff 	mov.w	r0, #4294967295
 800698e:	b004      	add	sp, #16
 8006990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	f043 0320 	orr.w	r3, r3, #32
 800699a:	6023      	str	r3, [r4, #0]
 800699c:	4832      	ldr	r0, [pc, #200]	@ (8006a68 <_printf_i+0x238>)
 800699e:	2778      	movs	r7, #120	@ 0x78
 80069a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	6831      	ldr	r1, [r6, #0]
 80069a8:	061f      	lsls	r7, r3, #24
 80069aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80069ae:	d402      	bmi.n	80069b6 <_printf_i+0x186>
 80069b0:	065f      	lsls	r7, r3, #25
 80069b2:	bf48      	it	mi
 80069b4:	b2ad      	uxthmi	r5, r5
 80069b6:	6031      	str	r1, [r6, #0]
 80069b8:	07d9      	lsls	r1, r3, #31
 80069ba:	bf44      	itt	mi
 80069bc:	f043 0320 	orrmi.w	r3, r3, #32
 80069c0:	6023      	strmi	r3, [r4, #0]
 80069c2:	b11d      	cbz	r5, 80069cc <_printf_i+0x19c>
 80069c4:	2310      	movs	r3, #16
 80069c6:	e7ad      	b.n	8006924 <_printf_i+0xf4>
 80069c8:	4826      	ldr	r0, [pc, #152]	@ (8006a64 <_printf_i+0x234>)
 80069ca:	e7e9      	b.n	80069a0 <_printf_i+0x170>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	f023 0320 	bic.w	r3, r3, #32
 80069d2:	6023      	str	r3, [r4, #0]
 80069d4:	e7f6      	b.n	80069c4 <_printf_i+0x194>
 80069d6:	4616      	mov	r6, r2
 80069d8:	e7bd      	b.n	8006956 <_printf_i+0x126>
 80069da:	6833      	ldr	r3, [r6, #0]
 80069dc:	6825      	ldr	r5, [r4, #0]
 80069de:	6961      	ldr	r1, [r4, #20]
 80069e0:	1d18      	adds	r0, r3, #4
 80069e2:	6030      	str	r0, [r6, #0]
 80069e4:	062e      	lsls	r6, r5, #24
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	d501      	bpl.n	80069ee <_printf_i+0x1be>
 80069ea:	6019      	str	r1, [r3, #0]
 80069ec:	e002      	b.n	80069f4 <_printf_i+0x1c4>
 80069ee:	0668      	lsls	r0, r5, #25
 80069f0:	d5fb      	bpl.n	80069ea <_printf_i+0x1ba>
 80069f2:	8019      	strh	r1, [r3, #0]
 80069f4:	2300      	movs	r3, #0
 80069f6:	6123      	str	r3, [r4, #16]
 80069f8:	4616      	mov	r6, r2
 80069fa:	e7bc      	b.n	8006976 <_printf_i+0x146>
 80069fc:	6833      	ldr	r3, [r6, #0]
 80069fe:	1d1a      	adds	r2, r3, #4
 8006a00:	6032      	str	r2, [r6, #0]
 8006a02:	681e      	ldr	r6, [r3, #0]
 8006a04:	6862      	ldr	r2, [r4, #4]
 8006a06:	2100      	movs	r1, #0
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f7f9 fc01 	bl	8000210 <memchr>
 8006a0e:	b108      	cbz	r0, 8006a14 <_printf_i+0x1e4>
 8006a10:	1b80      	subs	r0, r0, r6
 8006a12:	6060      	str	r0, [r4, #4]
 8006a14:	6863      	ldr	r3, [r4, #4]
 8006a16:	6123      	str	r3, [r4, #16]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a1e:	e7aa      	b.n	8006976 <_printf_i+0x146>
 8006a20:	6923      	ldr	r3, [r4, #16]
 8006a22:	4632      	mov	r2, r6
 8006a24:	4649      	mov	r1, r9
 8006a26:	4640      	mov	r0, r8
 8006a28:	47d0      	blx	sl
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	d0ad      	beq.n	800698a <_printf_i+0x15a>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	079b      	lsls	r3, r3, #30
 8006a32:	d413      	bmi.n	8006a5c <_printf_i+0x22c>
 8006a34:	68e0      	ldr	r0, [r4, #12]
 8006a36:	9b03      	ldr	r3, [sp, #12]
 8006a38:	4298      	cmp	r0, r3
 8006a3a:	bfb8      	it	lt
 8006a3c:	4618      	movlt	r0, r3
 8006a3e:	e7a6      	b.n	800698e <_printf_i+0x15e>
 8006a40:	2301      	movs	r3, #1
 8006a42:	4632      	mov	r2, r6
 8006a44:	4649      	mov	r1, r9
 8006a46:	4640      	mov	r0, r8
 8006a48:	47d0      	blx	sl
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	d09d      	beq.n	800698a <_printf_i+0x15a>
 8006a4e:	3501      	adds	r5, #1
 8006a50:	68e3      	ldr	r3, [r4, #12]
 8006a52:	9903      	ldr	r1, [sp, #12]
 8006a54:	1a5b      	subs	r3, r3, r1
 8006a56:	42ab      	cmp	r3, r5
 8006a58:	dcf2      	bgt.n	8006a40 <_printf_i+0x210>
 8006a5a:	e7eb      	b.n	8006a34 <_printf_i+0x204>
 8006a5c:	2500      	movs	r5, #0
 8006a5e:	f104 0619 	add.w	r6, r4, #25
 8006a62:	e7f5      	b.n	8006a50 <_printf_i+0x220>
 8006a64:	080072a2 	.word	0x080072a2
 8006a68:	080072b3 	.word	0x080072b3

08006a6c <__sflush_r>:
 8006a6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a74:	0716      	lsls	r6, r2, #28
 8006a76:	4605      	mov	r5, r0
 8006a78:	460c      	mov	r4, r1
 8006a7a:	d454      	bmi.n	8006b26 <__sflush_r+0xba>
 8006a7c:	684b      	ldr	r3, [r1, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	dc02      	bgt.n	8006a88 <__sflush_r+0x1c>
 8006a82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dd48      	ble.n	8006b1a <__sflush_r+0xae>
 8006a88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	d045      	beq.n	8006b1a <__sflush_r+0xae>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a94:	682f      	ldr	r7, [r5, #0]
 8006a96:	6a21      	ldr	r1, [r4, #32]
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	d030      	beq.n	8006afe <__sflush_r+0x92>
 8006a9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	0759      	lsls	r1, r3, #29
 8006aa2:	d505      	bpl.n	8006ab0 <__sflush_r+0x44>
 8006aa4:	6863      	ldr	r3, [r4, #4]
 8006aa6:	1ad2      	subs	r2, r2, r3
 8006aa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006aaa:	b10b      	cbz	r3, 8006ab0 <__sflush_r+0x44>
 8006aac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006aae:	1ad2      	subs	r2, r2, r3
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ab4:	6a21      	ldr	r1, [r4, #32]
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	47b0      	blx	r6
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	d106      	bne.n	8006ace <__sflush_r+0x62>
 8006ac0:	6829      	ldr	r1, [r5, #0]
 8006ac2:	291d      	cmp	r1, #29
 8006ac4:	d82b      	bhi.n	8006b1e <__sflush_r+0xb2>
 8006ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8006b70 <__sflush_r+0x104>)
 8006ac8:	40ca      	lsrs	r2, r1
 8006aca:	07d6      	lsls	r6, r2, #31
 8006acc:	d527      	bpl.n	8006b1e <__sflush_r+0xb2>
 8006ace:	2200      	movs	r2, #0
 8006ad0:	6062      	str	r2, [r4, #4]
 8006ad2:	04d9      	lsls	r1, r3, #19
 8006ad4:	6922      	ldr	r2, [r4, #16]
 8006ad6:	6022      	str	r2, [r4, #0]
 8006ad8:	d504      	bpl.n	8006ae4 <__sflush_r+0x78>
 8006ada:	1c42      	adds	r2, r0, #1
 8006adc:	d101      	bne.n	8006ae2 <__sflush_r+0x76>
 8006ade:	682b      	ldr	r3, [r5, #0]
 8006ae0:	b903      	cbnz	r3, 8006ae4 <__sflush_r+0x78>
 8006ae2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ae6:	602f      	str	r7, [r5, #0]
 8006ae8:	b1b9      	cbz	r1, 8006b1a <__sflush_r+0xae>
 8006aea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006aee:	4299      	cmp	r1, r3
 8006af0:	d002      	beq.n	8006af8 <__sflush_r+0x8c>
 8006af2:	4628      	mov	r0, r5
 8006af4:	f7ff fa9c 	bl	8006030 <_free_r>
 8006af8:	2300      	movs	r3, #0
 8006afa:	6363      	str	r3, [r4, #52]	@ 0x34
 8006afc:	e00d      	b.n	8006b1a <__sflush_r+0xae>
 8006afe:	2301      	movs	r3, #1
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b0      	blx	r6
 8006b04:	4602      	mov	r2, r0
 8006b06:	1c50      	adds	r0, r2, #1
 8006b08:	d1c9      	bne.n	8006a9e <__sflush_r+0x32>
 8006b0a:	682b      	ldr	r3, [r5, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d0c6      	beq.n	8006a9e <__sflush_r+0x32>
 8006b10:	2b1d      	cmp	r3, #29
 8006b12:	d001      	beq.n	8006b18 <__sflush_r+0xac>
 8006b14:	2b16      	cmp	r3, #22
 8006b16:	d11e      	bne.n	8006b56 <__sflush_r+0xea>
 8006b18:	602f      	str	r7, [r5, #0]
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	e022      	b.n	8006b64 <__sflush_r+0xf8>
 8006b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b22:	b21b      	sxth	r3, r3
 8006b24:	e01b      	b.n	8006b5e <__sflush_r+0xf2>
 8006b26:	690f      	ldr	r7, [r1, #16]
 8006b28:	2f00      	cmp	r7, #0
 8006b2a:	d0f6      	beq.n	8006b1a <__sflush_r+0xae>
 8006b2c:	0793      	lsls	r3, r2, #30
 8006b2e:	680e      	ldr	r6, [r1, #0]
 8006b30:	bf08      	it	eq
 8006b32:	694b      	ldreq	r3, [r1, #20]
 8006b34:	600f      	str	r7, [r1, #0]
 8006b36:	bf18      	it	ne
 8006b38:	2300      	movne	r3, #0
 8006b3a:	eba6 0807 	sub.w	r8, r6, r7
 8006b3e:	608b      	str	r3, [r1, #8]
 8006b40:	f1b8 0f00 	cmp.w	r8, #0
 8006b44:	dde9      	ble.n	8006b1a <__sflush_r+0xae>
 8006b46:	6a21      	ldr	r1, [r4, #32]
 8006b48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b4a:	4643      	mov	r3, r8
 8006b4c:	463a      	mov	r2, r7
 8006b4e:	4628      	mov	r0, r5
 8006b50:	47b0      	blx	r6
 8006b52:	2800      	cmp	r0, #0
 8006b54:	dc08      	bgt.n	8006b68 <__sflush_r+0xfc>
 8006b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b5e:	81a3      	strh	r3, [r4, #12]
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295
 8006b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b68:	4407      	add	r7, r0
 8006b6a:	eba8 0800 	sub.w	r8, r8, r0
 8006b6e:	e7e7      	b.n	8006b40 <__sflush_r+0xd4>
 8006b70:	20400001 	.word	0x20400001

08006b74 <_fflush_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	690b      	ldr	r3, [r1, #16]
 8006b78:	4605      	mov	r5, r0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	b913      	cbnz	r3, 8006b84 <_fflush_r+0x10>
 8006b7e:	2500      	movs	r5, #0
 8006b80:	4628      	mov	r0, r5
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	b118      	cbz	r0, 8006b8e <_fflush_r+0x1a>
 8006b86:	6a03      	ldr	r3, [r0, #32]
 8006b88:	b90b      	cbnz	r3, 8006b8e <_fflush_r+0x1a>
 8006b8a:	f7fe ffb5 	bl	8005af8 <__sinit>
 8006b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f3      	beq.n	8006b7e <_fflush_r+0xa>
 8006b96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b98:	07d0      	lsls	r0, r2, #31
 8006b9a:	d404      	bmi.n	8006ba6 <_fflush_r+0x32>
 8006b9c:	0599      	lsls	r1, r3, #22
 8006b9e:	d402      	bmi.n	8006ba6 <_fflush_r+0x32>
 8006ba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ba2:	f7ff fa34 	bl	800600e <__retarget_lock_acquire_recursive>
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	4621      	mov	r1, r4
 8006baa:	f7ff ff5f 	bl	8006a6c <__sflush_r>
 8006bae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bb0:	07da      	lsls	r2, r3, #31
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	d4e4      	bmi.n	8006b80 <_fflush_r+0xc>
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	059b      	lsls	r3, r3, #22
 8006bba:	d4e1      	bmi.n	8006b80 <_fflush_r+0xc>
 8006bbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bbe:	f7ff fa27 	bl	8006010 <__retarget_lock_release_recursive>
 8006bc2:	e7dd      	b.n	8006b80 <_fflush_r+0xc>

08006bc4 <__swhatbuf_r>:
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bcc:	2900      	cmp	r1, #0
 8006bce:	b096      	sub	sp, #88	@ 0x58
 8006bd0:	4615      	mov	r5, r2
 8006bd2:	461e      	mov	r6, r3
 8006bd4:	da0d      	bge.n	8006bf2 <__swhatbuf_r+0x2e>
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006bdc:	f04f 0100 	mov.w	r1, #0
 8006be0:	bf14      	ite	ne
 8006be2:	2340      	movne	r3, #64	@ 0x40
 8006be4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006be8:	2000      	movs	r0, #0
 8006bea:	6031      	str	r1, [r6, #0]
 8006bec:	602b      	str	r3, [r5, #0]
 8006bee:	b016      	add	sp, #88	@ 0x58
 8006bf0:	bd70      	pop	{r4, r5, r6, pc}
 8006bf2:	466a      	mov	r2, sp
 8006bf4:	f000 f862 	bl	8006cbc <_fstat_r>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	dbec      	blt.n	8006bd6 <__swhatbuf_r+0x12>
 8006bfc:	9901      	ldr	r1, [sp, #4]
 8006bfe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c06:	4259      	negs	r1, r3
 8006c08:	4159      	adcs	r1, r3
 8006c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c0e:	e7eb      	b.n	8006be8 <__swhatbuf_r+0x24>

08006c10 <__smakebuf_r>:
 8006c10:	898b      	ldrh	r3, [r1, #12]
 8006c12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c14:	079d      	lsls	r5, r3, #30
 8006c16:	4606      	mov	r6, r0
 8006c18:	460c      	mov	r4, r1
 8006c1a:	d507      	bpl.n	8006c2c <__smakebuf_r+0x1c>
 8006c1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	6123      	str	r3, [r4, #16]
 8006c24:	2301      	movs	r3, #1
 8006c26:	6163      	str	r3, [r4, #20]
 8006c28:	b003      	add	sp, #12
 8006c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c2c:	ab01      	add	r3, sp, #4
 8006c2e:	466a      	mov	r2, sp
 8006c30:	f7ff ffc8 	bl	8006bc4 <__swhatbuf_r>
 8006c34:	9f00      	ldr	r7, [sp, #0]
 8006c36:	4605      	mov	r5, r0
 8006c38:	4639      	mov	r1, r7
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7ff fa64 	bl	8006108 <_malloc_r>
 8006c40:	b948      	cbnz	r0, 8006c56 <__smakebuf_r+0x46>
 8006c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c46:	059a      	lsls	r2, r3, #22
 8006c48:	d4ee      	bmi.n	8006c28 <__smakebuf_r+0x18>
 8006c4a:	f023 0303 	bic.w	r3, r3, #3
 8006c4e:	f043 0302 	orr.w	r3, r3, #2
 8006c52:	81a3      	strh	r3, [r4, #12]
 8006c54:	e7e2      	b.n	8006c1c <__smakebuf_r+0xc>
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	6020      	str	r0, [r4, #0]
 8006c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c5e:	81a3      	strh	r3, [r4, #12]
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c66:	b15b      	cbz	r3, 8006c80 <__smakebuf_r+0x70>
 8006c68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f000 f837 	bl	8006ce0 <_isatty_r>
 8006c72:	b128      	cbz	r0, 8006c80 <__smakebuf_r+0x70>
 8006c74:	89a3      	ldrh	r3, [r4, #12]
 8006c76:	f023 0303 	bic.w	r3, r3, #3
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	81a3      	strh	r3, [r4, #12]
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	431d      	orrs	r5, r3
 8006c84:	81a5      	strh	r5, [r4, #12]
 8006c86:	e7cf      	b.n	8006c28 <__smakebuf_r+0x18>

08006c88 <memmove>:
 8006c88:	4288      	cmp	r0, r1
 8006c8a:	b510      	push	{r4, lr}
 8006c8c:	eb01 0402 	add.w	r4, r1, r2
 8006c90:	d902      	bls.n	8006c98 <memmove+0x10>
 8006c92:	4284      	cmp	r4, r0
 8006c94:	4623      	mov	r3, r4
 8006c96:	d807      	bhi.n	8006ca8 <memmove+0x20>
 8006c98:	1e43      	subs	r3, r0, #1
 8006c9a:	42a1      	cmp	r1, r4
 8006c9c:	d008      	beq.n	8006cb0 <memmove+0x28>
 8006c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ca6:	e7f8      	b.n	8006c9a <memmove+0x12>
 8006ca8:	4402      	add	r2, r0
 8006caa:	4601      	mov	r1, r0
 8006cac:	428a      	cmp	r2, r1
 8006cae:	d100      	bne.n	8006cb2 <memmove+0x2a>
 8006cb0:	bd10      	pop	{r4, pc}
 8006cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cba:	e7f7      	b.n	8006cac <memmove+0x24>

08006cbc <_fstat_r>:
 8006cbc:	b538      	push	{r3, r4, r5, lr}
 8006cbe:	4d07      	ldr	r5, [pc, #28]	@ (8006cdc <_fstat_r+0x20>)
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	f7fa f9ea 	bl	80010a2 <_fstat>
 8006cce:	1c43      	adds	r3, r0, #1
 8006cd0:	d102      	bne.n	8006cd8 <_fstat_r+0x1c>
 8006cd2:	682b      	ldr	r3, [r5, #0]
 8006cd4:	b103      	cbz	r3, 8006cd8 <_fstat_r+0x1c>
 8006cd6:	6023      	str	r3, [r4, #0]
 8006cd8:	bd38      	pop	{r3, r4, r5, pc}
 8006cda:	bf00      	nop
 8006cdc:	2000466c 	.word	0x2000466c

08006ce0 <_isatty_r>:
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	4d06      	ldr	r5, [pc, #24]	@ (8006cfc <_isatty_r+0x1c>)
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	4608      	mov	r0, r1
 8006cea:	602b      	str	r3, [r5, #0]
 8006cec:	f7fa f9e9 	bl	80010c2 <_isatty>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d102      	bne.n	8006cfa <_isatty_r+0x1a>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	b103      	cbz	r3, 8006cfa <_isatty_r+0x1a>
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	bd38      	pop	{r3, r4, r5, pc}
 8006cfc:	2000466c 	.word	0x2000466c

08006d00 <_sbrk_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	4d06      	ldr	r5, [pc, #24]	@ (8006d1c <_sbrk_r+0x1c>)
 8006d04:	2300      	movs	r3, #0
 8006d06:	4604      	mov	r4, r0
 8006d08:	4608      	mov	r0, r1
 8006d0a:	602b      	str	r3, [r5, #0]
 8006d0c:	f7fa f9f2 	bl	80010f4 <_sbrk>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	d102      	bne.n	8006d1a <_sbrk_r+0x1a>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	b103      	cbz	r3, 8006d1a <_sbrk_r+0x1a>
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	bd38      	pop	{r3, r4, r5, pc}
 8006d1c:	2000466c 	.word	0x2000466c

08006d20 <_realloc_r>:
 8006d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d24:	4607      	mov	r7, r0
 8006d26:	4614      	mov	r4, r2
 8006d28:	460d      	mov	r5, r1
 8006d2a:	b921      	cbnz	r1, 8006d36 <_realloc_r+0x16>
 8006d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d30:	4611      	mov	r1, r2
 8006d32:	f7ff b9e9 	b.w	8006108 <_malloc_r>
 8006d36:	b92a      	cbnz	r2, 8006d44 <_realloc_r+0x24>
 8006d38:	f7ff f97a 	bl	8006030 <_free_r>
 8006d3c:	4625      	mov	r5, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d44:	f000 f81a 	bl	8006d7c <_malloc_usable_size_r>
 8006d48:	4284      	cmp	r4, r0
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	d802      	bhi.n	8006d54 <_realloc_r+0x34>
 8006d4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d52:	d8f4      	bhi.n	8006d3e <_realloc_r+0x1e>
 8006d54:	4621      	mov	r1, r4
 8006d56:	4638      	mov	r0, r7
 8006d58:	f7ff f9d6 	bl	8006108 <_malloc_r>
 8006d5c:	4680      	mov	r8, r0
 8006d5e:	b908      	cbnz	r0, 8006d64 <_realloc_r+0x44>
 8006d60:	4645      	mov	r5, r8
 8006d62:	e7ec      	b.n	8006d3e <_realloc_r+0x1e>
 8006d64:	42b4      	cmp	r4, r6
 8006d66:	4622      	mov	r2, r4
 8006d68:	4629      	mov	r1, r5
 8006d6a:	bf28      	it	cs
 8006d6c:	4632      	movcs	r2, r6
 8006d6e:	f7ff f950 	bl	8006012 <memcpy>
 8006d72:	4629      	mov	r1, r5
 8006d74:	4638      	mov	r0, r7
 8006d76:	f7ff f95b 	bl	8006030 <_free_r>
 8006d7a:	e7f1      	b.n	8006d60 <_realloc_r+0x40>

08006d7c <_malloc_usable_size_r>:
 8006d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d80:	1f18      	subs	r0, r3, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	bfbc      	itt	lt
 8006d86:	580b      	ldrlt	r3, [r1, r0]
 8006d88:	18c0      	addlt	r0, r0, r3
 8006d8a:	4770      	bx	lr

08006d8c <_init>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	bf00      	nop
 8006d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d92:	bc08      	pop	{r3}
 8006d94:	469e      	mov	lr, r3
 8006d96:	4770      	bx	lr

08006d98 <_fini>:
 8006d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9a:	bf00      	nop
 8006d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9e:	bc08      	pop	{r3}
 8006da0:	469e      	mov	lr, r3
 8006da2:	4770      	bx	lr
