
TP_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08007bc8  08007bc8  00008bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080dc  080080dc  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080080dc  080080dc  000090dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080e4  080080e4  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080e4  080080e4  000090e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080e8  080080e8  000090e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080080ec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008260  20000074  08008160  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200082d4  08008160  0000a2d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195f2  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d01  00000000  00000000  00023696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00027398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001061  00000000  00000000  000288c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029870  00000000  00000000  00029929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a399  00000000  00000000  00053199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb48d  00000000  00000000  0006d532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001689bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061c0  00000000  00000000  00168a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0016ebc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007bb0 	.word	0x08007bb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007bb0 	.word	0x08007bb0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <vApplicationGetIdleTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	@ (800061c <vApplicationGetIdleTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000094 	.word	0x20000094
 800061c:	20000140 	.word	0x20000140

08000620 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <MX_FREERTOS_Init+0x30>)
 8000628:	1d3c      	adds	r4, r7, #4
 800062a:	461d      	mov	r5, r3
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f003 ffea 	bl	8004616 <osThreadCreate>
 8000642:	4603      	mov	r3, r0
 8000644:	4a03      	ldr	r2, [pc, #12]	@ (8000654 <MX_FREERTOS_Init+0x34>)
 8000646:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bdb0      	pop	{r4, r5, r7, pc}
 8000650:	08007bd4 	.word	0x08007bd4
 8000654:	20000090 	.word	0x20000090

08000658 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000660:	2001      	movs	r0, #1
 8000662:	f004 f824 	bl	80046ae <osDelay>
 8000666:	e7fb      	b.n	8000660 <StartDefaultTask+0x8>

08000668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	@ 0x28
 800066c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <MX_GPIO_Init+0xc0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a29      	ldr	r2, [pc, #164]	@ (8000728 <MX_GPIO_Init+0xc0>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <MX_GPIO_Init+0xc0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <MX_GPIO_Init+0xc0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a23      	ldr	r2, [pc, #140]	@ (8000728 <MX_GPIO_Init+0xc0>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a17      	ldr	r2, [pc, #92]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2102      	movs	r1, #2
 80006e2:	4812      	ldr	r0, [pc, #72]	@ (800072c <MX_GPIO_Init+0xc4>)
 80006e4:	f001 fa2e 	bl	8001b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006e8:	2302      	movs	r3, #2
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	480b      	ldr	r0, [pc, #44]	@ (800072c <MX_GPIO_Init+0xc4>)
 8000700:	f001 f874 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000704:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_GPIO_Init+0xc4>)
 800071a:	f001 f867 	bl	80017ec <HAL_GPIO_Init>

}
 800071e:	bf00      	nop
 8000720:	3728      	adds	r7, #40	@ 0x28
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40022000 	.word	0x40022000

08000730 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000738:	1d39      	adds	r1, r7, #4
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	2201      	movs	r2, #1
 8000740:	4803      	ldr	r0, [pc, #12]	@ (8000750 <__io_putchar+0x20>)
 8000742:	f002 fe97 	bl	8003474 <HAL_UART_Transmit>

	return ch;
 8000746:	687b      	ldr	r3, [r7, #4]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200007a8 	.word	0x200007a8

08000754 <StartLedTask>:


uint32_t led_delay_ms = 100;


void StartLedTask(void *argument) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	uint8_t ledState = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]
	printf("Entering LedTask\n");
 8000760:	4811      	ldr	r0, [pc, #68]	@ (80007a8 <StartLedTask+0x54>)
 8000762:	f006 f94f 	bl	8006a04 <puts>
	for (;;) {
		ledState = !ledState;
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf0c      	ite	eq
 800076c:	2301      	moveq	r3, #1
 800076e:	2300      	movne	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ledState ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	2b00      	cmp	r3, #0
 8000778:	bf14      	ite	ne
 800077a:	2301      	movne	r3, #1
 800077c:	2300      	moveq	r3, #0
 800077e:	b2db      	uxtb	r3, r3
 8000780:	461a      	mov	r2, r3
 8000782:	2102      	movs	r1, #2
 8000784:	4809      	ldr	r0, [pc, #36]	@ (80007ac <StartLedTask+0x58>)
 8000786:	f001 f9dd 	bl	8001b44 <HAL_GPIO_WritePin>
		//printf("LED : %s\r\n", ledState ? "ON" : "OFF");
		vTaskDelay(pdMS_TO_TICKS(led_delay_ms));
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <StartLedTask+0x5c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000792:	fb02 f303 	mul.w	r3, r2, r3
 8000796:	4a07      	ldr	r2, [pc, #28]	@ (80007b4 <StartLedTask+0x60>)
 8000798:	fba2 2303 	umull	r2, r3, r2, r3
 800079c:	099b      	lsrs	r3, r3, #6
 800079e:	4618      	mov	r0, r3
 80007a0:	f004 fae6 	bl	8004d70 <vTaskDelay>
		ledState = !ledState;
 80007a4:	bf00      	nop
 80007a6:	e7de      	b.n	8000766 <StartLedTask+0x12>
 80007a8:	08007bf0 	.word	0x08007bf0
 80007ac:	40022000 	.word	0x40022000
 80007b0:	20000000 	.word	0x20000000
 80007b4:	10624dd3 	.word	0x10624dd3

080007b8 <sh_stats>:
			NVIC_SystemReset(); // Trigger reset
		}
	}
}

int sh_stats(h_shell_t * h_shell, int argc, char **argv) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80007be:	af00      	add	r7, sp, #0
 80007c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80007c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80007c8:	6018      	str	r0, [r3, #0]
 80007ca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80007ce:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80007d2:	6019      	str	r1, [r3, #0]
 80007d4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80007d8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80007dc:	601a      	str	r2, [r3, #0]
    char buffer[512];

    printf("=== Liste des taches ===\r\n");
 80007de:	4811      	ldr	r0, [pc, #68]	@ (8000824 <sh_stats+0x6c>)
 80007e0:	f006 f910 	bl	8006a04 <puts>
    vTaskList(buffer);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4618      	mov	r0, r3
 80007ea:	f005 f9fb 	bl	8005be4 <vTaskList>
    printf("%s\r\n", buffer);
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4619      	mov	r1, r3
 80007f4:	480c      	ldr	r0, [pc, #48]	@ (8000828 <sh_stats+0x70>)
 80007f6:	f006 f89d 	bl	8006934 <iprintf>

    printf("=== Statistiques d'execution ===\r\n");
 80007fa:	480c      	ldr	r0, [pc, #48]	@ (800082c <sh_stats+0x74>)
 80007fc:	f006 f902 	bl	8006a04 <puts>
    vTaskGetRunTimeStats(buffer);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4618      	mov	r0, r3
 8000806:	f005 fa83 	bl	8005d10 <vTaskGetRunTimeStats>
    printf("%s\r\n", buffer);
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	@ (8000828 <sh_stats+0x70>)
 8000812:	f006 f88f 	bl	8006934 <iprintf>

    return 0;
 8000816:	2300      	movs	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	08007d1c 	.word	0x08007d1c
 8000828:	08007d38 	.word	0x08007d38
 800082c:	08007d40 	.word	0x08007d40

08000830 <sh_led>:

int sh_led(h_shell_t *h_shell, int argc, char **argv)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
	static int bool = 1;
	int value = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

	if (argc == 2)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d110      	bne.n	8000868 <sh_led+0x38>
	{
		value = atoi(argv[1]);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3304      	adds	r3, #4
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f005 ff27 	bl	80066a0 <atoi>
 8000852:	6178      	str	r0, [r7, #20]
		if (value >= 30)
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b1d      	cmp	r3, #29
 8000858:	dd06      	ble.n	8000868 <sh_led+0x38>
		{
			led_delay_ms = value;
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	4a15      	ldr	r2, [pc, #84]	@ (80008b4 <sh_led+0x84>)
 800085e:	6013      	str	r3, [r2, #0]
			printf("Value of Led Task %d\r\n", value);
 8000860:	6979      	ldr	r1, [r7, #20]
 8000862:	4815      	ldr	r0, [pc, #84]	@ (80008b8 <sh_led+0x88>)
 8000864:	f006 f866 	bl	8006934 <iprintf>
		}
	}
	if (bool == 0 || (argc == 2 && value != 0))
 8000868:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <sh_led+0x8c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d005      	beq.n	800087c <sh_led+0x4c>
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	2b02      	cmp	r3, #2
 8000874:	d10b      	bne.n	800088e <sh_led+0x5e>
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d008      	beq.n	800088e <sh_led+0x5e>
	{
		vTaskResume(LedTaskHandle);
 800087c:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <sh_led+0x90>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f004 fbe1 	bl	8005048 <vTaskResume>
		bool = 1;
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <sh_led+0x8c>)
 8000888:	2201      	movs	r2, #1
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	e00c      	b.n	80008a8 <sh_led+0x78>
	}
	else
	{
		vTaskSuspend(LedTaskHandle);
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <sh_led+0x90>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f004 fb0e 	bl	8004eb4 <vTaskSuspend>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2102      	movs	r1, #2
 800089c:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <sh_led+0x94>)
 800089e:	f001 f951 	bl	8001b44 <HAL_GPIO_WritePin>
		bool = 0;
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <sh_led+0x8c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
	}
	return 0;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000000 	.word	0x20000000
 80008b8:	08007d64 	.word	0x08007d64
 80008bc:	20000004 	.word	0x20000004
 80008c0:	2000074c 	.word	0x2000074c
 80008c4:	40022000 	.word	0x40022000

080008c8 <ShellTask>:

void ShellTask(void *argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		shell_run(&h_shell); // Appelle ta fonction qui lit rx_buffer et traite les commandes
 80008d0:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <ShellTask+0x18>)
 80008d2:	f000 fa75 	bl	8000dc0 <shell_run>
		vTaskDelay(pdMS_TO_TICKS(10)); // Petit délai pour éviter de saturer la CPU
 80008d6:	200a      	movs	r0, #10
 80008d8:	f004 fa4a 	bl	8004d70 <vTaskDelay>
		shell_run(&h_shell); // Appelle ta fonction qui lit rx_buffer et traite les commandes
 80008dc:	bf00      	nop
 80008de:	e7f7      	b.n	80008d0 <ShellTask+0x8>
 80008e0:	20000340 	.word	0x20000340

080008e4 <vApplicationStackOverflowHook>:
        vOverflowTask( NULL );
    }
}

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
    //printf("STACK OVERFLOW detected in task: %s\r\n", pcTaskName);
    //Error_Handler();
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
	...

080008fc <configureTimerForRunTimeStats>:

void configureTimerForRunTimeStats(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim2);
 8000900:	4802      	ldr	r0, [pc, #8]	@ (800090c <configureTimerForRunTimeStats+0x10>)
 8000902:	f002 fa5b 	bl	8002dbc <HAL_TIM_Base_Start>
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000075c 	.word	0x2000075c

08000910 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void) {
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);
 8000914:	4b03      	ldr	r3, [pc, #12]	@ (8000924 <getRunTimeCounterValue+0x14>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	2000075c 	.word	0x2000075c

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f000 fd5c 	bl	80013ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f85b 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f7ff fe97 	bl	8000668 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800093a:	f000 fc73 	bl	8001224 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800093e:	f000 fc05 	bl	800114c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	shell_init(&h_shell);
 8000942:	481f      	ldr	r0, [pc, #124]	@ (80009c0 <main+0x98>)
 8000944:	f000 f924 	bl	8000b90 <shell_init>
	QueueTask = xQueueCreate(10, sizeof(uint32_t)); // Create the queue
 8000948:	2200      	movs	r2, #0
 800094a:	2104      	movs	r1, #4
 800094c:	200a      	movs	r0, #10
 800094e:	f003 ffe3 	bl	8004918 <xQueueGenericCreate>
 8000952:	4603      	mov	r3, r0
 8000954:	4a1b      	ldr	r2, [pc, #108]	@ (80009c4 <main+0x9c>)
 8000956:	6013      	str	r3, [r2, #0]
	if (QueueTask == NULL) {
 8000958:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <main+0x9c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d104      	bne.n	800096a <main+0x42>
		printf("Failed to create queue\r\n");
 8000960:	4819      	ldr	r0, [pc, #100]	@ (80009c8 <main+0xa0>)
 8000962:	f006 f84f 	bl	8006a04 <puts>
		Error_Handler();
 8000966:	f000 f8ad 	bl	8000ac4 <Error_Handler>
	}
	//xTaskCreate(TaskGive, "TaskGive", 128, NULL, tskIDLE_PRIORITY + 5, &TaskGiveHandle);
	//xTaskCreate(TaskTake, "TaskTake", 128, NULL, tskIDLE_PRIORITY + 5, &TaskTakeHandle);
	if (xTaskCreate(StartLedTask, "LedTask", 128, NULL, tskIDLE_PRIORITY + 5, &LedTaskHandle) != pdPASS ) {
 800096a:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <main+0xa4>)
 800096c:	9301      	str	r3, [sp, #4]
 800096e:	2305      	movs	r3, #5
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2300      	movs	r3, #0
 8000974:	2280      	movs	r2, #128	@ 0x80
 8000976:	4916      	ldr	r1, [pc, #88]	@ (80009d0 <main+0xa8>)
 8000978:	4816      	ldr	r0, [pc, #88]	@ (80009d4 <main+0xac>)
 800097a:	f004 f899 	bl	8004ab0 <xTaskCreate>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d004      	beq.n	800098e <main+0x66>
		printf("Failed to create xTaskCreate LedTask\r\n");
 8000984:	4814      	ldr	r0, [pc, #80]	@ (80009d8 <main+0xb0>)
 8000986:	f006 f83d 	bl	8006a04 <puts>
		Error_Handler();
 800098a:	f000 f89b 	bl	8000ac4 <Error_Handler>
	}
	if (xTaskCreate(ShellTask, "ShellTask", 512, NULL, tskIDLE_PRIORITY + 5, &ShellTaskHandle) != pdPASS ) {
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <main+0xb4>)
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	2305      	movs	r3, #5
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800099c:	4910      	ldr	r1, [pc, #64]	@ (80009e0 <main+0xb8>)
 800099e:	4811      	ldr	r0, [pc, #68]	@ (80009e4 <main+0xbc>)
 80009a0:	f004 f886 	bl	8004ab0 <xTaskCreate>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d004      	beq.n	80009b4 <main+0x8c>
		printf("Failed to create xTaskCreate ShellTask\r\n");
 80009aa:	480f      	ldr	r0, [pc, #60]	@ (80009e8 <main+0xc0>)
 80009ac:	f006 f82a 	bl	8006a04 <puts>
		Error_Handler();
 80009b0:	f000 f888 	bl	8000ac4 <Error_Handler>
		Error_Handler();
    }*/
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80009b4:	f7ff fe34 	bl	8000620 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009b8:	f003 fe26 	bl	8004608 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <main+0x94>
 80009c0:	20000340 	.word	0x20000340
 80009c4:	20000754 	.word	0x20000754
 80009c8:	08007dc8 	.word	0x08007dc8
 80009cc:	2000074c 	.word	0x2000074c
 80009d0:	08007de0 	.word	0x08007de0
 80009d4:	08000755 	.word	0x08000755
 80009d8:	08007de8 	.word	0x08007de8
 80009dc:	20000750 	.word	0x20000750
 80009e0:	08007e10 	.word	0x08007e10
 80009e4:	080008c9 	.word	0x080008c9
 80009e8:	08007e1c 	.word	0x08007e1c

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	@ 0x50
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	2230      	movs	r2, #48	@ 0x30
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f006 f93a 	bl	8006c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a10:	4b2a      	ldr	r3, [pc, #168]	@ (8000abc <SystemClock_Config+0xd0>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a14:	4a29      	ldr	r2, [pc, #164]	@ (8000abc <SystemClock_Config+0xd0>)
 8000a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <SystemClock_Config+0xd0>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a28:	4b25      	ldr	r3, [pc, #148]	@ (8000ac0 <SystemClock_Config+0xd4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a24      	ldr	r2, [pc, #144]	@ (8000ac0 <SystemClock_Config+0xd4>)
 8000a2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <SystemClock_Config+0xd4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a40:	2302      	movs	r3, #2
 8000a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a50:	2300      	movs	r3, #0
 8000a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a54:	2308      	movs	r3, #8
 8000a56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a58:	23d8      	movs	r3, #216	@ 0xd8
 8000a5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 f8d5 	bl	8001c18 <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a74:	f000 f826 	bl	8000ac4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a78:	f001 f87e 	bl	8001b78 <HAL_PWREx_EnableOverDrive>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a82:	f000 f81f 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	230f      	movs	r3, #15
 8000a88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a92:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2107      	movs	r1, #7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 fb5b 	bl	8002160 <HAL_RCC_ClockConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ab0:	f000 f808 	bl	8000ac4 <Error_Handler>
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3750      	adds	r7, #80	@ 0x50
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <sh_useless_fonction>:
#include "shell.h"

#include <stdio.h>

static int sh_useless_fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <sh_useless_fonction+0x3c>)
 8000ae4:	2180      	movs	r1, #128	@ 0x80
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f005 ff94 	bl	8006a14 <sniprintf>
 8000aec:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000afa:	6979      	ldr	r1, [r7, #20]
 8000afc:	b289      	uxth	r1, r1
 8000afe:	4610      	mov	r0, r2
 8000b00:	4798      	blx	r3

	return 0;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08007e44 	.word	0x08007e44

08000b10 <sh_help>:
	static int bool;
	if (bool == 0)
		vTaskSuspend(xTaskToSuspend);
}*/

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b089      	sub	sp, #36	@ 0x24
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e029      	b.n	8000b76 <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000b28:	68f9      	ldr	r1, [r7, #12]
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	440b      	add	r3, r1
 8000b36:	3304      	adds	r3, #4
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461c      	mov	r4, r3
 8000b3c:	68f9      	ldr	r1, [r7, #12]
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	440b      	add	r3, r1
 8000b4a:	330c      	adds	r3, #12
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	4623      	mov	r3, r4
 8000b52:	4a0e      	ldr	r2, [pc, #56]	@ (8000b8c <sh_help+0x7c>)
 8000b54:	2180      	movs	r1, #128	@ 0x80
 8000b56:	f005 ff5d 	bl	8006a14 <sniprintf>
 8000b5a:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000b68:	6939      	ldr	r1, [r7, #16]
 8000b6a:	b289      	uxth	r1, r1
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3301      	adds	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbd0      	blt.n	8000b22 <sh_help+0x12>
	}

	return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	371c      	adds	r7, #28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd90      	pop	{r4, r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	08007e64 	.word	0x08007e64

08000b90 <shell_init>:



void shell_init(h_shell_t * h_shell) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	int size = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
	h_shell->drv.receive = drv_uart1_receive;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a26      	ldr	r2, [pc, #152]	@ (8000c38 <shell_init+0xa8>)
 8000ba0:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
	h_shell->drv.transmit = drv_uart1_transmit;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a25      	ldr	r2, [pc, #148]	@ (8000c3c <shell_init+0xac>)
 8000ba8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

	h_shell->func_list_size = 0;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000bb8:	4a21      	ldr	r2, [pc, #132]	@ (8000c40 <shell_init+0xb0>)
 8000bba:	2180      	movs	r1, #128	@ 0x80
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f005 ff29 	bl	8006a14 <sniprintf>
 8000bc2:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000bd0:	68f9      	ldr	r1, [r7, #12]
 8000bd2:	b289      	uxth	r1, r1
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000bde:	4a19      	ldr	r2, [pc, #100]	@ (8000c44 <shell_init+0xb4>)
 8000be0:	2180      	movs	r1, #128	@ 0x80
 8000be2:	4618      	mov	r0, r3
 8000be4:	f005 ff16 	bl	8006a14 <sniprintf>
 8000be8:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000bf6:	68f9      	ldr	r1, [r7, #12]
 8000bf8:	b289      	uxth	r1, r1
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <shell_init+0xb8>)
 8000c00:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <shell_init+0xbc>)
 8000c02:	2168      	movs	r1, #104	@ 0x68
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 f82f 	bl	8000c68 <shell_add>
	shell_add(h_shell, 'f', sh_useless_fonction, "Une fonction inutile");
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <shell_init+0xc0>)
 8000c0c:	4a11      	ldr	r2, [pc, #68]	@ (8000c54 <shell_init+0xc4>)
 8000c0e:	2166      	movs	r1, #102	@ 0x66
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 f829 	bl	8000c68 <shell_add>
	shell_add(h_shell, 'p', sh_stats, "Affiche les statistiques");
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <shell_init+0xc8>)
 8000c18:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <shell_init+0xcc>)
 8000c1a:	2170      	movs	r1, #112	@ 0x70
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 f823 	bl	8000c68 <shell_add>
	shell_add(h_shell, 'l', sh_led, "Enable/Disable LedTask and first param set the led Delay");
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <shell_init+0xd0>)
 8000c24:	4a0f      	ldr	r2, [pc, #60]	@ (8000c64 <shell_init+0xd4>)
 8000c26:	216c      	movs	r1, #108	@ 0x6c
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 f81d 	bl	8000c68 <shell_add>
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	08000edd 	.word	0x08000edd
 8000c3c:	08000f05 	.word	0x08000f05
 8000c40:	08007e70 	.word	0x08007e70
 8000c44:	08007e98 	.word	0x08007e98
 8000c48:	08007ebc 	.word	0x08007ebc
 8000c4c:	08000b11 	.word	0x08000b11
 8000c50:	08007ec4 	.word	0x08007ec4
 8000c54:	08000ad1 	.word	0x08000ad1
 8000c58:	08007edc 	.word	0x08007edc
 8000c5c:	080007b9 	.word	0x080007b9
 8000c60:	08007ef8 	.word	0x08007ef8
 8000c64:	08000831 	.word	0x08000831

08000c68 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	460b      	mov	r3, r1
 8000c76:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c7e:	dc27      	bgt.n	8000cd0 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	68f9      	ldr	r1, [r7, #12]
 8000c86:	4613      	mov	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4413      	add	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	440b      	add	r3, r1
 8000c90:	3304      	adds	r3, #4
 8000c92:	7afa      	ldrb	r2, [r7, #11]
 8000c94:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	68f9      	ldr	r1, [r7, #12]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3308      	adds	r3, #8
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	68f9      	ldr	r1, [r7, #12]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	330c      	adds	r3, #12
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	601a      	str	r2, [r3, #0]
		return 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	e001      	b.n	8000cd4 <shell_add+0x6c>
	}

	return -1;
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b090      	sub	sp, #64	@ 0x40
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cf6:	e041      	b.n	8000d7c <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	440b      	add	r3, r1
 8000d06:	3304      	adds	r3, #4
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d131      	bne.n	8000d76 <shell_exec+0x96>
			argc = 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d1e:	e013      	b.n	8000d48 <shell_exec+0x68>
				if(*p == ' ') {
 8000d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b20      	cmp	r3, #32
 8000d26:	d10c      	bne.n	8000d42 <shell_exec+0x62>
					*p = '\0';
 8000d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8000d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	63ba      	str	r2, [r7, #56]	@ 0x38
 8000d34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d36:	3201      	adds	r2, #1
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	3340      	adds	r3, #64	@ 0x40
 8000d3c:	443b      	add	r3, r7
 8000d3e:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d44:	3301      	adds	r3, #1
 8000d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <shell_exec+0x76>
 8000d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d52:	2b07      	cmp	r3, #7
 8000d54:	dde4      	ble.n	8000d20 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	440b      	add	r3, r1
 8000d64:	3308      	adds	r3, #8
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f107 020c 	add.w	r2, r7, #12
 8000d6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	4798      	blx	r3
 8000d72:	4603      	mov	r3, r0
 8000d74:	e01d      	b.n	8000db2 <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8000d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d78:	3301      	adds	r3, #1
 8000d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d82:	429a      	cmp	r2, r3
 8000d84:	dbb8      	blt.n	8000cf8 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000d8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d90:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <shell_exec+0xdc>)
 8000d92:	2180      	movs	r1, #128	@ 0x80
 8000d94:	f005 fe3e 	bl	8006a14 <sniprintf>
 8000d98:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000da8:	b289      	uxth	r1, r1
 8000daa:	4610      	mov	r0, r2
 8000dac:	4798      	blx	r3
	return -1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3740      	adds	r7, #64	@ 0x40
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	08007f34 	.word	0x08007f34

08000dc0 <shell_run>:

static const char backspace[] = "\b \b";
static const char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]


		h_shell->drv.transmit(prompt, 2);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	483c      	ldr	r0, [pc, #240]	@ (8000ecc <shell_run+0x10c>)
 8000dda:	4798      	blx	r3
		reading = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]

		while(reading) {
 8000de0:	e064      	b.n	8000eac <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8000de8:	f107 020b 	add.w	r2, r7, #11
 8000dec:	2101      	movs	r1, #1
 8000dee:	4610      	mov	r0, r2
 8000df0:	4798      	blx	r3
			int size;

			switch (c) {
 8000df2:	7afb      	ldrb	r3, [r7, #11]
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d036      	beq.n	8000e66 <shell_run+0xa6>
 8000df8:	2b0d      	cmp	r3, #13
 8000dfa:	d141      	bne.n	8000e80 <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000e02:	4a33      	ldr	r2, [pc, #204]	@ (8000ed0 <shell_run+0x110>)
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	4618      	mov	r0, r3
 8000e08:	f005 fe04 	bl	8006a14 <sniprintf>
 8000e0c:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000e1a:	68f9      	ldr	r1, [r7, #12]
 8000e1c:	b289      	uxth	r1, r1
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	613a      	str	r2, [r7, #16]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8000e3e:	4a25      	ldr	r2, [pc, #148]	@ (8000ed4 <shell_run+0x114>)
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	f005 fde7 	bl	8006a14 <sniprintf>
 8000e46:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000e54:	68f9      	ldr	r1, [r7, #12]
 8000e56:	b289      	uxth	r1, r1
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4798      	blx	r3
				reading = 0;        //exit read loop
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
				break;
 8000e64:	e022      	b.n	8000eac <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	dd1e      	ble.n	8000eaa <shell_run+0xea>
					pos--;          //remove it in buffer
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000e78:	2103      	movs	r1, #3
 8000e7a:	4817      	ldr	r0, [pc, #92]	@ (8000ed8 <shell_run+0x118>)
 8000e7c:	4798      	blx	r3
				}
				break;
 8000e7e:	e014      	b.n	8000eaa <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e84:	dc12      	bgt.n	8000eac <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000e8c:	f107 020b 	add.w	r2, r7, #11
 8000e90:	2101      	movs	r1, #1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	613a      	str	r2, [r7, #16]
 8000e9c:	7af9      	ldrb	r1, [r7, #11]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	460a      	mov	r2, r1
 8000ea4:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 8000ea8:	e000      	b.n	8000eac <shell_run+0xec>
				break;
 8000eaa:	bf00      	nop
		while(reading) {
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d197      	bne.n	8000de2 <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8000eb8:	4619      	mov	r1, r3
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff10 	bl	8000ce0 <shell_exec>

	return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	08007f8c 	.word	0x08007f8c
 8000ed0:	08007f4c 	.word	0x08007f4c
 8000ed4:	08007f50 	.word	0x08007f50
 8000ed8:	08007f88 	.word	0x08007f88

08000edc <drv_uart1_receive>:

uint8_t drv_uart1_receive(char * pData, uint16_t size)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 8000ee8:	887a      	ldrh	r2, [r7, #2]
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	4803      	ldr	r0, [pc, #12]	@ (8000f00 <drv_uart1_receive+0x24>)
 8000ef2:	f002 fb48 	bl	8003586 <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200007a8 	.word	0x200007a8

08000f04 <drv_uart1_transmit>:

uint8_t drv_uart1_transmit(const char * pData, uint16_t size)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8000f10:	887a      	ldrh	r2, [r7, #2]
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	4803      	ldr	r0, [pc, #12]	@ (8000f28 <drv_uart1_transmit+0x24>)
 8000f1a:	f002 faab 	bl	8003474 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200007a8 	.word	0x200007a8

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	4a10      	ldr	r2, [pc, #64]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f56:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	210f      	movs	r1, #15
 8000f66:	f06f 0001 	mvn.w	r0, #1
 8000f6a:	f000 fb76 	bl	800165a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <NMI_Handler+0x4>

08000f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <MemManage_Handler+0x4>

08000f94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb6:	f000 fa55 	bl	8001464 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fba:	f004 fdcf 	bl	8005b5c <xTaskGetSchedulerState>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d001      	beq.n	8000fc8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000fc4:	f005 f930 	bl	8006228 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <USART1_IRQHandler+0x10>)
 8000fd2:	f002 fba1 	bl	8003718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200007a8 	.word	0x200007a8

08000fe0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e00a      	b.n	8001008 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ff2:	f3af 8000 	nop.w
 8000ff6:	4601      	mov	r1, r0
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	60ba      	str	r2, [r7, #8]
 8000ffe:	b2ca      	uxtb	r2, r1
 8001000:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	dbf0      	blt.n	8000ff2 <_read+0x12>
  }

  return len;
 8001010:	687b      	ldr	r3, [r7, #4]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	e009      	b.n	8001040 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	60ba      	str	r2, [r7, #8]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fb7b 	bl	8000730 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf1      	blt.n	800102c <_write+0x12>
  }
  return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_close>:

int _close(int file)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800107a:	605a      	str	r2, [r3, #4]
  return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_isatty>:

int _isatty(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	@ (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f005 fe6e 	bl	8006dcc <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20050000 	.word	0x20050000
 800111c:	00000800 	.word	0x00000800
 8001120:	20000758 	.word	0x20000758
 8001124:	200082d8 	.word	0x200082d8

08001128 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <SystemInit+0x20>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001132:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <SystemInit+0x20>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116a:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_TIM2_Init+0x98>)
 800116c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001170:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001172:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <MX_TIM2_Init+0x98>)
 8001174:	226b      	movs	r2, #107	@ 0x6b
 8001176:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <MX_TIM2_Init+0x98>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <MX_TIM2_Init+0x98>)
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <MX_TIM2_Init+0x98>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <MX_TIM2_Init+0x98>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001192:	4814      	ldr	r0, [pc, #80]	@ (80011e4 <MX_TIM2_Init+0x98>)
 8001194:	f001 fdba 	bl	8002d0c <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800119e:	f7ff fc91 	bl	8000ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <MX_TIM2_Init+0x98>)
 80011b0:	f001 fe74 	bl	8002e9c <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011ba:	f7ff fc83 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	@ (80011e4 <MX_TIM2_Init+0x98>)
 80011cc:	f002 f876 	bl	80032bc <HAL_TIMEx_MasterConfigSynchronization>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011d6:	f7ff fc75 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000075c 	.word	0x2000075c

080011e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011f8:	d10b      	bne.n	8001212 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <HAL_TIM_Base_MspInit+0x38>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	4a08      	ldr	r2, [pc, #32]	@ (8001220 <HAL_TIM_Base_MspInit+0x38>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_TIM_Base_MspInit+0x38>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_USART1_UART_Init+0x58>)
 800122a:	4a15      	ldr	r2, [pc, #84]	@ (8001280 <MX_USART1_UART_Init+0x5c>)
 800122c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_USART1_UART_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_USART1_UART_Init+0x58>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <MX_USART1_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001268:	f002 f8b6 	bl	80033d8 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001272:	f7ff fc27 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200007a8 	.word	0x200007a8
 8001280:	40011000 	.word	0x40011000

08001284 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0ac      	sub	sp, #176	@ 0xb0
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800129c:	f107 0318 	add.w	r3, r7, #24
 80012a0:	2284      	movs	r2, #132	@ 0x84
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f005 fce5 	bl	8006c74 <memset>
  if(uartHandle->Instance==USART1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a36      	ldr	r2, [pc, #216]	@ (8001388 <HAL_UART_MspInit+0x104>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d164      	bne.n	800137e <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012b4:	2340      	movs	r3, #64	@ 0x40
 80012b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012b8:	2300      	movs	r3, #0
 80012ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 f933 	bl	800252c <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012cc:	f7ff fbfa 	bl	8000ac4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d0:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <HAL_UART_MspInit+0x108>)
 80012d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d4:	4a2d      	ldr	r2, [pc, #180]	@ (800138c <HAL_UART_MspInit+0x108>)
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	6453      	str	r3, [r2, #68]	@ 0x44
 80012dc:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <HAL_UART_MspInit+0x108>)
 80012de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b28      	ldr	r3, [pc, #160]	@ (800138c <HAL_UART_MspInit+0x108>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	4a27      	ldr	r2, [pc, #156]	@ (800138c <HAL_UART_MspInit+0x108>)
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f4:	4b25      	ldr	r3, [pc, #148]	@ (800138c <HAL_UART_MspInit+0x108>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b22      	ldr	r3, [pc, #136]	@ (800138c <HAL_UART_MspInit+0x108>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001304:	4a21      	ldr	r2, [pc, #132]	@ (800138c <HAL_UART_MspInit+0x108>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6313      	str	r3, [r2, #48]	@ 0x30
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <HAL_UART_MspInit+0x108>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001318:	2380      	movs	r3, #128	@ 0x80
 800131a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001330:	2307      	movs	r3, #7
 8001332:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800133a:	4619      	mov	r1, r3
 800133c:	4814      	ldr	r0, [pc, #80]	@ (8001390 <HAL_UART_MspInit+0x10c>)
 800133e:	f000 fa55 	bl	80017ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001342:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001346:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800135c:	2307      	movs	r3, #7
 800135e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001366:	4619      	mov	r1, r3
 8001368:	480a      	ldr	r0, [pc, #40]	@ (8001394 <HAL_UART_MspInit+0x110>)
 800136a:	f000 fa3f 	bl	80017ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2105      	movs	r1, #5
 8001372:	2025      	movs	r0, #37	@ 0x25
 8001374:	f000 f971 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001378:	2025      	movs	r0, #37	@ 0x25
 800137a:	f000 f98a 	bl	8001692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800137e:	bf00      	nop
 8001380:	37b0      	adds	r7, #176	@ 0xb0
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40011000 	.word	0x40011000
 800138c:	40023800 	.word	0x40023800
 8001390:	40020400 	.word	0x40020400
 8001394:	40020000 	.word	0x40020000

08001398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800139c:	f7ff fec4 	bl	8001128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	@ (80013e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013c6:	f005 fd07 	bl	8006dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ca:	f7ff faad 	bl	8000928 <main>
  bx  lr    
 80013ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013dc:	080080ec 	.word	0x080080ec
  ldr r2, =_sbss
 80013e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013e4:	200082d4 	.word	0x200082d4

080013e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC_IRQHandler>

080013ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ee:	2003      	movs	r0, #3
 80013f0:	f000 f928 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f4:	200f      	movs	r0, #15
 80013f6:	f000 f805 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013fa:	f7ff fd97 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <HAL_InitTick+0x54>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_InitTick+0x58>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f943 	bl	80016ae <HAL_SYSTICK_Config>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00e      	b.n	8001450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d80a      	bhi.n	800144e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 f90b 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4a06      	ldr	r2, [pc, #24]	@ (8001460 <HAL_InitTick+0x5c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000008 	.word	0x20000008
 800145c:	20000010 	.word	0x20000010
 8001460:	2000000c 	.word	0x2000000c

08001464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_IncTick+0x20>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <HAL_IncTick+0x24>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <HAL_IncTick+0x24>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000010 	.word	0x20000010
 8001488:	20000830 	.word	0x20000830

0800148c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <HAL_GetTick+0x14>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000830 	.word	0x20000830

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x40>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x40>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00
 80014e8:	05fa0000 	.word	0x05fa0000

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4907      	ldr	r1, [pc, #28]	@ (8001540 <__NVIC_EnableIRQ+0x38>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	@ (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	@ (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	@ 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	@ 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff8e 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff29 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff3e 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff8e 	bl	8001598 <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5d 	bl	8001544 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff31 	bl	8001508 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa2 	bl	8001600 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff feda 	bl	800148c <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d008      	beq.n	80016f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2280      	movs	r2, #128	@ 0x80
 80016ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e052      	b.n	800179e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0216 	bic.w	r2, r2, #22
 8001706:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001716:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d103      	bne.n	8001728 <HAL_DMA_Abort+0x62>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0208 	bic.w	r2, r2, #8
 8001736:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0201 	bic.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001748:	e013      	b.n	8001772 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800174a:	f7ff fe9f 	bl	800148c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b05      	cmp	r3, #5
 8001756:	d90c      	bls.n	8001772 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2220      	movs	r2, #32
 800175c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2203      	movs	r2, #3
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e015      	b.n	800179e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e4      	bne.n	800174a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001784:	223f      	movs	r2, #63	@ 0x3f
 8001786:	409a      	lsls	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d004      	beq.n	80017c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2280      	movs	r2, #128	@ 0x80
 80017be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e00c      	b.n	80017de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2205      	movs	r2, #5
 80017c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	@ 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	e175      	b.n	8001af8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800180c:	2201      	movs	r2, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	429a      	cmp	r2, r3
 8001826:	f040 8164 	bne.w	8001af2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d005      	beq.n	8001842 <HAL_GPIO_Init+0x56>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d130      	bne.n	80018a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	2203      	movs	r2, #3
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001878:	2201      	movs	r2, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	091b      	lsrs	r3, r3, #4
 800188e:	f003 0201 	and.w	r2, r3, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d017      	beq.n	80018e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d123      	bne.n	8001934 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	08da      	lsrs	r2, r3, #3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3208      	adds	r2, #8
 80018f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	08da      	lsrs	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3208      	adds	r2, #8
 800192e:	69b9      	ldr	r1, [r7, #24]
 8001930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0203 	and.w	r2, r3, #3
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80be 	beq.w	8001af2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	4b66      	ldr	r3, [pc, #408]	@ (8001b10 <HAL_GPIO_Init+0x324>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a65      	ldr	r2, [pc, #404]	@ (8001b10 <HAL_GPIO_Init+0x324>)
 800197c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
 8001982:	4b63      	ldr	r3, [pc, #396]	@ (8001b10 <HAL_GPIO_Init+0x324>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800198e:	4a61      	ldr	r2, [pc, #388]	@ (8001b14 <HAL_GPIO_Init+0x328>)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3302      	adds	r3, #2
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	220f      	movs	r2, #15
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a58      	ldr	r2, [pc, #352]	@ (8001b18 <HAL_GPIO_Init+0x32c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d037      	beq.n	8001a2a <HAL_GPIO_Init+0x23e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a57      	ldr	r2, [pc, #348]	@ (8001b1c <HAL_GPIO_Init+0x330>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d031      	beq.n	8001a26 <HAL_GPIO_Init+0x23a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a56      	ldr	r2, [pc, #344]	@ (8001b20 <HAL_GPIO_Init+0x334>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d02b      	beq.n	8001a22 <HAL_GPIO_Init+0x236>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a55      	ldr	r2, [pc, #340]	@ (8001b24 <HAL_GPIO_Init+0x338>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d025      	beq.n	8001a1e <HAL_GPIO_Init+0x232>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a54      	ldr	r2, [pc, #336]	@ (8001b28 <HAL_GPIO_Init+0x33c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d01f      	beq.n	8001a1a <HAL_GPIO_Init+0x22e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a53      	ldr	r2, [pc, #332]	@ (8001b2c <HAL_GPIO_Init+0x340>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d019      	beq.n	8001a16 <HAL_GPIO_Init+0x22a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a52      	ldr	r2, [pc, #328]	@ (8001b30 <HAL_GPIO_Init+0x344>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0x226>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a51      	ldr	r2, [pc, #324]	@ (8001b34 <HAL_GPIO_Init+0x348>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00d      	beq.n	8001a0e <HAL_GPIO_Init+0x222>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a50      	ldr	r2, [pc, #320]	@ (8001b38 <HAL_GPIO_Init+0x34c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d007      	beq.n	8001a0a <HAL_GPIO_Init+0x21e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4f      	ldr	r2, [pc, #316]	@ (8001b3c <HAL_GPIO_Init+0x350>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_GPIO_Init+0x21a>
 8001a02:	2309      	movs	r3, #9
 8001a04:	e012      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a06:	230a      	movs	r3, #10
 8001a08:	e010      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	e00e      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a0e:	2307      	movs	r3, #7
 8001a10:	e00c      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a12:	2306      	movs	r3, #6
 8001a14:	e00a      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a16:	2305      	movs	r3, #5
 8001a18:	e008      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e004      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e002      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x240>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	f002 0203 	and.w	r2, r2, #3
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	4093      	lsls	r3, r2
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a3c:	4935      	ldr	r1, [pc, #212]	@ (8001b14 <HAL_GPIO_Init+0x328>)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6e:	4a34      	ldr	r2, [pc, #208]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a74:	4b32      	ldr	r3, [pc, #200]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a98:	4a29      	ldr	r2, [pc, #164]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a9e:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aec:	4a14      	ldr	r2, [pc, #80]	@ (8001b40 <HAL_GPIO_Init+0x354>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3301      	adds	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	2b0f      	cmp	r3, #15
 8001afc:	f67f ae86 	bls.w	800180c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3724      	adds	r7, #36	@ 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40013800 	.word	0x40013800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020c00 	.word	0x40020c00
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40021400 	.word	0x40021400
 8001b30:	40021800 	.word	0x40021800
 8001b34:	40021c00 	.word	0x40021c00
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	40022400 	.word	0x40022400
 8001b40:	40013c00 	.word	0x40013c00

08001b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b60:	e003      	b.n	8001b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	041a      	lsls	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	619a      	str	r2, [r3, #24]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b23      	ldr	r3, [pc, #140]	@ (8001c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	4a22      	ldr	r2, [pc, #136]	@ (8001c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8e:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba6:	f7ff fc71 	bl	800148c <HAL_GetTick>
 8001baa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bac:	e009      	b.n	8001bc2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bae:	f7ff fc6d 	bl	800148c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bbc:	d901      	bls.n	8001bc2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e022      	b.n	8001c08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bc2:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bce:	d1ee      	bne.n	8001bae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001bd0:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bdc:	f7ff fc56 	bl	800148c <HAL_GetTick>
 8001be0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001be2:	e009      	b.n	8001bf8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001be4:	f7ff fc52 	bl	800148c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bf2:	d901      	bls.n	8001bf8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e007      	b.n	8001c08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c04:	d1ee      	bne.n	8001be4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40007000 	.word	0x40007000

08001c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e291      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8087 	beq.w	8001d4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c3c:	4b96      	ldr	r3, [pc, #600]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d00c      	beq.n	8001c62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c48:	4b93      	ldr	r3, [pc, #588]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d112      	bne.n	8001c7a <HAL_RCC_OscConfig+0x62>
 8001c54:	4b90      	ldr	r3, [pc, #576]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c60:	d10b      	bne.n	8001c7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c62:	4b8d      	ldr	r3, [pc, #564]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d06c      	beq.n	8001d48 <HAL_RCC_OscConfig+0x130>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d168      	bne.n	8001d48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e26b      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x7a>
 8001c84:	4b84      	ldr	r3, [pc, #528]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a83      	ldr	r2, [pc, #524]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	e02e      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd8>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x9c>
 8001c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7b      	ldr	r2, [pc, #492]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001cac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e01d      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xc0>
 8001cbe:	4b76      	ldr	r3, [pc, #472]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a75      	ldr	r2, [pc, #468]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b73      	ldr	r3, [pc, #460]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a72      	ldr	r2, [pc, #456]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0xd8>
 8001cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6e      	ldr	r2, [pc, #440]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b6c      	ldr	r3, [pc, #432]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a6b      	ldr	r2, [pc, #428]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d013      	beq.n	8001d20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fbc8 	bl	800148c <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fbc4 	bl	800148c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	@ 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e21f      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b61      	ldr	r3, [pc, #388]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0xe8>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff fbb4 	bl	800148c <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fbb0 	bl	800148c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	@ 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e20b      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	4b57      	ldr	r3, [pc, #348]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x110>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d069      	beq.n	8001e2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d56:	4b50      	ldr	r3, [pc, #320]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d62:	4b4d      	ldr	r3, [pc, #308]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d11c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x190>
 8001d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	4b47      	ldr	r3, [pc, #284]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x17a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1df      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4b41      	ldr	r3, [pc, #260]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	493d      	ldr	r1, [pc, #244]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e040      	b.n	8001e2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d023      	beq.n	8001df8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db0:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a38      	ldr	r2, [pc, #224]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fb66 	bl	800148c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fb62 	bl	800148c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e1bd      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b30      	ldr	r3, [pc, #192]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4929      	ldr	r1, [pc, #164]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
 8001df6:	e018      	b.n	8001e2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df8:	4b27      	ldr	r3, [pc, #156]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a26      	ldr	r2, [pc, #152]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff fb42 	bl	800148c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fb3e 	bl	800148c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e199      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d038      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d019      	beq.n	8001e72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3e:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e42:	4a15      	ldr	r2, [pc, #84]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fb1f 	bl	800148c <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e52:	f7ff fb1b 	bl	800148c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e176      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x23a>
 8001e70:	e01a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e72:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e76:	4a08      	ldr	r2, [pc, #32]	@ (8001e98 <HAL_RCC_OscConfig+0x280>)
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fb05 	bl	800148c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff fb01 	bl	800148c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d903      	bls.n	8001e9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e15c      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
 8001e98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9c:	4b91      	ldr	r3, [pc, #580]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1ee      	bne.n	8001e86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80a4 	beq.w	8001ffe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb6:	4b8b      	ldr	r3, [pc, #556]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10d      	bne.n	8001ede <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	4b88      	ldr	r3, [pc, #544]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	4a87      	ldr	r2, [pc, #540]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ece:	4b85      	ldr	r3, [pc, #532]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ede:	4b82      	ldr	r3, [pc, #520]	@ (80020e8 <HAL_RCC_OscConfig+0x4d0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001eea:	4b7f      	ldr	r3, [pc, #508]	@ (80020e8 <HAL_RCC_OscConfig+0x4d0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a7e      	ldr	r2, [pc, #504]	@ (80020e8 <HAL_RCC_OscConfig+0x4d0>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fac9 	bl	800148c <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7ff fac5 	bl	800148c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b64      	cmp	r3, #100	@ 0x64
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e120      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f10:	4b75      	ldr	r3, [pc, #468]	@ (80020e8 <HAL_RCC_OscConfig+0x4d0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x31a>
 8001f24:	4b6f      	ldr	r3, [pc, #444]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f28:	4a6e      	ldr	r2, [pc, #440]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f30:	e02d      	b.n	8001f8e <HAL_RCC_OscConfig+0x376>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x33c>
 8001f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3e:	4a69      	ldr	r2, [pc, #420]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f46:	4b67      	ldr	r3, [pc, #412]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4a:	4a66      	ldr	r2, [pc, #408]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f52:	e01c      	b.n	8001f8e <HAL_RCC_OscConfig+0x376>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d10c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x35e>
 8001f5c:	4b61      	ldr	r3, [pc, #388]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f60:	4a60      	ldr	r2, [pc, #384]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f68:	4b5e      	ldr	r3, [pc, #376]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f74:	e00b      	b.n	8001f8e <HAL_RCC_OscConfig+0x376>
 8001f76:	4b5b      	ldr	r3, [pc, #364]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7a:	4a5a      	ldr	r2, [pc, #360]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f82:	4b58      	ldr	r3, [pc, #352]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f86:	4a57      	ldr	r2, [pc, #348]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d015      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f96:	f7ff fa79 	bl	800148c <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7ff fa75 	bl	800148c <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e0ce      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ee      	beq.n	8001f9e <HAL_RCC_OscConfig+0x386>
 8001fc0:	e014      	b.n	8001fec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fa63 	bl	800148c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff fa5f 	bl	800148c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e0b8      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	4b40      	ldr	r3, [pc, #256]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ee      	bne.n	8001fca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d105      	bne.n	8001ffe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	4a3b      	ldr	r2, [pc, #236]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8001ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ffc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80a4 	beq.w	8002150 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002008:	4b36      	ldr	r3, [pc, #216]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d06b      	beq.n	80020ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d149      	bne.n	80020b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b31      	ldr	r3, [pc, #196]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a30      	ldr	r2, [pc, #192]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8002022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff fa30 	bl	800148c <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7ff fa2c 	bl	800148c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e087      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002042:	4b28      	ldr	r3, [pc, #160]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69da      	ldr	r2, [r3, #28]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	019b      	lsls	r3, r3, #6
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002064:	085b      	lsrs	r3, r3, #1
 8002066:	3b01      	subs	r3, #1
 8002068:	041b      	lsls	r3, r3, #16
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	061b      	lsls	r3, r3, #24
 8002072:	4313      	orrs	r3, r2
 8002074:	4a1b      	ldr	r2, [pc, #108]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8002076:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800207a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a18      	ldr	r2, [pc, #96]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 8002082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff fa00 	bl	800148c <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7ff f9fc 	bl	800148c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e057      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x478>
 80020ae:	e04f      	b.n	8002150 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b0:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0b      	ldr	r2, [pc, #44]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 80020b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff f9e6 	bl	800148c <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7ff f9e2 	bl	800148c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e03d      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d6:	4b03      	ldr	r3, [pc, #12]	@ (80020e4 <HAL_RCC_OscConfig+0x4cc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4ac>
 80020e2:	e035      	b.n	8002150 <HAL_RCC_OscConfig+0x538>
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80020ec:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <HAL_RCC_OscConfig+0x544>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d028      	beq.n	800214c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d121      	bne.n	800214c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d11a      	bne.n	800214c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800211c:	4013      	ands	r3, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002122:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002124:	4293      	cmp	r3, r2
 8002126:	d111      	bne.n	800214c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002132:	085b      	lsrs	r3, r3, #1
 8002134:	3b01      	subs	r3, #1
 8002136:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d107      	bne.n	800214c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0d0      	b.n	800231a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002178:	4b6a      	ldr	r3, [pc, #424]	@ (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d910      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b67      	ldr	r3, [pc, #412]	@ (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 020f 	bic.w	r2, r3, #15
 800218e:	4965      	ldr	r1, [pc, #404]	@ (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b63      	ldr	r3, [pc, #396]	@ (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0b8      	b.n	800231a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d020      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c0:	4b59      	ldr	r3, [pc, #356]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4a58      	ldr	r2, [pc, #352]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 80021c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021d8:	4b53      	ldr	r3, [pc, #332]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a52      	ldr	r2, [pc, #328]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 80021de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4b50      	ldr	r3, [pc, #320]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	494d      	ldr	r1, [pc, #308]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d040      	beq.n	8002284 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b47      	ldr	r3, [pc, #284]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d115      	bne.n	8002242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e07f      	b.n	800231a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002222:	4b41      	ldr	r3, [pc, #260]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e073      	b.n	800231a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002232:	4b3d      	ldr	r3, [pc, #244]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06b      	b.n	800231a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002242:	4b39      	ldr	r3, [pc, #228]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f023 0203 	bic.w	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4936      	ldr	r1, [pc, #216]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 8002250:	4313      	orrs	r3, r2
 8002252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002254:	f7ff f91a 	bl	800148c <HAL_GetTick>
 8002258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	e00a      	b.n	8002272 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225c:	f7ff f916 	bl	800148c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e053      	b.n	800231a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	4b2d      	ldr	r3, [pc, #180]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 020c 	and.w	r2, r3, #12
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	429a      	cmp	r2, r3
 8002282:	d1eb      	bne.n	800225c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002284:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d210      	bcs.n	80022b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b24      	ldr	r3, [pc, #144]	@ (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 020f 	bic.w	r2, r3, #15
 800229a:	4922      	ldr	r1, [pc, #136]	@ (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a2:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e032      	b.n	800231a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c0:	4b19      	ldr	r3, [pc, #100]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4916      	ldr	r1, [pc, #88]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022de:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	490e      	ldr	r1, [pc, #56]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022f2:	f000 f821 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80022f6:	4602      	mov	r2, r0
 80022f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	490a      	ldr	r1, [pc, #40]	@ (800232c <HAL_RCC_ClockConfig+0x1cc>)
 8002304:	5ccb      	ldrb	r3, [r1, r3]
 8002306:	fa22 f303 	lsr.w	r3, r2, r3
 800230a:	4a09      	ldr	r2, [pc, #36]	@ (8002330 <HAL_RCC_ClockConfig+0x1d0>)
 800230c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800230e:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <HAL_RCC_ClockConfig+0x1d4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff f876 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023c00 	.word	0x40023c00
 8002328:	40023800 	.word	0x40023800
 800232c:	08007f90 	.word	0x08007f90
 8002330:	20000008 	.word	0x20000008
 8002334:	2000000c 	.word	0x2000000c

08002338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800233c:	b090      	sub	sp, #64	@ 0x40
 800233e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	637b      	str	r3, [r7, #52]	@ 0x34
 8002344:	2300      	movs	r3, #0
 8002346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002348:	2300      	movs	r3, #0
 800234a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002350:	4b59      	ldr	r3, [pc, #356]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b08      	cmp	r3, #8
 800235a:	d00d      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x40>
 800235c:	2b08      	cmp	r3, #8
 800235e:	f200 80a1 	bhi.w	80024a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x34>
 8002366:	2b04      	cmp	r3, #4
 8002368:	d003      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x3a>
 800236a:	e09b      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800236c:	4b53      	ldr	r3, [pc, #332]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x184>)
 800236e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002370:	e09b      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002372:	4b53      	ldr	r3, [pc, #332]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002374:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002376:	e098      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002378:	4b4f      	ldr	r3, [pc, #316]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002380:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002382:	4b4d      	ldr	r3, [pc, #308]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d028      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800238e:	4b4a      	ldr	r3, [pc, #296]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	099b      	lsrs	r3, r3, #6
 8002394:	2200      	movs	r2, #0
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	627a      	str	r2, [r7, #36]	@ 0x24
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023a0:	2100      	movs	r1, #0
 80023a2:	4b47      	ldr	r3, [pc, #284]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80023a4:	fb03 f201 	mul.w	r2, r3, r1
 80023a8:	2300      	movs	r3, #0
 80023aa:	fb00 f303 	mul.w	r3, r0, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	4a43      	ldr	r2, [pc, #268]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80023b2:	fba0 1202 	umull	r1, r2, r0, r2
 80023b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023b8:	460a      	mov	r2, r1
 80023ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80023bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023be:	4413      	add	r3, r2
 80023c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c4:	2200      	movs	r2, #0
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	61fa      	str	r2, [r7, #28]
 80023ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023d2:	f7fd ff75 	bl	80002c0 <__aeabi_uldivmod>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4613      	mov	r3, r2
 80023dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023de:	e053      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e0:	4b35      	ldr	r3, [pc, #212]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	099b      	lsrs	r3, r3, #6
 80023e6:	2200      	movs	r2, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	617a      	str	r2, [r7, #20]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023f2:	f04f 0b00 	mov.w	fp, #0
 80023f6:	4652      	mov	r2, sl
 80023f8:	465b      	mov	r3, fp
 80023fa:	f04f 0000 	mov.w	r0, #0
 80023fe:	f04f 0100 	mov.w	r1, #0
 8002402:	0159      	lsls	r1, r3, #5
 8002404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002408:	0150      	lsls	r0, r2, #5
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	ebb2 080a 	subs.w	r8, r2, sl
 8002412:	eb63 090b 	sbc.w	r9, r3, fp
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002422:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002426:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800242a:	ebb2 0408 	subs.w	r4, r2, r8
 800242e:	eb63 0509 	sbc.w	r5, r3, r9
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	00eb      	lsls	r3, r5, #3
 800243c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002440:	00e2      	lsls	r2, r4, #3
 8002442:	4614      	mov	r4, r2
 8002444:	461d      	mov	r5, r3
 8002446:	eb14 030a 	adds.w	r3, r4, sl
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	eb45 030b 	adc.w	r3, r5, fp
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800245e:	4629      	mov	r1, r5
 8002460:	028b      	lsls	r3, r1, #10
 8002462:	4621      	mov	r1, r4
 8002464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002468:	4621      	mov	r1, r4
 800246a:	028a      	lsls	r2, r1, #10
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002472:	2200      	movs	r2, #0
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	60fa      	str	r2, [r7, #12]
 8002478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800247c:	f7fd ff20 	bl	80002c0 <__aeabi_uldivmod>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4613      	mov	r3, r2
 8002486:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002488:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	0c1b      	lsrs	r3, r3, #16
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	3301      	adds	r3, #1
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002498:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800249a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249c:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024a2:	e002      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024a4:	4b05      	ldr	r3, [pc, #20]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x184>)
 80024a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3740      	adds	r7, #64	@ 0x40
 80024b0:	46bd      	mov	sp, r7
 80024b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	00f42400 	.word	0x00f42400
 80024c0:	017d7840 	.word	0x017d7840

080024c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c8:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000008 	.word	0x20000008

080024dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024e0:	f7ff fff0 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	0a9b      	lsrs	r3, r3, #10
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	4903      	ldr	r1, [pc, #12]	@ (8002500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800
 8002500:	08007fa0 	.word	0x08007fa0

08002504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002508:	f7ff ffdc 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	0b5b      	lsrs	r3, r3, #13
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4903      	ldr	r1, [pc, #12]	@ (8002528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40023800 	.word	0x40023800
 8002528:	08007fa0 	.word	0x08007fa0

0800252c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d012      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002554:	4b69      	ldr	r3, [pc, #420]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4a68      	ldr	r2, [pc, #416]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800255e:	6093      	str	r3, [r2, #8]
 8002560:	4b66      	ldr	r3, [pc, #408]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002568:	4964      	ldr	r1, [pc, #400]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002576:	2301      	movs	r3, #1
 8002578:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d017      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002586:	4b5d      	ldr	r3, [pc, #372]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800258c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002594:	4959      	ldr	r1, [pc, #356]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025a4:	d101      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d017      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025c2:	4b4e      	ldr	r3, [pc, #312]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025c8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	494a      	ldr	r1, [pc, #296]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025e0:	d101      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025e2:	2301      	movs	r3, #1
 80025e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80025ee:	2301      	movs	r3, #1
 80025f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80025fe:	2301      	movs	r3, #1
 8002600:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 808b 	beq.w	8002726 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	4b3a      	ldr	r3, [pc, #232]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	4a39      	ldr	r2, [pc, #228]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800261a:	6413      	str	r3, [r2, #64]	@ 0x40
 800261c:	4b37      	ldr	r3, [pc, #220]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002628:	4b35      	ldr	r3, [pc, #212]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a34      	ldr	r2, [pc, #208]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800262e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002634:	f7fe ff2a 	bl	800148c <HAL_GetTick>
 8002638:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263c:	f7fe ff26 	bl	800148c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	@ 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e357      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800264e:	4b2c      	ldr	r3, [pc, #176]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800265a:	4b28      	ldr	r3, [pc, #160]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002662:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d035      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	429a      	cmp	r2, r3
 8002676:	d02e      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002678:	4b20      	ldr	r3, [pc, #128]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002680:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002682:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002686:	4a1d      	ldr	r2, [pc, #116]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800268e:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002692:	4a1a      	ldr	r2, [pc, #104]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002698:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800269a:	4a18      	ldr	r2, [pc, #96]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026a0:	4b16      	ldr	r3, [pc, #88]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d114      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe feee 	bl	800148c <HAL_GetTick>
 80026b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b2:	e00a      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b4:	f7fe feea 	bl	800148c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e319      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ca:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0ee      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026e2:	d111      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026f0:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026f2:	400b      	ands	r3, r1
 80026f4:	4901      	ldr	r1, [pc, #4]	@ (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
 80026fa:	e00b      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80026fc:	40023800 	.word	0x40023800
 8002700:	40007000 	.word	0x40007000
 8002704:	0ffffcff 	.word	0x0ffffcff
 8002708:	4baa      	ldr	r3, [pc, #680]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4aa9      	ldr	r2, [pc, #676]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800270e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002712:	6093      	str	r3, [r2, #8]
 8002714:	4ba7      	ldr	r3, [pc, #668]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002716:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002720:	49a4      	ldr	r1, [pc, #656]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002722:	4313      	orrs	r3, r2
 8002724:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	d010      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002732:	4ba0      	ldr	r3, [pc, #640]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002738:	4a9e      	ldr	r2, [pc, #632]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800273e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002742:	4b9c      	ldr	r3, [pc, #624]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002744:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274c:	4999      	ldr	r1, [pc, #612]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002760:	4b94      	ldr	r3, [pc, #592]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002766:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800276e:	4991      	ldr	r1, [pc, #580]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002782:	4b8c      	ldr	r3, [pc, #560]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002788:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002790:	4988      	ldr	r1, [pc, #544]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027a4:	4b83      	ldr	r3, [pc, #524]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027b2:	4980      	ldr	r1, [pc, #512]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027c6:	4b7b      	ldr	r3, [pc, #492]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d4:	4977      	ldr	r1, [pc, #476]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027e8:	4b72      	ldr	r3, [pc, #456]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	496f      	ldr	r1, [pc, #444]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800280a:	4b6a      	ldr	r3, [pc, #424]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002810:	f023 020c 	bic.w	r2, r3, #12
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002818:	4966      	ldr	r1, [pc, #408]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800282c:	4b61      	ldr	r3, [pc, #388]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002832:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283a:	495e      	ldr	r1, [pc, #376]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800284e:	4b59      	ldr	r3, [pc, #356]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002854:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800285c:	4955      	ldr	r1, [pc, #340]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002870:	4b50      	ldr	r3, [pc, #320]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002876:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287e:	494d      	ldr	r1, [pc, #308]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002892:	4b48      	ldr	r3, [pc, #288]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002898:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a0:	4944      	ldr	r1, [pc, #272]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028b4:	4b3f      	ldr	r3, [pc, #252]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	493c      	ldr	r1, [pc, #240]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028d6:	4b37      	ldr	r3, [pc, #220]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e4:	4933      	ldr	r1, [pc, #204]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028f8:	4b2e      	ldr	r3, [pc, #184]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002906:	492b      	ldr	r1, [pc, #172]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d011      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800291a:	4b26      	ldr	r3, [pc, #152]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002920:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002928:	4922      	ldr	r1, [pc, #136]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002934:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002938:	d101      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800293a:	2301      	movs	r3, #1
 800293c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800294a:	2301      	movs	r3, #1
 800294c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800295a:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002960:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002968:	4912      	ldr	r1, [pc, #72]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00b      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800297c:	4b0d      	ldr	r3, [pc, #52]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002982:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800298c:	4909      	ldr	r1, [pc, #36]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d006      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80d9 	beq.w	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029a8:	4b02      	ldr	r3, [pc, #8]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a01      	ldr	r2, [pc, #4]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029b2:	e001      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80029b4:	40023800 	.word	0x40023800
 80029b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ba:	f7fe fd67 	bl	800148c <HAL_GetTick>
 80029be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029c2:	f7fe fd63 	bl	800148c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b64      	cmp	r3, #100	@ 0x64
 80029ce:	d901      	bls.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e194      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d021      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d11d      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029f4:	4b64      	ldr	r3, [pc, #400]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029fa:	0c1b      	lsrs	r3, r3, #16
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a02:	4b61      	ldr	r3, [pc, #388]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a08:	0e1b      	lsrs	r3, r3, #24
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	019a      	lsls	r2, r3, #6
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	061b      	lsls	r3, r3, #24
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	071b      	lsls	r3, r3, #28
 8002a28:	4957      	ldr	r1, [pc, #348]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d004      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d02e      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a5a:	d129      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a62:	0c1b      	lsrs	r3, r3, #16
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a6a:	4b47      	ldr	r3, [pc, #284]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a70:	0f1b      	lsrs	r3, r3, #28
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	019a      	lsls	r2, r3, #6
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	071b      	lsls	r3, r3, #28
 8002a90:	493d      	ldr	r1, [pc, #244]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a98:	4b3b      	ldr	r3, [pc, #236]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a9e:	f023 021f 	bic.w	r2, r3, #31
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	4937      	ldr	r1, [pc, #220]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01d      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002abc:	4b32      	ldr	r3, [pc, #200]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ac2:	0e1b      	lsrs	r3, r3, #24
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aca:	4b2f      	ldr	r3, [pc, #188]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ad0:	0f1b      	lsrs	r3, r3, #28
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	019a      	lsls	r2, r3, #6
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	041b      	lsls	r3, r3, #16
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	431a      	orrs	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	071b      	lsls	r3, r3, #28
 8002af0:	4925      	ldr	r1, [pc, #148]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d011      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	019a      	lsls	r2, r3, #6
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	041b      	lsls	r3, r3, #16
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	061b      	lsls	r3, r3, #24
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	071b      	lsls	r3, r3, #28
 8002b20:	4919      	ldr	r1, [pc, #100]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b28:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a16      	ldr	r2, [pc, #88]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b34:	f7fe fcaa 	bl	800148c <HAL_GetTick>
 8002b38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b3c:	f7fe fca6 	bl	800148c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	@ 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0d7      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	f040 80cd 	bne.w	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b62:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a08      	ldr	r2, [pc, #32]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6e:	f7fe fc8d 	bl	800148c <HAL_GetTick>
 8002b72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b76:	f7fe fc89 	bl	800148c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	@ 0x64
 8002b82:	d903      	bls.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e0ba      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002b88:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b98:	d0ed      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d02e      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d12a      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bc2:	4b51      	ldr	r3, [pc, #324]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd6:	0f1b      	lsrs	r3, r3, #28
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	019a      	lsls	r2, r3, #6
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	041b      	lsls	r3, r3, #16
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	061b      	lsls	r3, r3, #24
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	071b      	lsls	r3, r3, #28
 8002bf6:	4944      	ldr	r1, [pc, #272]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bfe:	4b42      	ldr	r3, [pc, #264]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c04:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	493d      	ldr	r1, [pc, #244]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d022      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c2c:	d11d      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c2e:	4b36      	ldr	r3, [pc, #216]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c34:	0e1b      	lsrs	r3, r3, #24
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c3c:	4b32      	ldr	r3, [pc, #200]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c42:	0f1b      	lsrs	r3, r3, #28
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	019a      	lsls	r2, r3, #6
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	431a      	orrs	r2, r3
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	061b      	lsls	r3, r3, #24
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	071b      	lsls	r3, r3, #28
 8002c62:	4929      	ldr	r1, [pc, #164]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d028      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c76:	4b24      	ldr	r3, [pc, #144]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7c:	0e1b      	lsrs	r3, r3, #24
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c84:	4b20      	ldr	r3, [pc, #128]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8a:	0c1b      	lsrs	r3, r3, #16
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	019a      	lsls	r2, r3, #6
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	041b      	lsls	r3, r3, #16
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	071b      	lsls	r3, r3, #28
 8002caa:	4917      	ldr	r1, [pc, #92]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002cb2:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cb8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	4911      	ldr	r1, [pc, #68]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0e      	ldr	r2, [pc, #56]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd4:	f7fe fbda 	bl	800148c <HAL_GetTick>
 8002cd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cdc:	f7fe fbd6 	bl	800148c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	@ 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e007      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cfa:	d1ef      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3720      	adds	r7, #32
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800

08002d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e049      	b.n	8002db2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe fa58 	bl	80011e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	f000 f970 	bl	8003030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d001      	beq.n	8002dd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e04c      	b.n	8002e6e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a26      	ldr	r2, [pc, #152]	@ (8002e7c <HAL_TIM_Base_Start+0xc0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d022      	beq.n	8002e2c <HAL_TIM_Base_Start+0x70>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dee:	d01d      	beq.n	8002e2c <HAL_TIM_Base_Start+0x70>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a22      	ldr	r2, [pc, #136]	@ (8002e80 <HAL_TIM_Base_Start+0xc4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d018      	beq.n	8002e2c <HAL_TIM_Base_Start+0x70>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a21      	ldr	r2, [pc, #132]	@ (8002e84 <HAL_TIM_Base_Start+0xc8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d013      	beq.n	8002e2c <HAL_TIM_Base_Start+0x70>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1f      	ldr	r2, [pc, #124]	@ (8002e88 <HAL_TIM_Base_Start+0xcc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00e      	beq.n	8002e2c <HAL_TIM_Base_Start+0x70>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1e      	ldr	r2, [pc, #120]	@ (8002e8c <HAL_TIM_Base_Start+0xd0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d009      	beq.n	8002e2c <HAL_TIM_Base_Start+0x70>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8002e90 <HAL_TIM_Base_Start+0xd4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <HAL_TIM_Base_Start+0x70>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1b      	ldr	r2, [pc, #108]	@ (8002e94 <HAL_TIM_Base_Start+0xd8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d115      	bne.n	8002e58 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	4b19      	ldr	r3, [pc, #100]	@ (8002e98 <HAL_TIM_Base_Start+0xdc>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d015      	beq.n	8002e6a <HAL_TIM_Base_Start+0xae>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e44:	d011      	beq.n	8002e6a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e56:	e008      	b.n	8002e6a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	e000      	b.n	8002e6c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40000800 	.word	0x40000800
 8002e88:	40000c00 	.word	0x40000c00
 8002e8c:	40010400 	.word	0x40010400
 8002e90:	40014000 	.word	0x40014000
 8002e94:	40001800 	.word	0x40001800
 8002e98:	00010007 	.word	0x00010007

08002e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e0b4      	b.n	8003022 <HAL_TIM_ConfigClockSource+0x186>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	4b56      	ldr	r3, [pc, #344]	@ (800302c <HAL_TIM_ConfigClockSource+0x190>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ef0:	d03e      	beq.n	8002f70 <HAL_TIM_ConfigClockSource+0xd4>
 8002ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ef6:	f200 8087 	bhi.w	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002efe:	f000 8086 	beq.w	800300e <HAL_TIM_ConfigClockSource+0x172>
 8002f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f06:	d87f      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b70      	cmp	r3, #112	@ 0x70
 8002f0a:	d01a      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0xa6>
 8002f0c:	2b70      	cmp	r3, #112	@ 0x70
 8002f0e:	d87b      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b60      	cmp	r3, #96	@ 0x60
 8002f12:	d050      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x11a>
 8002f14:	2b60      	cmp	r3, #96	@ 0x60
 8002f16:	d877      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b50      	cmp	r3, #80	@ 0x50
 8002f1a:	d03c      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0xfa>
 8002f1c:	2b50      	cmp	r3, #80	@ 0x50
 8002f1e:	d873      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b40      	cmp	r3, #64	@ 0x40
 8002f22:	d058      	beq.n	8002fd6 <HAL_TIM_ConfigClockSource+0x13a>
 8002f24:	2b40      	cmp	r3, #64	@ 0x40
 8002f26:	d86f      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f28:	2b30      	cmp	r3, #48	@ 0x30
 8002f2a:	d064      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f2c:	2b30      	cmp	r3, #48	@ 0x30
 8002f2e:	d86b      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d060      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d867      	bhi.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d05c      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d05a      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f40:	e062      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f52:	f000 f993 	bl	800327c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	609a      	str	r2, [r3, #8]
      break;
 8002f6e:	e04f      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f80:	f000 f97c 	bl	800327c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f92:	609a      	str	r2, [r3, #8]
      break;
 8002f94:	e03c      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f000 f8f0 	bl	8003188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2150      	movs	r1, #80	@ 0x50
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f949 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002fb4:	e02c      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f000 f90f 	bl	80031e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2160      	movs	r1, #96	@ 0x60
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f939 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002fd4:	e01c      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f000 f8d0 	bl	8003188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2140      	movs	r1, #64	@ 0x40
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f929 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002ff4:	e00c      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4619      	mov	r1, r3
 8003000:	4610      	mov	r0, r2
 8003002:	f000 f920 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8003006:	e003      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      break;
 800300c:	e000      	b.n	8003010 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800300e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	fffeff88 	.word	0xfffeff88

08003030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a46      	ldr	r2, [pc, #280]	@ (800315c <TIM_Base_SetConfig+0x12c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <TIM_Base_SetConfig+0x40>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800304e:	d00f      	beq.n	8003070 <TIM_Base_SetConfig+0x40>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a43      	ldr	r2, [pc, #268]	@ (8003160 <TIM_Base_SetConfig+0x130>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00b      	beq.n	8003070 <TIM_Base_SetConfig+0x40>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a42      	ldr	r2, [pc, #264]	@ (8003164 <TIM_Base_SetConfig+0x134>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d007      	beq.n	8003070 <TIM_Base_SetConfig+0x40>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a41      	ldr	r2, [pc, #260]	@ (8003168 <TIM_Base_SetConfig+0x138>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <TIM_Base_SetConfig+0x40>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a40      	ldr	r2, [pc, #256]	@ (800316c <TIM_Base_SetConfig+0x13c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d108      	bne.n	8003082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a35      	ldr	r2, [pc, #212]	@ (800315c <TIM_Base_SetConfig+0x12c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d02b      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003090:	d027      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a32      	ldr	r2, [pc, #200]	@ (8003160 <TIM_Base_SetConfig+0x130>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d023      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a31      	ldr	r2, [pc, #196]	@ (8003164 <TIM_Base_SetConfig+0x134>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01f      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a30      	ldr	r2, [pc, #192]	@ (8003168 <TIM_Base_SetConfig+0x138>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01b      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a2f      	ldr	r2, [pc, #188]	@ (800316c <TIM_Base_SetConfig+0x13c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d017      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003170 <TIM_Base_SetConfig+0x140>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003174 <TIM_Base_SetConfig+0x144>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00f      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003178 <TIM_Base_SetConfig+0x148>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00b      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a2b      	ldr	r2, [pc, #172]	@ (800317c <TIM_Base_SetConfig+0x14c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003180 <TIM_Base_SetConfig+0x150>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a29      	ldr	r2, [pc, #164]	@ (8003184 <TIM_Base_SetConfig+0x154>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d108      	bne.n	80030f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a10      	ldr	r2, [pc, #64]	@ (800315c <TIM_Base_SetConfig+0x12c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d003      	beq.n	8003128 <TIM_Base_SetConfig+0xf8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a12      	ldr	r2, [pc, #72]	@ (800316c <TIM_Base_SetConfig+0x13c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d103      	bne.n	8003130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d105      	bne.n	800314e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f023 0201 	bic.w	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	611a      	str	r2, [r3, #16]
  }
}
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40010000 	.word	0x40010000
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800
 8003168:	40000c00 	.word	0x40000c00
 800316c:	40010400 	.word	0x40010400
 8003170:	40014000 	.word	0x40014000
 8003174:	40014400 	.word	0x40014400
 8003178:	40014800 	.word	0x40014800
 800317c:	40001800 	.word	0x40001800
 8003180:	40001c00 	.word	0x40001c00
 8003184:	40002000 	.word	0x40002000

08003188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f023 0201 	bic.w	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f023 030a 	bic.w	r3, r3, #10
 80031c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	621a      	str	r2, [r3, #32]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b087      	sub	sp, #28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f023 0210 	bic.w	r2, r3, #16
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	031b      	lsls	r3, r3, #12
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003222:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800325c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	f043 0307 	orr.w	r3, r3, #7
 8003268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	021a      	lsls	r2, r3, #8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	431a      	orrs	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	609a      	str	r2, [r3, #8]
}
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e06d      	b.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a30      	ldr	r2, [pc, #192]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2f      	ldr	r2, [pc, #188]	@ (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d108      	bne.n	800331a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800330e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003320:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a20      	ldr	r2, [pc, #128]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d022      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003346:	d01d      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1d      	ldr	r2, [pc, #116]	@ (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d018      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1c      	ldr	r2, [pc, #112]	@ (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d013      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1a      	ldr	r2, [pc, #104]	@ (80033cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00e      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a15      	ldr	r2, [pc, #84]	@ (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a16      	ldr	r2, [pc, #88]	@ (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a15      	ldr	r2, [pc, #84]	@ (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d10c      	bne.n	800339e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800338a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	4313      	orrs	r3, r2
 8003394:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40010400 	.word	0x40010400
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40000c00 	.word	0x40000c00
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40001800 	.word	0x40001800

080033d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e040      	b.n	800346c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fd ff42 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2224      	movs	r2, #36	@ 0x24
 8003404:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fed0 	bl	80041c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fc69 	bl	8003cfc <UART_SetConfig>
 800342a:	4603      	mov	r3, r0
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e01b      	b.n	800346c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003452:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 ff4f 	bl	8004308 <UART_CheckIdleState>
 800346a:	4603      	mov	r3, r0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08a      	sub	sp, #40	@ 0x28
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003488:	2b20      	cmp	r3, #32
 800348a:	d177      	bne.n	800357c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_UART_Transmit+0x24>
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e070      	b.n	800357e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2221      	movs	r2, #33	@ 0x21
 80034a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034aa:	f7fd ffef 	bl	800148c <HAL_GetTick>
 80034ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	88fa      	ldrh	r2, [r7, #6]
 80034b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034c8:	d108      	bne.n	80034dc <HAL_UART_Transmit+0x68>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	e003      	b.n	80034e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034e4:	e02f      	b.n	8003546 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2180      	movs	r1, #128	@ 0x80
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 ff60 	bl	80043b6 <UART_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d004      	beq.n	8003506 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e03b      	b.n	800357e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800351a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	3302      	adds	r3, #2
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e007      	b.n	8003534 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3301      	adds	r3, #1
 8003532:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1c9      	bne.n	80034e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	2140      	movs	r1, #64	@ 0x40
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 ff2a 	bl	80043b6 <UART_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d004      	beq.n	8003572 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e005      	b.n	800357e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	e000      	b.n	800357e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800357c:	2302      	movs	r3, #2
  }
}
 800357e:	4618      	mov	r0, r3
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b08a      	sub	sp, #40	@ 0x28
 800358a:	af02      	add	r7, sp, #8
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800359c:	2b20      	cmp	r3, #32
 800359e:	f040 80b5 	bne.w	800370c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_UART_Receive+0x28>
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0ad      	b.n	800370e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2222      	movs	r2, #34	@ 0x22
 80035be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035c8:	f7fd ff60 	bl	800148c <HAL_GetTick>
 80035cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	88fa      	ldrh	r2, [r7, #6]
 80035d2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035e6:	d10e      	bne.n	8003606 <HAL_UART_Receive+0x80>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <HAL_UART_Receive+0x76>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80035f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80035fa:	e02d      	b.n	8003658 <HAL_UART_Receive+0xd2>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	22ff      	movs	r2, #255	@ 0xff
 8003600:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003604:	e028      	b.n	8003658 <HAL_UART_Receive+0xd2>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10d      	bne.n	800362a <HAL_UART_Receive+0xa4>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d104      	bne.n	8003620 <HAL_UART_Receive+0x9a>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	22ff      	movs	r2, #255	@ 0xff
 800361a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800361e:	e01b      	b.n	8003658 <HAL_UART_Receive+0xd2>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	227f      	movs	r2, #127	@ 0x7f
 8003624:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003628:	e016      	b.n	8003658 <HAL_UART_Receive+0xd2>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003632:	d10d      	bne.n	8003650 <HAL_UART_Receive+0xca>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d104      	bne.n	8003646 <HAL_UART_Receive+0xc0>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	227f      	movs	r2, #127	@ 0x7f
 8003640:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003644:	e008      	b.n	8003658 <HAL_UART_Receive+0xd2>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	223f      	movs	r2, #63	@ 0x3f
 800364a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800364e:	e003      	b.n	8003658 <HAL_UART_Receive+0xd2>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800365e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003668:	d108      	bne.n	800367c <HAL_UART_Receive+0xf6>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	e003      	b.n	8003684 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003680:	2300      	movs	r3, #0
 8003682:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003684:	e036      	b.n	80036f4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2200      	movs	r2, #0
 800368e:	2120      	movs	r1, #32
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fe90 	bl	80043b6 <UART_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e032      	b.n	800370e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10c      	bne.n	80036c8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	8a7b      	ldrh	r3, [r7, #18]
 80036b8:	4013      	ands	r3, r2
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	3302      	adds	r3, #2
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	e00c      	b.n	80036e2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	8a7b      	ldrh	r3, [r7, #18]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	4013      	ands	r3, r2
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	3301      	adds	r3, #1
 80036e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1c2      	bne.n	8003686 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b0ba      	sub	sp, #232	@ 0xe8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800373e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003742:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003746:	4013      	ands	r3, r2
 8003748:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800374c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d115      	bne.n	8003780 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00f      	beq.n	8003780 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8297 	beq.w	8003ca4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
      }
      return;
 800377e:	e291      	b.n	8003ca4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8117 	beq.w	80039b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800378a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003796:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800379a:	4b85      	ldr	r3, [pc, #532]	@ (80039b0 <HAL_UART_IRQHandler+0x298>)
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 810a 	beq.w	80039b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d011      	beq.n	80037d4 <HAL_UART_IRQHandler+0xbc>
 80037b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00b      	beq.n	80037d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2201      	movs	r2, #1
 80037c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ca:	f043 0201 	orr.w	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d011      	beq.n	8003804 <HAL_UART_IRQHandler+0xec>
 80037e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2202      	movs	r2, #2
 80037f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037fa:	f043 0204 	orr.w	r2, r3, #4
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d011      	beq.n	8003834 <HAL_UART_IRQHandler+0x11c>
 8003810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2204      	movs	r2, #4
 8003822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800382a:	f043 0202 	orr.w	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d017      	beq.n	8003870 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800384c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003850:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00b      	beq.n	8003870 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2208      	movs	r2, #8
 800385e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003866:	f043 0208 	orr.w	r2, r3, #8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003878:	2b00      	cmp	r3, #0
 800387a:	d012      	beq.n	80038a2 <HAL_UART_IRQHandler+0x18a>
 800387c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003880:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00c      	beq.n	80038a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 81fd 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d007      	beq.n	80038d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ea:	2b40      	cmp	r3, #64	@ 0x40
 80038ec:	d005      	beq.n	80038fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d04f      	beq.n	800399a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fdc8 	bl	8004490 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390a:	2b40      	cmp	r3, #64	@ 0x40
 800390c:	d141      	bne.n	8003992 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3308      	adds	r3, #8
 8003914:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003924:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003928:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800392c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800393a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800393e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1d9      	bne.n	800390e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395e:	2b00      	cmp	r3, #0
 8003960:	d013      	beq.n	800398a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003966:	4a13      	ldr	r2, [pc, #76]	@ (80039b4 <HAL_UART_IRQHandler+0x29c>)
 8003968:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd ff19 	bl	80017a6 <HAL_DMA_Abort_IT>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d017      	beq.n	80039aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003984:	4610      	mov	r0, r2
 8003986:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003988:	e00f      	b.n	80039aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f9a0 	bl	8003cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	e00b      	b.n	80039aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f99c 	bl	8003cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003998:	e007      	b.n	80039aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f998 	bl	8003cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80039a8:	e17e      	b.n	8003ca8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039aa:	bf00      	nop
    return;
 80039ac:	e17c      	b.n	8003ca8 <HAL_UART_IRQHandler+0x590>
 80039ae:	bf00      	nop
 80039b0:	04000120 	.word	0x04000120
 80039b4:	08004559 	.word	0x08004559

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039bc:	2b01      	cmp	r3, #1
 80039be:	f040 814c 	bne.w	8003c5a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8145 	beq.w	8003c5a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 813e 	beq.w	8003c5a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2210      	movs	r2, #16
 80039e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f0:	2b40      	cmp	r3, #64	@ 0x40
 80039f2:	f040 80b6 	bne.w	8003b62 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8150 	beq.w	8003cac <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a16:	429a      	cmp	r2, r3
 8003a18:	f080 8148 	bcs.w	8003cac <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a30:	f000 8086 	beq.w	8003b40 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1da      	bne.n	8003a34 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3308      	adds	r3, #8
 8003a84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003aa2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003aa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003aaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e1      	bne.n	8003a7e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003aca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003acc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ade:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ae4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e3      	bne.n	8003aba <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b10:	f023 0310 	bic.w	r3, r3, #16
 8003b14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e4      	bne.n	8003b00 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fd fdc3 	bl	80016c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8c2 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b60:	e0a4      	b.n	8003cac <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8096 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003b84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8091 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e4      	bne.n	8003b8e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	623b      	str	r3, [r7, #32]
   return(result);
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3308      	adds	r3, #8
 8003be4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003be8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e3      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f023 0310 	bic.w	r3, r3, #16
 8003c24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e4      	bne.n	8003c10 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f846 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c58:	e02a      	b.n	8003cb0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00e      	beq.n	8003c84 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01c      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
    }
    return;
 8003c82:	e017      	b.n	8003cb4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d012      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x59e>
 8003c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fc71 	bl	8004584 <UART_EndTransmit_IT>
    return;
 8003ca2:	e008      	b.n	8003cb6 <HAL_UART_IRQHandler+0x59e>
      return;
 8003ca4:	bf00      	nop
 8003ca6:	e006      	b.n	8003cb6 <HAL_UART_IRQHandler+0x59e>
    return;
 8003ca8:	bf00      	nop
 8003caa:	e004      	b.n	8003cb6 <HAL_UART_IRQHandler+0x59e>
      return;
 8003cac:	bf00      	nop
 8003cae:	e002      	b.n	8003cb6 <HAL_UART_IRQHandler+0x59e>
      return;
 8003cb0:	bf00      	nop
 8003cb2:	e000      	b.n	8003cb6 <HAL_UART_IRQHandler+0x59e>
    return;
 8003cb4:	bf00      	nop
  }

}
 8003cb6:	37e8      	adds	r7, #232	@ 0xe8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4ba6      	ldr	r3, [pc, #664]	@ (8003fc0 <UART_SetConfig+0x2c4>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	6979      	ldr	r1, [r7, #20]
 8003d30:	430b      	orrs	r3, r1
 8003d32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a94      	ldr	r2, [pc, #592]	@ (8003fc4 <UART_SetConfig+0x2c8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d120      	bne.n	8003dba <UART_SetConfig+0xbe>
 8003d78:	4b93      	ldr	r3, [pc, #588]	@ (8003fc8 <UART_SetConfig+0x2cc>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d816      	bhi.n	8003db4 <UART_SetConfig+0xb8>
 8003d86:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <UART_SetConfig+0x90>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003da9 	.word	0x08003da9
 8003d94:	08003da3 	.word	0x08003da3
 8003d98:	08003daf 	.word	0x08003daf
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	77fb      	strb	r3, [r7, #31]
 8003da0:	e150      	b.n	8004044 <UART_SetConfig+0x348>
 8003da2:	2302      	movs	r3, #2
 8003da4:	77fb      	strb	r3, [r7, #31]
 8003da6:	e14d      	b.n	8004044 <UART_SetConfig+0x348>
 8003da8:	2304      	movs	r3, #4
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e14a      	b.n	8004044 <UART_SetConfig+0x348>
 8003dae:	2308      	movs	r3, #8
 8003db0:	77fb      	strb	r3, [r7, #31]
 8003db2:	e147      	b.n	8004044 <UART_SetConfig+0x348>
 8003db4:	2310      	movs	r3, #16
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	e144      	b.n	8004044 <UART_SetConfig+0x348>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a83      	ldr	r2, [pc, #524]	@ (8003fcc <UART_SetConfig+0x2d0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d132      	bne.n	8003e2a <UART_SetConfig+0x12e>
 8003dc4:	4b80      	ldr	r3, [pc, #512]	@ (8003fc8 <UART_SetConfig+0x2cc>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d828      	bhi.n	8003e24 <UART_SetConfig+0x128>
 8003dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <UART_SetConfig+0xdc>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003e0d 	.word	0x08003e0d
 8003ddc:	08003e25 	.word	0x08003e25
 8003de0:	08003e25 	.word	0x08003e25
 8003de4:	08003e25 	.word	0x08003e25
 8003de8:	08003e19 	.word	0x08003e19
 8003dec:	08003e25 	.word	0x08003e25
 8003df0:	08003e25 	.word	0x08003e25
 8003df4:	08003e25 	.word	0x08003e25
 8003df8:	08003e13 	.word	0x08003e13
 8003dfc:	08003e25 	.word	0x08003e25
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e25 	.word	0x08003e25
 8003e08:	08003e1f 	.word	0x08003e1f
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e118      	b.n	8004044 <UART_SetConfig+0x348>
 8003e12:	2302      	movs	r3, #2
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e115      	b.n	8004044 <UART_SetConfig+0x348>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	77fb      	strb	r3, [r7, #31]
 8003e1c:	e112      	b.n	8004044 <UART_SetConfig+0x348>
 8003e1e:	2308      	movs	r3, #8
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e10f      	b.n	8004044 <UART_SetConfig+0x348>
 8003e24:	2310      	movs	r3, #16
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e10c      	b.n	8004044 <UART_SetConfig+0x348>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a68      	ldr	r2, [pc, #416]	@ (8003fd0 <UART_SetConfig+0x2d4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d120      	bne.n	8003e76 <UART_SetConfig+0x17a>
 8003e34:	4b64      	ldr	r3, [pc, #400]	@ (8003fc8 <UART_SetConfig+0x2cc>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e3e:	2b30      	cmp	r3, #48	@ 0x30
 8003e40:	d013      	beq.n	8003e6a <UART_SetConfig+0x16e>
 8003e42:	2b30      	cmp	r3, #48	@ 0x30
 8003e44:	d814      	bhi.n	8003e70 <UART_SetConfig+0x174>
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d009      	beq.n	8003e5e <UART_SetConfig+0x162>
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d810      	bhi.n	8003e70 <UART_SetConfig+0x174>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <UART_SetConfig+0x15c>
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d006      	beq.n	8003e64 <UART_SetConfig+0x168>
 8003e56:	e00b      	b.n	8003e70 <UART_SetConfig+0x174>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e0f2      	b.n	8004044 <UART_SetConfig+0x348>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e0ef      	b.n	8004044 <UART_SetConfig+0x348>
 8003e64:	2304      	movs	r3, #4
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e0ec      	b.n	8004044 <UART_SetConfig+0x348>
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e0e9      	b.n	8004044 <UART_SetConfig+0x348>
 8003e70:	2310      	movs	r3, #16
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e0e6      	b.n	8004044 <UART_SetConfig+0x348>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a56      	ldr	r2, [pc, #344]	@ (8003fd4 <UART_SetConfig+0x2d8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d120      	bne.n	8003ec2 <UART_SetConfig+0x1c6>
 8003e80:	4b51      	ldr	r3, [pc, #324]	@ (8003fc8 <UART_SetConfig+0x2cc>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e8c:	d013      	beq.n	8003eb6 <UART_SetConfig+0x1ba>
 8003e8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e90:	d814      	bhi.n	8003ebc <UART_SetConfig+0x1c0>
 8003e92:	2b80      	cmp	r3, #128	@ 0x80
 8003e94:	d009      	beq.n	8003eaa <UART_SetConfig+0x1ae>
 8003e96:	2b80      	cmp	r3, #128	@ 0x80
 8003e98:	d810      	bhi.n	8003ebc <UART_SetConfig+0x1c0>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <UART_SetConfig+0x1a8>
 8003e9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ea0:	d006      	beq.n	8003eb0 <UART_SetConfig+0x1b4>
 8003ea2:	e00b      	b.n	8003ebc <UART_SetConfig+0x1c0>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e0cc      	b.n	8004044 <UART_SetConfig+0x348>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	77fb      	strb	r3, [r7, #31]
 8003eae:	e0c9      	b.n	8004044 <UART_SetConfig+0x348>
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e0c6      	b.n	8004044 <UART_SetConfig+0x348>
 8003eb6:	2308      	movs	r3, #8
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e0c3      	b.n	8004044 <UART_SetConfig+0x348>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e0c0      	b.n	8004044 <UART_SetConfig+0x348>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a44      	ldr	r2, [pc, #272]	@ (8003fd8 <UART_SetConfig+0x2dc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d125      	bne.n	8003f18 <UART_SetConfig+0x21c>
 8003ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc8 <UART_SetConfig+0x2cc>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ed6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eda:	d017      	beq.n	8003f0c <UART_SetConfig+0x210>
 8003edc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ee0:	d817      	bhi.n	8003f12 <UART_SetConfig+0x216>
 8003ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee6:	d00b      	beq.n	8003f00 <UART_SetConfig+0x204>
 8003ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eec:	d811      	bhi.n	8003f12 <UART_SetConfig+0x216>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <UART_SetConfig+0x1fe>
 8003ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ef6:	d006      	beq.n	8003f06 <UART_SetConfig+0x20a>
 8003ef8:	e00b      	b.n	8003f12 <UART_SetConfig+0x216>
 8003efa:	2300      	movs	r3, #0
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e0a1      	b.n	8004044 <UART_SetConfig+0x348>
 8003f00:	2302      	movs	r3, #2
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e09e      	b.n	8004044 <UART_SetConfig+0x348>
 8003f06:	2304      	movs	r3, #4
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e09b      	b.n	8004044 <UART_SetConfig+0x348>
 8003f0c:	2308      	movs	r3, #8
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e098      	b.n	8004044 <UART_SetConfig+0x348>
 8003f12:	2310      	movs	r3, #16
 8003f14:	77fb      	strb	r3, [r7, #31]
 8003f16:	e095      	b.n	8004044 <UART_SetConfig+0x348>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a2f      	ldr	r2, [pc, #188]	@ (8003fdc <UART_SetConfig+0x2e0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d125      	bne.n	8003f6e <UART_SetConfig+0x272>
 8003f22:	4b29      	ldr	r3, [pc, #164]	@ (8003fc8 <UART_SetConfig+0x2cc>)
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f30:	d017      	beq.n	8003f62 <UART_SetConfig+0x266>
 8003f32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f36:	d817      	bhi.n	8003f68 <UART_SetConfig+0x26c>
 8003f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f3c:	d00b      	beq.n	8003f56 <UART_SetConfig+0x25a>
 8003f3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f42:	d811      	bhi.n	8003f68 <UART_SetConfig+0x26c>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <UART_SetConfig+0x254>
 8003f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4c:	d006      	beq.n	8003f5c <UART_SetConfig+0x260>
 8003f4e:	e00b      	b.n	8003f68 <UART_SetConfig+0x26c>
 8003f50:	2301      	movs	r3, #1
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e076      	b.n	8004044 <UART_SetConfig+0x348>
 8003f56:	2302      	movs	r3, #2
 8003f58:	77fb      	strb	r3, [r7, #31]
 8003f5a:	e073      	b.n	8004044 <UART_SetConfig+0x348>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	e070      	b.n	8004044 <UART_SetConfig+0x348>
 8003f62:	2308      	movs	r3, #8
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e06d      	b.n	8004044 <UART_SetConfig+0x348>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e06a      	b.n	8004044 <UART_SetConfig+0x348>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe0 <UART_SetConfig+0x2e4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d138      	bne.n	8003fea <UART_SetConfig+0x2ee>
 8003f78:	4b13      	ldr	r3, [pc, #76]	@ (8003fc8 <UART_SetConfig+0x2cc>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f86:	d017      	beq.n	8003fb8 <UART_SetConfig+0x2bc>
 8003f88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f8c:	d82a      	bhi.n	8003fe4 <UART_SetConfig+0x2e8>
 8003f8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f92:	d00b      	beq.n	8003fac <UART_SetConfig+0x2b0>
 8003f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f98:	d824      	bhi.n	8003fe4 <UART_SetConfig+0x2e8>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <UART_SetConfig+0x2aa>
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa2:	d006      	beq.n	8003fb2 <UART_SetConfig+0x2b6>
 8003fa4:	e01e      	b.n	8003fe4 <UART_SetConfig+0x2e8>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	77fb      	strb	r3, [r7, #31]
 8003faa:	e04b      	b.n	8004044 <UART_SetConfig+0x348>
 8003fac:	2302      	movs	r3, #2
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e048      	b.n	8004044 <UART_SetConfig+0x348>
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	77fb      	strb	r3, [r7, #31]
 8003fb6:	e045      	b.n	8004044 <UART_SetConfig+0x348>
 8003fb8:	2308      	movs	r3, #8
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e042      	b.n	8004044 <UART_SetConfig+0x348>
 8003fbe:	bf00      	nop
 8003fc0:	efff69f3 	.word	0xefff69f3
 8003fc4:	40011000 	.word	0x40011000
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40004400 	.word	0x40004400
 8003fd0:	40004800 	.word	0x40004800
 8003fd4:	40004c00 	.word	0x40004c00
 8003fd8:	40005000 	.word	0x40005000
 8003fdc:	40011400 	.word	0x40011400
 8003fe0:	40007800 	.word	0x40007800
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	77fb      	strb	r3, [r7, #31]
 8003fe8:	e02c      	b.n	8004044 <UART_SetConfig+0x348>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a72      	ldr	r2, [pc, #456]	@ (80041b8 <UART_SetConfig+0x4bc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d125      	bne.n	8004040 <UART_SetConfig+0x344>
 8003ff4:	4b71      	ldr	r3, [pc, #452]	@ (80041bc <UART_SetConfig+0x4c0>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003ffe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004002:	d017      	beq.n	8004034 <UART_SetConfig+0x338>
 8004004:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004008:	d817      	bhi.n	800403a <UART_SetConfig+0x33e>
 800400a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800400e:	d00b      	beq.n	8004028 <UART_SetConfig+0x32c>
 8004010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004014:	d811      	bhi.n	800403a <UART_SetConfig+0x33e>
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <UART_SetConfig+0x326>
 800401a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800401e:	d006      	beq.n	800402e <UART_SetConfig+0x332>
 8004020:	e00b      	b.n	800403a <UART_SetConfig+0x33e>
 8004022:	2300      	movs	r3, #0
 8004024:	77fb      	strb	r3, [r7, #31]
 8004026:	e00d      	b.n	8004044 <UART_SetConfig+0x348>
 8004028:	2302      	movs	r3, #2
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e00a      	b.n	8004044 <UART_SetConfig+0x348>
 800402e:	2304      	movs	r3, #4
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e007      	b.n	8004044 <UART_SetConfig+0x348>
 8004034:	2308      	movs	r3, #8
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e004      	b.n	8004044 <UART_SetConfig+0x348>
 800403a:	2310      	movs	r3, #16
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e001      	b.n	8004044 <UART_SetConfig+0x348>
 8004040:	2310      	movs	r3, #16
 8004042:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800404c:	d15b      	bne.n	8004106 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800404e:	7ffb      	ldrb	r3, [r7, #31]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d828      	bhi.n	80040a6 <UART_SetConfig+0x3aa>
 8004054:	a201      	add	r2, pc, #4	@ (adr r2, 800405c <UART_SetConfig+0x360>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	08004081 	.word	0x08004081
 8004060:	08004089 	.word	0x08004089
 8004064:	08004091 	.word	0x08004091
 8004068:	080040a7 	.word	0x080040a7
 800406c:	08004097 	.word	0x08004097
 8004070:	080040a7 	.word	0x080040a7
 8004074:	080040a7 	.word	0x080040a7
 8004078:	080040a7 	.word	0x080040a7
 800407c:	0800409f 	.word	0x0800409f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004080:	f7fe fa2c 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8004084:	61b8      	str	r0, [r7, #24]
        break;
 8004086:	e013      	b.n	80040b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004088:	f7fe fa3c 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 800408c:	61b8      	str	r0, [r7, #24]
        break;
 800408e:	e00f      	b.n	80040b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004090:	4b4b      	ldr	r3, [pc, #300]	@ (80041c0 <UART_SetConfig+0x4c4>)
 8004092:	61bb      	str	r3, [r7, #24]
        break;
 8004094:	e00c      	b.n	80040b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004096:	f7fe f94f 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 800409a:	61b8      	str	r0, [r7, #24]
        break;
 800409c:	e008      	b.n	80040b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040a2:	61bb      	str	r3, [r7, #24]
        break;
 80040a4:	e004      	b.n	80040b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	77bb      	strb	r3, [r7, #30]
        break;
 80040ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d074      	beq.n	80041a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	005a      	lsls	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	085b      	lsrs	r3, r3, #1
 80040c0:	441a      	add	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b0f      	cmp	r3, #15
 80040d0:	d916      	bls.n	8004100 <UART_SetConfig+0x404>
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d8:	d212      	bcs.n	8004100 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	f023 030f 	bic.w	r3, r3, #15
 80040e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	085b      	lsrs	r3, r3, #1
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	89fb      	ldrh	r3, [r7, #14]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	89fa      	ldrh	r2, [r7, #14]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	e04f      	b.n	80041a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	77bb      	strb	r3, [r7, #30]
 8004104:	e04c      	b.n	80041a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004106:	7ffb      	ldrb	r3, [r7, #31]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d828      	bhi.n	800415e <UART_SetConfig+0x462>
 800410c:	a201      	add	r2, pc, #4	@ (adr r2, 8004114 <UART_SetConfig+0x418>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004139 	.word	0x08004139
 8004118:	08004141 	.word	0x08004141
 800411c:	08004149 	.word	0x08004149
 8004120:	0800415f 	.word	0x0800415f
 8004124:	0800414f 	.word	0x0800414f
 8004128:	0800415f 	.word	0x0800415f
 800412c:	0800415f 	.word	0x0800415f
 8004130:	0800415f 	.word	0x0800415f
 8004134:	08004157 	.word	0x08004157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004138:	f7fe f9d0 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 800413c:	61b8      	str	r0, [r7, #24]
        break;
 800413e:	e013      	b.n	8004168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004140:	f7fe f9e0 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 8004144:	61b8      	str	r0, [r7, #24]
        break;
 8004146:	e00f      	b.n	8004168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004148:	4b1d      	ldr	r3, [pc, #116]	@ (80041c0 <UART_SetConfig+0x4c4>)
 800414a:	61bb      	str	r3, [r7, #24]
        break;
 800414c:	e00c      	b.n	8004168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800414e:	f7fe f8f3 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 8004152:	61b8      	str	r0, [r7, #24]
        break;
 8004154:	e008      	b.n	8004168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800415a:	61bb      	str	r3, [r7, #24]
        break;
 800415c:	e004      	b.n	8004168 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	77bb      	strb	r3, [r7, #30]
        break;
 8004166:	bf00      	nop
    }

    if (pclk != 0U)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d018      	beq.n	80041a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	085a      	lsrs	r2, r3, #1
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	441a      	add	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b0f      	cmp	r3, #15
 8004186:	d909      	bls.n	800419c <UART_SetConfig+0x4a0>
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800418e:	d205      	bcs.n	800419c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	e001      	b.n	80041a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40007c00 	.word	0x40007c00
 80041bc:	40023800 	.word	0x40023800
 80041c0:	00f42400 	.word	0x00f42400

080041c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01a      	beq.n	80042da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042c2:	d10a      	bne.n	80042da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]
  }
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08c      	sub	sp, #48	@ 0x30
 800430c:	af02      	add	r7, sp, #8
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004318:	f7fd f8b8 	bl	800148c <HAL_GetTick>
 800431c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b08      	cmp	r3, #8
 800432a:	d12e      	bne.n	800438a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800432c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	2200      	movs	r2, #0
 8004336:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f83b 	bl	80043b6 <UART_WaitOnFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d021      	beq.n	800438a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	60fb      	str	r3, [r7, #12]
   return(result);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800435a:	623b      	str	r3, [r7, #32]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	69b9      	ldr	r1, [r7, #24]
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	617b      	str	r3, [r7, #20]
   return(result);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e6      	bne.n	8004346 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e011      	b.n	80043ae <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3728      	adds	r7, #40	@ 0x28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	603b      	str	r3, [r7, #0]
 80043c2:	4613      	mov	r3, r2
 80043c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c6:	e04f      	b.n	8004468 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ce:	d04b      	beq.n	8004468 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d0:	f7fd f85c 	bl	800148c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d302      	bcc.n	80043e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e04e      	b.n	8004488 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d037      	beq.n	8004468 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b80      	cmp	r3, #128	@ 0x80
 80043fc:	d034      	beq.n	8004468 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b40      	cmp	r3, #64	@ 0x40
 8004402:	d031      	beq.n	8004468 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b08      	cmp	r3, #8
 8004410:	d110      	bne.n	8004434 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2208      	movs	r2, #8
 8004418:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f838 	bl	8004490 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2208      	movs	r2, #8
 8004424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e029      	b.n	8004488 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800443e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004442:	d111      	bne.n	8004468 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800444c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f81e 	bl	8004490 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e00f      	b.n	8004488 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69da      	ldr	r2, [r3, #28]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4013      	ands	r3, r2
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	429a      	cmp	r2, r3
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	429a      	cmp	r2, r3
 8004484:	d0a0      	beq.n	80043c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b095      	sub	sp, #84	@ 0x54
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80044b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e6      	bne.n	8004498 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3308      	adds	r3, #8
 80044d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3308      	adds	r3, #8
 80044e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e5      	bne.n	80044ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004502:	2b01      	cmp	r3, #1
 8004504:	d118      	bne.n	8004538 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	60bb      	str	r3, [r7, #8]
   return(result);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f023 0310 	bic.w	r3, r3, #16
 800451a:	647b      	str	r3, [r7, #68]	@ 0x44
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6979      	ldr	r1, [r7, #20]
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	613b      	str	r3, [r7, #16]
   return(result);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e6      	bne.n	8004506 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800454c:	bf00      	nop
 800454e:	3754      	adds	r7, #84	@ 0x54
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff fbaa 	bl	8003cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	60bb      	str	r3, [r7, #8]
   return(result);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6979      	ldr	r1, [r7, #20]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	613b      	str	r3, [r7, #16]
   return(result);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e6      	bne.n	800458c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff fb76 	bl	8003cbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045d0:	bf00      	nop
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ea:	2b84      	cmp	r3, #132	@ 0x84
 80045ec:	d005      	beq.n	80045fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	3303      	adds	r3, #3
 80045f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045fa:	68fb      	ldr	r3, [r7, #12]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800460c:	f000 fd7c 	bl	8005108 <vTaskStartScheduler>
  
  return osOK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	bd80      	pop	{r7, pc}

08004616 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004616:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004618:	b089      	sub	sp, #36	@ 0x24
 800461a:	af04      	add	r7, sp, #16
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d020      	beq.n	800466a <osThreadCreate+0x54>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01c      	beq.n	800466a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685c      	ldr	r4, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691e      	ldr	r6, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff ffc8 	bl	80045d8 <makeFreeRtosPriority>
 8004648:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004652:	9202      	str	r2, [sp, #8]
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	9100      	str	r1, [sp, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	4632      	mov	r2, r6
 800465c:	4629      	mov	r1, r5
 800465e:	4620      	mov	r0, r4
 8004660:	f000 f9c0 	bl	80049e4 <xTaskCreateStatic>
 8004664:	4603      	mov	r3, r0
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e01c      	b.n	80046a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685c      	ldr	r4, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004676:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff ffaa 	bl	80045d8 <makeFreeRtosPriority>
 8004684:	4602      	mov	r2, r0
 8004686:	f107 030c 	add.w	r3, r7, #12
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	9200      	str	r2, [sp, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	4632      	mov	r2, r6
 8004692:	4629      	mov	r1, r5
 8004694:	4620      	mov	r0, r4
 8004696:	f000 fa0b 	bl	8004ab0 <xTaskCreate>
 800469a:	4603      	mov	r3, r0
 800469c:	2b01      	cmp	r3, #1
 800469e:	d001      	beq.n	80046a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e000      	b.n	80046a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046a4:	68fb      	ldr	r3, [r7, #12]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <osDelay+0x16>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	e000      	b.n	80046c6 <osDelay+0x18>
 80046c4:	2301      	movs	r3, #1
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fb52 	bl	8004d70 <vTaskDelay>
  
  return osOK;
 80046cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f103 0208 	add.w	r2, r3, #8
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f04f 32ff 	mov.w	r2, #4294967295
 80046ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f103 0208 	add.w	r2, r3, #8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f103 0208 	add.w	r2, r3, #8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	601a      	str	r2, [r3, #0]
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478e:	d103      	bne.n	8004798 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	e00c      	b.n	80047b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3308      	adds	r3, #8
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	e002      	b.n	80047a6 <vListInsert+0x2e>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d2f6      	bcs.n	80047a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	601a      	str	r2, [r3, #0]
}
 80047de:	bf00      	nop
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6892      	ldr	r2, [r2, #8]
 8004800:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6852      	ldr	r2, [r2, #4]
 800480a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d103      	bne.n	800481e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	1e5a      	subs	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10d      	bne.n	8004870 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004858:	b672      	cpsid	i
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	b662      	cpsie	i
 8004868:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800486a:	bf00      	nop
 800486c:	bf00      	nop
 800486e:	e7fd      	b.n	800486c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004870:	f001 fc44 	bl	80060fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487c:	68f9      	ldr	r1, [r7, #12]
 800487e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	441a      	add	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a0:	3b01      	subs	r3, #1
 80048a2:	68f9      	ldr	r1, [r7, #12]
 80048a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	441a      	add	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	22ff      	movs	r2, #255	@ 0xff
 80048b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	22ff      	movs	r2, #255	@ 0xff
 80048bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d114      	bne.n	80048f0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d01a      	beq.n	8004904 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3310      	adds	r3, #16
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 ff2a 	bl	800572c <xTaskRemoveFromEventList>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d012      	beq.n	8004904 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <xQueueGenericReset+0xd4>)
 80048e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	e009      	b.n	8004904 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3310      	adds	r3, #16
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff feee 	bl	80046d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3324      	adds	r3, #36	@ 0x24
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff fee9 	bl	80046d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004904:	f001 fc30 	bl	8006168 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004908:	2301      	movs	r3, #1
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	e000ed04 	.word	0xe000ed04

08004918 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	@ 0x28
 800491c:	af02      	add	r7, sp, #8
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	4613      	mov	r3, r2
 8004924:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10d      	bne.n	8004948 <xQueueGenericCreate+0x30>
	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004930:	b672      	cpsid	i
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	b662      	cpsie	i
 8004940:	613b      	str	r3, [r7, #16]
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	e7fd      	b.n	8004944 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d102      	bne.n	8004954 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	e004      	b.n	800495e <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	fb02 f303 	mul.w	r3, r2, r3
 800495c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3350      	adds	r3, #80	@ 0x50
 8004962:	4618      	mov	r0, r3
 8004964:	f001 fcb2 	bl	80062cc <pvPortMalloc>
 8004968:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d011      	beq.n	8004994 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	3350      	adds	r3, #80	@ 0x50
 8004978:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004982:	79fa      	ldrb	r2, [r7, #7]
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	4613      	mov	r3, r2
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f805 	bl	800499e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004994:	69bb      	ldr	r3, [r7, #24]
	}
 8004996:	4618      	mov	r0, r3
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	e002      	b.n	80049c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049cc:	2101      	movs	r1, #1
 80049ce:	69b8      	ldr	r0, [r7, #24]
 80049d0:	f7ff ff36 	bl	8004840 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	78fa      	ldrb	r2, [r7, #3]
 80049d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08e      	sub	sp, #56	@ 0x38
 80049e8:	af04      	add	r7, sp, #16
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10d      	bne.n	8004a14 <xTaskCreateStatic+0x30>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fc:	b672      	cpsid	i
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	b662      	cpsie	i
 8004a0c:	623b      	str	r3, [r7, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	e7fd      	b.n	8004a10 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10d      	bne.n	8004a36 <xTaskCreateStatic+0x52>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1e:	b672      	cpsid	i
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	b662      	cpsie	i
 8004a2e:	61fb      	str	r3, [r7, #28]
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	e7fd      	b.n	8004a32 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a36:	23ac      	movs	r3, #172	@ 0xac
 8004a38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2bac      	cmp	r3, #172	@ 0xac
 8004a3e:	d00d      	beq.n	8004a5c <xTaskCreateStatic+0x78>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a44:	b672      	cpsid	i
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	b662      	cpsie	i
 8004a54:	61bb      	str	r3, [r7, #24]
}
 8004a56:	bf00      	nop
 8004a58:	bf00      	nop
 8004a5a:	e7fd      	b.n	8004a58 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01e      	beq.n	8004aa2 <xTaskCreateStatic+0xbe>
 8004a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01b      	beq.n	8004aa2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	9303      	str	r3, [sp, #12]
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	9302      	str	r3, [sp, #8]
 8004a84:	f107 0314 	add.w	r3, r7, #20
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f851 	bl	8004b3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a9c:	f000 f8fa 	bl	8004c94 <prvAddNewTaskToReadyList>
 8004aa0:	e001      	b.n	8004aa6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004aa6:	697b      	ldr	r3, [r7, #20]
	}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3728      	adds	r7, #40	@ 0x28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08c      	sub	sp, #48	@ 0x30
 8004ab4:	af04      	add	r7, sp, #16
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f001 fc01 	bl	80062cc <pvPortMalloc>
 8004aca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00e      	beq.n	8004af0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ad2:	20ac      	movs	r0, #172	@ 0xac
 8004ad4:	f001 fbfa 	bl	80062cc <pvPortMalloc>
 8004ad8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ae6:	e005      	b.n	8004af4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ae8:	6978      	ldr	r0, [r7, #20]
 8004aea:	f001 fcbd 	bl	8006468 <vPortFree>
 8004aee:	e001      	b.n	8004af4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d017      	beq.n	8004b2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b02:	88fa      	ldrh	r2, [r7, #6]
 8004b04:	2300      	movs	r3, #0
 8004b06:	9303      	str	r3, [sp, #12]
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	9302      	str	r3, [sp, #8]
 8004b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f80f 	bl	8004b3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b1e:	69f8      	ldr	r0, [r7, #28]
 8004b20:	f000 f8b8 	bl	8004c94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b24:	2301      	movs	r3, #1
 8004b26:	61bb      	str	r3, [r7, #24]
 8004b28:	e002      	b.n	8004b30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b30:	69bb      	ldr	r3, [r7, #24]
	}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3720      	adds	r7, #32
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	461a      	mov	r2, r3
 8004b54:	21a5      	movs	r1, #165	@ 0xa5
 8004b56:	f002 f88d 	bl	8006c74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004b64:	440b      	add	r3, r1
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f023 0307 	bic.w	r3, r3, #7
 8004b72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00d      	beq.n	8004b9a <prvInitialiseNewTask+0x5e>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b82:	b672      	cpsid	i
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	b662      	cpsie	i
 8004b92:	617b      	str	r3, [r7, #20]
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	e7fd      	b.n	8004b96 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01f      	beq.n	8004be0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	e012      	b.n	8004bcc <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	7819      	ldrb	r1, [r3, #0]
 8004bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3334      	adds	r3, #52	@ 0x34
 8004bb6:	460a      	mov	r2, r1
 8004bb8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d006      	beq.n	8004bd4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	61fb      	str	r3, [r7, #28]
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	2b0f      	cmp	r3, #15
 8004bd0:	d9e9      	bls.n	8004ba6 <prvInitialiseNewTask+0x6a>
 8004bd2:	e000      	b.n	8004bd6 <prvInitialiseNewTask+0x9a>
			{
				break;
 8004bd4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bde:	e003      	b.n	8004be8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bea:	2b06      	cmp	r3, #6
 8004bec:	d901      	bls.n	8004bf2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bee:	2306      	movs	r3, #6
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c00:	2200      	movs	r2, #0
 8004c02:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	3304      	adds	r3, #4
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fd84 	bl	8004716 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c10:	3318      	adds	r3, #24
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fd7f 	bl	8004716 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	f1c3 0207 	rsb	r2, r3, #7
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c2c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	2200      	movs	r2, #0
 8004c32:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c46:	3358      	adds	r3, #88	@ 0x58
 8004c48:	224c      	movs	r2, #76	@ 0x4c
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f002 f811 	bl	8006c74 <memset>
 8004c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c54:	4a0c      	ldr	r2, [pc, #48]	@ (8004c88 <prvInitialiseNewTask+0x14c>)
 8004c56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c8c <prvInitialiseNewTask+0x150>)
 8004c5c:	661a      	str	r2, [r3, #96]	@ 0x60
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	4a0b      	ldr	r2, [pc, #44]	@ (8004c90 <prvInitialiseNewTask+0x154>)
 8004c62:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	68f9      	ldr	r1, [r7, #12]
 8004c68:	69b8      	ldr	r0, [r7, #24]
 8004c6a:	f001 f93b 	bl	8005ee4 <pxPortInitialiseStack>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c80:	bf00      	nop
 8004c82:	3720      	adds	r7, #32
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20008188 	.word	0x20008188
 8004c8c:	200081f0 	.word	0x200081f0
 8004c90:	20008258 	.word	0x20008258

08004c94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c9c:	f001 fa2e 	bl	80060fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8004d54 <prvAddNewTaskToReadyList+0xc0>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	4a2b      	ldr	r2, [pc, #172]	@ (8004d54 <prvAddNewTaskToReadyList+0xc0>)
 8004ca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004caa:	4b2b      	ldr	r3, [pc, #172]	@ (8004d58 <prvAddNewTaskToReadyList+0xc4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cb2:	4a29      	ldr	r2, [pc, #164]	@ (8004d58 <prvAddNewTaskToReadyList+0xc4>)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cb8:	4b26      	ldr	r3, [pc, #152]	@ (8004d54 <prvAddNewTaskToReadyList+0xc0>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d110      	bne.n	8004ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cc0:	f000 fdb2 	bl	8005828 <prvInitialiseTaskLists>
 8004cc4:	e00d      	b.n	8004ce2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cc6:	4b25      	ldr	r3, [pc, #148]	@ (8004d5c <prvAddNewTaskToReadyList+0xc8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cce:	4b22      	ldr	r3, [pc, #136]	@ (8004d58 <prvAddNewTaskToReadyList+0xc4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d802      	bhi.n	8004ce2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cdc:	4a1e      	ldr	r2, [pc, #120]	@ (8004d58 <prvAddNewTaskToReadyList+0xc4>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d60 <prvAddNewTaskToReadyList+0xcc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d60 <prvAddNewTaskToReadyList+0xcc>)
 8004cea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cec:	4b1c      	ldr	r3, [pc, #112]	@ (8004d60 <prvAddNewTaskToReadyList+0xcc>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	4b19      	ldr	r3, [pc, #100]	@ (8004d64 <prvAddNewTaskToReadyList+0xd0>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	4a18      	ldr	r2, [pc, #96]	@ (8004d64 <prvAddNewTaskToReadyList+0xd0>)
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4a15      	ldr	r2, [pc, #84]	@ (8004d68 <prvAddNewTaskToReadyList+0xd4>)
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f7ff fd07 	bl	8004730 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d22:	f001 fa21 	bl	8006168 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d26:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <prvAddNewTaskToReadyList+0xc8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00e      	beq.n	8004d4c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d58 <prvAddNewTaskToReadyList+0xc4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d207      	bcs.n	8004d4c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <prvAddNewTaskToReadyList+0xd8>)
 8004d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000934 	.word	0x20000934
 8004d58:	20000834 	.word	0x20000834
 8004d5c:	20000940 	.word	0x20000940
 8004d60:	20000950 	.word	0x20000950
 8004d64:	2000093c 	.word	0x2000093c
 8004d68:	20000838 	.word	0x20000838
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01a      	beq.n	8004db8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d82:	4b15      	ldr	r3, [pc, #84]	@ (8004dd8 <vTaskDelay+0x68>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00d      	beq.n	8004da6 <vTaskDelay+0x36>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8e:	b672      	cpsid	i
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	b662      	cpsie	i
 8004d9e:	60bb      	str	r3, [r7, #8]
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	e7fd      	b.n	8004da2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004da6:	f000 fa1f 	bl	80051e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004daa:	2100      	movs	r1, #0
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f001 f833 	bl	8005e18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004db2:	f000 fa27 	bl	8005204 <xTaskResumeAll>
 8004db6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d107      	bne.n	8004dce <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8004dbe:	4b07      	ldr	r3, [pc, #28]	@ (8004ddc <vTaskDelay+0x6c>)
 8004dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	2000095c 	.word	0x2000095c
 8004ddc:	e000ed04 	.word	0xe000ed04

08004de0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10d      	bne.n	8004e0e <eTaskGetState+0x2e>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df6:	b672      	cpsid	i
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	b662      	cpsie	i
 8004e06:	60bb      	str	r3, [r7, #8]
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	e7fd      	b.n	8004e0a <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 8004e0e:	4b24      	ldr	r3, [pc, #144]	@ (8004ea0 <eTaskGetState+0xc0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d102      	bne.n	8004e1e <eTaskGetState+0x3e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	77fb      	strb	r3, [r7, #31]
 8004e1c:	e03a      	b.n	8004e94 <eTaskGetState+0xb4>
		}
		else
		{
			taskENTER_CRITICAL();
 8004e1e:	f001 f96d 	bl	80060fc <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004e28:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea4 <eTaskGetState+0xc4>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8004e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea8 <eTaskGetState+0xc8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004e34:	f001 f998 	bl	8006168 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d003      	beq.n	8004e48 <eTaskGetState+0x68>
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d102      	bne.n	8004e4e <eTaskGetState+0x6e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e022      	b.n	8004e94 <eTaskGetState+0xb4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <eTaskGetState+0xcc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d112      	bne.n	8004e7c <eTaskGetState+0x9c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10b      	bne.n	8004e76 <eTaskGetState+0x96>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d102      	bne.n	8004e70 <eTaskGetState+0x90>
							{
								eReturn = eBlocked;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e011      	b.n	8004e94 <eTaskGetState+0xb4>
							}
							else
							{
								eReturn = eSuspended;
 8004e70:	2303      	movs	r3, #3
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e00e      	b.n	8004e94 <eTaskGetState+0xb4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8004e76:	2302      	movs	r3, #2
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e00b      	b.n	8004e94 <eTaskGetState+0xb4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8004eb0 <eTaskGetState+0xd0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d002      	beq.n	8004e8a <eTaskGetState+0xaa>
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d102      	bne.n	8004e90 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8004e8a:	2304      	movs	r3, #4
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e001      	b.n	8004e94 <eTaskGetState+0xb4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8004e90:	2301      	movs	r3, #1
 8004e92:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004e94:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004e96:	4618      	mov	r0, r3
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20000834 	.word	0x20000834
 8004ea4:	200008ec 	.word	0x200008ec
 8004ea8:	200008f0 	.word	0x200008f0
 8004eac:	20000920 	.word	0x20000920
 8004eb0:	20000908 	.word	0x20000908

08004eb4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004ebc:	f001 f91e 	bl	80060fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <vTaskSuspend+0x18>
 8004ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8004fc0 <vTaskSuspend+0x10c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	e000      	b.n	8004ece <vTaskSuspend+0x1a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fc88 	bl	80047ea <uxListRemove>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d115      	bne.n	8004f0c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee4:	4937      	ldr	r1, [pc, #220]	@ (8004fc4 <vTaskSuspend+0x110>)
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <vTaskSuspend+0x58>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	2201      	movs	r2, #1
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	43da      	mvns	r2, r3
 8004f02:	4b31      	ldr	r3, [pc, #196]	@ (8004fc8 <vTaskSuspend+0x114>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4013      	ands	r3, r2
 8004f08:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc8 <vTaskSuspend+0x114>)
 8004f0a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d004      	beq.n	8004f1e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3318      	adds	r3, #24
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff fc66 	bl	80047ea <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3304      	adds	r3, #4
 8004f22:	4619      	mov	r1, r3
 8004f24:	4829      	ldr	r0, [pc, #164]	@ (8004fcc <vTaskSuspend+0x118>)
 8004f26:	f7ff fc03 	bl	8004730 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d103      	bne.n	8004f3e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004f3e:	f001 f913 	bl	8006168 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004f42:	4b23      	ldr	r3, [pc, #140]	@ (8004fd0 <vTaskSuspend+0x11c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004f4a:	f001 f8d7 	bl	80060fc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004f4e:	f000 fde5 	bl	8005b1c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004f52:	f001 f909 	bl	8006168 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004f56:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc0 <vTaskSuspend+0x10c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d12a      	bne.n	8004fb6 <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 8004f60:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd0 <vTaskSuspend+0x11c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01a      	beq.n	8004f9e <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004f68:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd4 <vTaskSuspend+0x120>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00d      	beq.n	8004f8c <vTaskSuspend+0xd8>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f74:	b672      	cpsid	i
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	b662      	cpsie	i
 8004f84:	60bb      	str	r3, [r7, #8]
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	e7fd      	b.n	8004f88 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8004f8c:	4b12      	ldr	r3, [pc, #72]	@ (8004fd8 <vTaskSuspend+0x124>)
 8004f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f9c:	e00b      	b.n	8004fb6 <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fcc <vTaskSuspend+0x118>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8004fdc <vTaskSuspend+0x128>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d103      	bne.n	8004fb2 <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 8004faa:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <vTaskSuspend+0x10c>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
	}
 8004fb0:	e001      	b.n	8004fb6 <vTaskSuspend+0x102>
					vTaskSwitchContext();
 8004fb2:	f000 fb13 	bl	80055dc <vTaskSwitchContext>
	}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000834 	.word	0x20000834
 8004fc4:	20000838 	.word	0x20000838
 8004fc8:	2000093c 	.word	0x2000093c
 8004fcc:	20000920 	.word	0x20000920
 8004fd0:	20000940 	.word	0x20000940
 8004fd4:	2000095c 	.word	0x2000095c
 8004fd8:	e000ed04 	.word	0xe000ed04
 8004fdc:	20000934 	.word	0x20000934

08004fe0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10d      	bne.n	8005012 <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffa:	b672      	cpsid	i
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	b662      	cpsie	i
 800500a:	60fb      	str	r3, [r7, #12]
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	e7fd      	b.n	800500e <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	4a0a      	ldr	r2, [pc, #40]	@ (8005040 <prvTaskIsTaskSuspended+0x60>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d10a      	bne.n	8005032 <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005020:	4a08      	ldr	r2, [pc, #32]	@ (8005044 <prvTaskIsTaskSuspended+0x64>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d005      	beq.n	8005032 <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 800502e:	2301      	movs	r3, #1
 8005030:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005032:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005034:	4618      	mov	r0, r3
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	20000920 	.word	0x20000920
 8005044:	200008f4 	.word	0x200008f4

08005048 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10d      	bne.n	8005076 <vTaskResume+0x2e>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505e:	b672      	cpsid	i
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	b662      	cpsie	i
 800506e:	60bb      	str	r3, [r7, #8]
}
 8005070:	bf00      	nop
 8005072:	bf00      	nop
 8005074:	e7fd      	b.n	8005072 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005076:	4b20      	ldr	r3, [pc, #128]	@ (80050f8 <vTaskResume+0xb0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	429a      	cmp	r2, r3
 800507e:	d037      	beq.n	80050f0 <vTaskResume+0xa8>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d034      	beq.n	80050f0 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8005086:	f001 f839 	bl	80060fc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff ffa8 	bl	8004fe0 <prvTaskIsTaskSuspended>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d02a      	beq.n	80050ec <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3304      	adds	r3, #4
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fba5 	bl	80047ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a4:	2201      	movs	r2, #1
 80050a6:	409a      	lsls	r2, r3
 80050a8:	4b14      	ldr	r3, [pc, #80]	@ (80050fc <vTaskResume+0xb4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	4a13      	ldr	r2, [pc, #76]	@ (80050fc <vTaskResume+0xb4>)
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4a10      	ldr	r2, [pc, #64]	@ (8005100 <vTaskResume+0xb8>)
 80050c0:	441a      	add	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3304      	adds	r3, #4
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f7ff fb31 	bl	8004730 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d2:	4b09      	ldr	r3, [pc, #36]	@ (80050f8 <vTaskResume+0xb0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d8:	429a      	cmp	r2, r3
 80050da:	d307      	bcc.n	80050ec <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80050dc:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <vTaskResume+0xbc>)
 80050de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80050ec:	f001 f83c 	bl	8006168 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	20000834 	.word	0x20000834
 80050fc:	2000093c 	.word	0x2000093c
 8005100:	20000838 	.word	0x20000838
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	@ 0x28
 800510c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005116:	463a      	mov	r2, r7
 8005118:	1d39      	adds	r1, r7, #4
 800511a:	f107 0308 	add.w	r3, r7, #8
 800511e:	4618      	mov	r0, r3
 8005120:	f7fb fa64 	bl	80005ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005124:	6839      	ldr	r1, [r7, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	9202      	str	r2, [sp, #8]
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	2300      	movs	r3, #0
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	2300      	movs	r3, #0
 8005134:	460a      	mov	r2, r1
 8005136:	4924      	ldr	r1, [pc, #144]	@ (80051c8 <vTaskStartScheduler+0xc0>)
 8005138:	4824      	ldr	r0, [pc, #144]	@ (80051cc <vTaskStartScheduler+0xc4>)
 800513a:	f7ff fc53 	bl	80049e4 <xTaskCreateStatic>
 800513e:	4603      	mov	r3, r0
 8005140:	4a23      	ldr	r2, [pc, #140]	@ (80051d0 <vTaskStartScheduler+0xc8>)
 8005142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005144:	4b22      	ldr	r3, [pc, #136]	@ (80051d0 <vTaskStartScheduler+0xc8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800514c:	2301      	movs	r3, #1
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	e001      	b.n	8005156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d11f      	bne.n	800519c <vTaskStartScheduler+0x94>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005160:	b672      	cpsid	i
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	b662      	cpsie	i
 8005170:	613b      	str	r3, [r7, #16]
}
 8005172:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005174:	4b17      	ldr	r3, [pc, #92]	@ (80051d4 <vTaskStartScheduler+0xcc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3358      	adds	r3, #88	@ 0x58
 800517a:	4a17      	ldr	r2, [pc, #92]	@ (80051d8 <vTaskStartScheduler+0xd0>)
 800517c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800517e:	4b17      	ldr	r3, [pc, #92]	@ (80051dc <vTaskStartScheduler+0xd4>)
 8005180:	f04f 32ff 	mov.w	r2, #4294967295
 8005184:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005186:	4b16      	ldr	r3, [pc, #88]	@ (80051e0 <vTaskStartScheduler+0xd8>)
 8005188:	2201      	movs	r2, #1
 800518a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800518c:	4b15      	ldr	r3, [pc, #84]	@ (80051e4 <vTaskStartScheduler+0xdc>)
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005192:	f7fb fbb3 	bl	80008fc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005196:	f000 ff33 	bl	8006000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800519a:	e011      	b.n	80051c0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a2:	d10d      	bne.n	80051c0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a8:	b672      	cpsid	i
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	b662      	cpsie	i
 80051b8:	60fb      	str	r3, [r7, #12]
}
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
 80051be:	e7fd      	b.n	80051bc <vTaskStartScheduler+0xb4>
}
 80051c0:	bf00      	nop
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	08007f58 	.word	0x08007f58
 80051cc:	080057f9 	.word	0x080057f9
 80051d0:	20000958 	.word	0x20000958
 80051d4:	20000834 	.word	0x20000834
 80051d8:	20000024 	.word	0x20000024
 80051dc:	20000954 	.word	0x20000954
 80051e0:	20000940 	.word	0x20000940
 80051e4:	20000938 	.word	0x20000938

080051e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80051ec:	4b04      	ldr	r3, [pc, #16]	@ (8005200 <vTaskSuspendAll+0x18>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	4a03      	ldr	r2, [pc, #12]	@ (8005200 <vTaskSuspendAll+0x18>)
 80051f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80051f6:	bf00      	nop
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	2000095c 	.word	0x2000095c

08005204 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800520e:	2300      	movs	r3, #0
 8005210:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005212:	4b43      	ldr	r3, [pc, #268]	@ (8005320 <xTaskResumeAll+0x11c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10d      	bne.n	8005236 <xTaskResumeAll+0x32>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521e:	b672      	cpsid	i
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	b662      	cpsie	i
 800522e:	603b      	str	r3, [r7, #0]
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	e7fd      	b.n	8005232 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005236:	f000 ff61 	bl	80060fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800523a:	4b39      	ldr	r3, [pc, #228]	@ (8005320 <xTaskResumeAll+0x11c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3b01      	subs	r3, #1
 8005240:	4a37      	ldr	r2, [pc, #220]	@ (8005320 <xTaskResumeAll+0x11c>)
 8005242:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005244:	4b36      	ldr	r3, [pc, #216]	@ (8005320 <xTaskResumeAll+0x11c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d161      	bne.n	8005310 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800524c:	4b35      	ldr	r3, [pc, #212]	@ (8005324 <xTaskResumeAll+0x120>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d05d      	beq.n	8005310 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005254:	e02e      	b.n	80052b4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005256:	4b34      	ldr	r3, [pc, #208]	@ (8005328 <xTaskResumeAll+0x124>)
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3318      	adds	r3, #24
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fac1 	bl	80047ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3304      	adds	r3, #4
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff fabc 	bl	80047ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	2201      	movs	r2, #1
 8005278:	409a      	lsls	r2, r3
 800527a:	4b2c      	ldr	r3, [pc, #176]	@ (800532c <xTaskResumeAll+0x128>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4313      	orrs	r3, r2
 8005280:	4a2a      	ldr	r2, [pc, #168]	@ (800532c <xTaskResumeAll+0x128>)
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4a27      	ldr	r2, [pc, #156]	@ (8005330 <xTaskResumeAll+0x12c>)
 8005292:	441a      	add	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3304      	adds	r3, #4
 8005298:	4619      	mov	r1, r3
 800529a:	4610      	mov	r0, r2
 800529c:	f7ff fa48 	bl	8004730 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a4:	4b23      	ldr	r3, [pc, #140]	@ (8005334 <xTaskResumeAll+0x130>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d302      	bcc.n	80052b4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80052ae:	4b22      	ldr	r3, [pc, #136]	@ (8005338 <xTaskResumeAll+0x134>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005328 <xTaskResumeAll+0x124>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1cc      	bne.n	8005256 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052c2:	f000 fc2b 	bl	8005b1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80052c6:	4b1d      	ldr	r3, [pc, #116]	@ (800533c <xTaskResumeAll+0x138>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d010      	beq.n	80052f4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052d2:	f000 f8c7 	bl	8005464 <xTaskIncrementTick>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80052dc:	4b16      	ldr	r3, [pc, #88]	@ (8005338 <xTaskResumeAll+0x134>)
 80052de:	2201      	movs	r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f1      	bne.n	80052d2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80052ee:	4b13      	ldr	r3, [pc, #76]	@ (800533c <xTaskResumeAll+0x138>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052f4:	4b10      	ldr	r3, [pc, #64]	@ (8005338 <xTaskResumeAll+0x134>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d009      	beq.n	8005310 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052fc:	2301      	movs	r3, #1
 80052fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005300:	4b0f      	ldr	r3, [pc, #60]	@ (8005340 <xTaskResumeAll+0x13c>)
 8005302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005310:	f000 ff2a 	bl	8006168 <vPortExitCritical>

	return xAlreadyYielded;
 8005314:	68bb      	ldr	r3, [r7, #8]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	2000095c 	.word	0x2000095c
 8005324:	20000934 	.word	0x20000934
 8005328:	200008f4 	.word	0x200008f4
 800532c:	2000093c 	.word	0x2000093c
 8005330:	20000838 	.word	0x20000838
 8005334:	20000834 	.word	0x20000834
 8005338:	20000948 	.word	0x20000948
 800533c:	20000944 	.word	0x20000944
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	2307      	movs	r3, #7
 8005356:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8005358:	f7ff ff46 	bl	80051e8 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800535c:	4b3b      	ldr	r3, [pc, #236]	@ (800544c <uxTaskGetSystemState+0x108>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	429a      	cmp	r2, r3
 8005364:	d36a      	bcc.n	800543c <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	3b01      	subs	r3, #1
 800536a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4613      	mov	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	461a      	mov	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1898      	adds	r0, r3, r2
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4a32      	ldr	r2, [pc, #200]	@ (8005450 <uxTaskGetSystemState+0x10c>)
 8005388:	4413      	add	r3, r2
 800538a:	2201      	movs	r2, #1
 800538c:	4619      	mov	r1, r3
 800538e:	f000 fb1f 	bl	80059d0 <prvListTasksWithinSingleList>
 8005392:	4602      	mov	r2, r0
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	4413      	add	r3, r2
 8005398:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e2      	bne.n	8005366 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4613      	mov	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	461a      	mov	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	4a28      	ldr	r2, [pc, #160]	@ (8005454 <uxTaskGetSystemState+0x110>)
 80053b2:	6811      	ldr	r1, [r2, #0]
 80053b4:	2202      	movs	r2, #2
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fb0a 	bl	80059d0 <prvListTasksWithinSingleList>
 80053bc:	4602      	mov	r2, r0
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	4413      	add	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4613      	mov	r3, r2
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	461a      	mov	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	4a20      	ldr	r2, [pc, #128]	@ (8005458 <uxTaskGetSystemState+0x114>)
 80053d6:	6811      	ldr	r1, [r2, #0]
 80053d8:	2202      	movs	r2, #2
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 faf8 	bl	80059d0 <prvListTasksWithinSingleList>
 80053e0:	4602      	mov	r2, r0
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	4413      	add	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4613      	mov	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	461a      	mov	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	2204      	movs	r2, #4
 80053fa:	4918      	ldr	r1, [pc, #96]	@ (800545c <uxTaskGetSystemState+0x118>)
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fae7 	bl	80059d0 <prvListTasksWithinSingleList>
 8005402:	4602      	mov	r2, r0
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	4413      	add	r3, r2
 8005408:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4613      	mov	r3, r2
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	461a      	mov	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	2203      	movs	r2, #3
 800541c:	4910      	ldr	r1, [pc, #64]	@ (8005460 <uxTaskGetSystemState+0x11c>)
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fad6 	bl	80059d0 <prvListTasksWithinSingleList>
 8005424:	4602      	mov	r2, r0
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	4413      	add	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005432:	f7fb fa6d 	bl	8000910 <getRunTimeCounterValue>
 8005436:	4602      	mov	r2, r0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800543c:	f7ff fee2 	bl	8005204 <xTaskResumeAll>

		return uxTask;
 8005440:	697b      	ldr	r3, [r7, #20]
	}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000934 	.word	0x20000934
 8005450:	20000838 	.word	0x20000838
 8005454:	200008ec 	.word	0x200008ec
 8005458:	200008f0 	.word	0x200008f0
 800545c:	20000908 	.word	0x20000908
 8005460:	20000920 	.word	0x20000920

08005464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546e:	4b50      	ldr	r3, [pc, #320]	@ (80055b0 <xTaskIncrementTick+0x14c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f040 808b 	bne.w	800558e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005478:	4b4e      	ldr	r3, [pc, #312]	@ (80055b4 <xTaskIncrementTick+0x150>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005480:	4a4c      	ldr	r2, [pc, #304]	@ (80055b4 <xTaskIncrementTick+0x150>)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d123      	bne.n	80054d4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800548c:	4b4a      	ldr	r3, [pc, #296]	@ (80055b8 <xTaskIncrementTick+0x154>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549a:	b672      	cpsid	i
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	b662      	cpsie	i
 80054aa:	603b      	str	r3, [r7, #0]
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	e7fd      	b.n	80054ae <xTaskIncrementTick+0x4a>
 80054b2:	4b41      	ldr	r3, [pc, #260]	@ (80055b8 <xTaskIncrementTick+0x154>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	4b40      	ldr	r3, [pc, #256]	@ (80055bc <xTaskIncrementTick+0x158>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a3e      	ldr	r2, [pc, #248]	@ (80055b8 <xTaskIncrementTick+0x154>)
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	4a3e      	ldr	r2, [pc, #248]	@ (80055bc <xTaskIncrementTick+0x158>)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4b3e      	ldr	r3, [pc, #248]	@ (80055c0 <xTaskIncrementTick+0x15c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3301      	adds	r3, #1
 80054cc:	4a3c      	ldr	r2, [pc, #240]	@ (80055c0 <xTaskIncrementTick+0x15c>)
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	f000 fb24 	bl	8005b1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054d4:	4b3b      	ldr	r3, [pc, #236]	@ (80055c4 <xTaskIncrementTick+0x160>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d348      	bcc.n	8005570 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054de:	4b36      	ldr	r3, [pc, #216]	@ (80055b8 <xTaskIncrementTick+0x154>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d104      	bne.n	80054f2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e8:	4b36      	ldr	r3, [pc, #216]	@ (80055c4 <xTaskIncrementTick+0x160>)
 80054ea:	f04f 32ff 	mov.w	r2, #4294967295
 80054ee:	601a      	str	r2, [r3, #0]
					break;
 80054f0:	e03e      	b.n	8005570 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f2:	4b31      	ldr	r3, [pc, #196]	@ (80055b8 <xTaskIncrementTick+0x154>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	429a      	cmp	r2, r3
 8005508:	d203      	bcs.n	8005512 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800550a:	4a2e      	ldr	r2, [pc, #184]	@ (80055c4 <xTaskIncrementTick+0x160>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005510:	e02e      	b.n	8005570 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	3304      	adds	r3, #4
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff f967 	bl	80047ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	3318      	adds	r3, #24
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff f95e 	bl	80047ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005532:	2201      	movs	r2, #1
 8005534:	409a      	lsls	r2, r3
 8005536:	4b24      	ldr	r3, [pc, #144]	@ (80055c8 <xTaskIncrementTick+0x164>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4313      	orrs	r3, r2
 800553c:	4a22      	ldr	r2, [pc, #136]	@ (80055c8 <xTaskIncrementTick+0x164>)
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4a1f      	ldr	r2, [pc, #124]	@ (80055cc <xTaskIncrementTick+0x168>)
 800554e:	441a      	add	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	3304      	adds	r3, #4
 8005554:	4619      	mov	r1, r3
 8005556:	4610      	mov	r0, r2
 8005558:	f7ff f8ea 	bl	8004730 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005560:	4b1b      	ldr	r3, [pc, #108]	@ (80055d0 <xTaskIncrementTick+0x16c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005566:	429a      	cmp	r2, r3
 8005568:	d3b9      	bcc.n	80054de <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800556a:	2301      	movs	r3, #1
 800556c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800556e:	e7b6      	b.n	80054de <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005570:	4b17      	ldr	r3, [pc, #92]	@ (80055d0 <xTaskIncrementTick+0x16c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005576:	4915      	ldr	r1, [pc, #84]	@ (80055cc <xTaskIncrementTick+0x168>)
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d907      	bls.n	8005598 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005588:	2301      	movs	r3, #1
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e004      	b.n	8005598 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800558e:	4b11      	ldr	r3, [pc, #68]	@ (80055d4 <xTaskIncrementTick+0x170>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	4a0f      	ldr	r2, [pc, #60]	@ (80055d4 <xTaskIncrementTick+0x170>)
 8005596:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005598:	4b0f      	ldr	r3, [pc, #60]	@ (80055d8 <xTaskIncrementTick+0x174>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80055a0:	2301      	movs	r3, #1
 80055a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80055a4:	697b      	ldr	r3, [r7, #20]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	2000095c 	.word	0x2000095c
 80055b4:	20000938 	.word	0x20000938
 80055b8:	200008ec 	.word	0x200008ec
 80055bc:	200008f0 	.word	0x200008f0
 80055c0:	2000094c 	.word	0x2000094c
 80055c4:	20000954 	.word	0x20000954
 80055c8:	2000093c 	.word	0x2000093c
 80055cc:	20000838 	.word	0x20000838
 80055d0:	20000834 	.word	0x20000834
 80055d4:	20000944 	.word	0x20000944
 80055d8:	20000948 	.word	0x20000948

080055dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055e2:	4b4a      	ldr	r3, [pc, #296]	@ (800570c <vTaskSwitchContext+0x130>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055ea:	4b49      	ldr	r3, [pc, #292]	@ (8005710 <vTaskSwitchContext+0x134>)
 80055ec:	2201      	movs	r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055f0:	e087      	b.n	8005702 <vTaskSwitchContext+0x126>
		xYieldPending = pdFALSE;
 80055f2:	4b47      	ldr	r3, [pc, #284]	@ (8005710 <vTaskSwitchContext+0x134>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80055f8:	f7fb f98a 	bl	8000910 <getRunTimeCounterValue>
 80055fc:	4603      	mov	r3, r0
 80055fe:	4a45      	ldr	r2, [pc, #276]	@ (8005714 <vTaskSwitchContext+0x138>)
 8005600:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005602:	4b44      	ldr	r3, [pc, #272]	@ (8005714 <vTaskSwitchContext+0x138>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	4b44      	ldr	r3, [pc, #272]	@ (8005718 <vTaskSwitchContext+0x13c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d909      	bls.n	8005622 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800560e:	4b43      	ldr	r3, [pc, #268]	@ (800571c <vTaskSwitchContext+0x140>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005614:	4a3f      	ldr	r2, [pc, #252]	@ (8005714 <vTaskSwitchContext+0x138>)
 8005616:	6810      	ldr	r0, [r2, #0]
 8005618:	4a3f      	ldr	r2, [pc, #252]	@ (8005718 <vTaskSwitchContext+0x13c>)
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	1a82      	subs	r2, r0, r2
 800561e:	440a      	add	r2, r1
 8005620:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8005622:	4b3c      	ldr	r3, [pc, #240]	@ (8005714 <vTaskSwitchContext+0x138>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a3c      	ldr	r2, [pc, #240]	@ (8005718 <vTaskSwitchContext+0x13c>)
 8005628:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800562a:	4b3c      	ldr	r3, [pc, #240]	@ (800571c <vTaskSwitchContext+0x140>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	429a      	cmp	r2, r3
 8005640:	d111      	bne.n	8005666 <vTaskSwitchContext+0x8a>
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	3304      	adds	r3, #4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	429a      	cmp	r2, r3
 800564c:	d10b      	bne.n	8005666 <vTaskSwitchContext+0x8a>
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	3308      	adds	r3, #8
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	429a      	cmp	r2, r3
 8005658:	d105      	bne.n	8005666 <vTaskSwitchContext+0x8a>
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	330c      	adds	r3, #12
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	429a      	cmp	r2, r3
 8005664:	d008      	beq.n	8005678 <vTaskSwitchContext+0x9c>
 8005666:	4b2d      	ldr	r3, [pc, #180]	@ (800571c <vTaskSwitchContext+0x140>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b2c      	ldr	r3, [pc, #176]	@ (800571c <vTaskSwitchContext+0x140>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3334      	adds	r3, #52	@ 0x34
 8005670:	4619      	mov	r1, r3
 8005672:	4610      	mov	r0, r2
 8005674:	f7fb f936 	bl	80008e4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005678:	4b29      	ldr	r3, [pc, #164]	@ (8005720 <vTaskSwitchContext+0x144>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	fab3 f383 	clz	r3, r3
 8005684:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005686:	7afb      	ldrb	r3, [r7, #11]
 8005688:	f1c3 031f 	rsb	r3, r3, #31
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	4925      	ldr	r1, [pc, #148]	@ (8005724 <vTaskSwitchContext+0x148>)
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10d      	bne.n	80056be <vTaskSwitchContext+0xe2>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	b672      	cpsid	i
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	b662      	cpsie	i
 80056b6:	607b      	str	r3, [r7, #4]
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	e7fd      	b.n	80056ba <vTaskSwitchContext+0xde>
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4a16      	ldr	r2, [pc, #88]	@ (8005724 <vTaskSwitchContext+0x148>)
 80056ca:	4413      	add	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	605a      	str	r2, [r3, #4]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	3308      	adds	r3, #8
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d104      	bne.n	80056ee <vTaskSwitchContext+0x112>
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4a09      	ldr	r2, [pc, #36]	@ (800571c <vTaskSwitchContext+0x140>)
 80056f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056f8:	4b08      	ldr	r3, [pc, #32]	@ (800571c <vTaskSwitchContext+0x140>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3358      	adds	r3, #88	@ 0x58
 80056fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005728 <vTaskSwitchContext+0x14c>)
 8005700:	6013      	str	r3, [r2, #0]
}
 8005702:	bf00      	nop
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	2000095c 	.word	0x2000095c
 8005710:	20000948 	.word	0x20000948
 8005714:	20000964 	.word	0x20000964
 8005718:	20000960 	.word	0x20000960
 800571c:	20000834 	.word	0x20000834
 8005720:	2000093c 	.word	0x2000093c
 8005724:	20000838 	.word	0x20000838
 8005728:	20000024 	.word	0x20000024

0800572c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10d      	bne.n	800575e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005746:	b672      	cpsid	i
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	b662      	cpsie	i
 8005756:	60fb      	str	r3, [r7, #12]
}
 8005758:	bf00      	nop
 800575a:	bf00      	nop
 800575c:	e7fd      	b.n	800575a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	3318      	adds	r3, #24
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff f841 	bl	80047ea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005768:	4b1d      	ldr	r3, [pc, #116]	@ (80057e0 <xTaskRemoveFromEventList+0xb4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d11c      	bne.n	80057aa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	3304      	adds	r3, #4
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff f838 	bl	80047ea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	2201      	movs	r2, #1
 8005780:	409a      	lsls	r2, r3
 8005782:	4b18      	ldr	r3, [pc, #96]	@ (80057e4 <xTaskRemoveFromEventList+0xb8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4313      	orrs	r3, r2
 8005788:	4a16      	ldr	r2, [pc, #88]	@ (80057e4 <xTaskRemoveFromEventList+0xb8>)
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4a13      	ldr	r2, [pc, #76]	@ (80057e8 <xTaskRemoveFromEventList+0xbc>)
 800579a:	441a      	add	r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f7fe ffc4 	bl	8004730 <vListInsertEnd>
 80057a8:	e005      	b.n	80057b6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	3318      	adds	r3, #24
 80057ae:	4619      	mov	r1, r3
 80057b0:	480e      	ldr	r0, [pc, #56]	@ (80057ec <xTaskRemoveFromEventList+0xc0>)
 80057b2:	f7fe ffbd 	bl	8004730 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ba:	4b0d      	ldr	r3, [pc, #52]	@ (80057f0 <xTaskRemoveFromEventList+0xc4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d905      	bls.n	80057d0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057c4:	2301      	movs	r3, #1
 80057c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057c8:	4b0a      	ldr	r3, [pc, #40]	@ (80057f4 <xTaskRemoveFromEventList+0xc8>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e001      	b.n	80057d4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057d4:	697b      	ldr	r3, [r7, #20]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	2000095c 	.word	0x2000095c
 80057e4:	2000093c 	.word	0x2000093c
 80057e8:	20000838 	.word	0x20000838
 80057ec:	200008f4 	.word	0x200008f4
 80057f0:	20000834 	.word	0x20000834
 80057f4:	20000948 	.word	0x20000948

080057f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005800:	f000 f852 	bl	80058a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005804:	4b06      	ldr	r3, [pc, #24]	@ (8005820 <prvIdleTask+0x28>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d9f9      	bls.n	8005800 <prvIdleTask+0x8>
			{
				taskYIELD();
 800580c:	4b05      	ldr	r3, [pc, #20]	@ (8005824 <prvIdleTask+0x2c>)
 800580e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800581c:	e7f0      	b.n	8005800 <prvIdleTask+0x8>
 800581e:	bf00      	nop
 8005820:	20000838 	.word	0x20000838
 8005824:	e000ed04 	.word	0xe000ed04

08005828 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800582e:	2300      	movs	r3, #0
 8005830:	607b      	str	r3, [r7, #4]
 8005832:	e00c      	b.n	800584e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4a12      	ldr	r2, [pc, #72]	@ (8005888 <prvInitialiseTaskLists+0x60>)
 8005840:	4413      	add	r3, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe ff47 	bl	80046d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3301      	adds	r3, #1
 800584c:	607b      	str	r3, [r7, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b06      	cmp	r3, #6
 8005852:	d9ef      	bls.n	8005834 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005854:	480d      	ldr	r0, [pc, #52]	@ (800588c <prvInitialiseTaskLists+0x64>)
 8005856:	f7fe ff3e 	bl	80046d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800585a:	480d      	ldr	r0, [pc, #52]	@ (8005890 <prvInitialiseTaskLists+0x68>)
 800585c:	f7fe ff3b 	bl	80046d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005860:	480c      	ldr	r0, [pc, #48]	@ (8005894 <prvInitialiseTaskLists+0x6c>)
 8005862:	f7fe ff38 	bl	80046d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005866:	480c      	ldr	r0, [pc, #48]	@ (8005898 <prvInitialiseTaskLists+0x70>)
 8005868:	f7fe ff35 	bl	80046d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800586c:	480b      	ldr	r0, [pc, #44]	@ (800589c <prvInitialiseTaskLists+0x74>)
 800586e:	f7fe ff32 	bl	80046d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005872:	4b0b      	ldr	r3, [pc, #44]	@ (80058a0 <prvInitialiseTaskLists+0x78>)
 8005874:	4a05      	ldr	r2, [pc, #20]	@ (800588c <prvInitialiseTaskLists+0x64>)
 8005876:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005878:	4b0a      	ldr	r3, [pc, #40]	@ (80058a4 <prvInitialiseTaskLists+0x7c>)
 800587a:	4a05      	ldr	r2, [pc, #20]	@ (8005890 <prvInitialiseTaskLists+0x68>)
 800587c:	601a      	str	r2, [r3, #0]
}
 800587e:	bf00      	nop
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000838 	.word	0x20000838
 800588c:	200008c4 	.word	0x200008c4
 8005890:	200008d8 	.word	0x200008d8
 8005894:	200008f4 	.word	0x200008f4
 8005898:	20000908 	.word	0x20000908
 800589c:	20000920 	.word	0x20000920
 80058a0:	200008ec 	.word	0x200008ec
 80058a4:	200008f0 	.word	0x200008f0

080058a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058ae:	e019      	b.n	80058e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058b0:	f000 fc24 	bl	80060fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b4:	4b10      	ldr	r3, [pc, #64]	@ (80058f8 <prvCheckTasksWaitingTermination+0x50>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3304      	adds	r3, #4
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fe ff92 	bl	80047ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058c6:	4b0d      	ldr	r3, [pc, #52]	@ (80058fc <prvCheckTasksWaitingTermination+0x54>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	4a0b      	ldr	r2, [pc, #44]	@ (80058fc <prvCheckTasksWaitingTermination+0x54>)
 80058ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005900 <prvCheckTasksWaitingTermination+0x58>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005900 <prvCheckTasksWaitingTermination+0x58>)
 80058d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058da:	f000 fc45 	bl	8006168 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f8e4 	bl	8005aac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058e4:	4b06      	ldr	r3, [pc, #24]	@ (8005900 <prvCheckTasksWaitingTermination+0x58>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e1      	bne.n	80058b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058ec:	bf00      	nop
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000908 	.word	0x20000908
 80058fc:	20000934 	.word	0x20000934
 8005900:	2000091c 	.word	0x2000091c

08005904 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <vTaskGetInfo+0x1a>
 8005918:	4b2c      	ldr	r3, [pc, #176]	@ (80059cc <vTaskGetInfo+0xc8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	e000      	b.n	8005920 <vTaskGetInfo+0x1c>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	2b05      	cmp	r3, #5
 800595e:	d01a      	beq.n	8005996 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8005960:	4b1a      	ldr	r3, [pc, #104]	@ (80059cc <vTaskGetInfo+0xc8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	429a      	cmp	r2, r3
 8005968:	d103      	bne.n	8005972 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2200      	movs	r2, #0
 800596e:	731a      	strb	r2, [r3, #12]
 8005970:	e018      	b.n	80059a4 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	78fa      	ldrb	r2, [r7, #3]
 8005976:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	2b03      	cmp	r3, #3
 800597c:	d112      	bne.n	80059a4 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800597e:	f7ff fc33 	bl	80051e8 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2202      	movs	r2, #2
 800598e:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8005990:	f7ff fc38 	bl	8005204 <xTaskResumeAll>
 8005994:	e006      	b.n	80059a4 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8005996:	6978      	ldr	r0, [r7, #20]
 8005998:	f7ff fa22 	bl	8004de0 <eTaskGetState>
 800599c:	4603      	mov	r3, r0
 800599e:	461a      	mov	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 f860 	bl	8005a74 <prvTaskCheckFreeStackSpace>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80059bc:	e002      	b.n	80059c4 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2200      	movs	r2, #0
 80059c2:	841a      	strh	r2, [r3, #32]
	}
 80059c4:	bf00      	nop
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	20000834 	.word	0x20000834

080059d0 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	@ 0x28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	4613      	mov	r3, r2
 80059dc:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d03f      	beq.n	8005a6a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	623b      	str	r3, [r7, #32]
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	605a      	str	r2, [r3, #4]
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	3308      	adds	r3, #8
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d104      	bne.n	8005a0e <prvListTasksWithinSingleList+0x3e>
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	605a      	str	r2, [r3, #4]
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	605a      	str	r2, [r3, #4]
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d104      	bne.n	8005a3a <prvListTasksWithinSingleList+0x6a>
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8005a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a44:	4613      	mov	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	1899      	adds	r1, r3, r2
 8005a52:	79fb      	ldrb	r3, [r7, #7]
 8005a54:	2201      	movs	r2, #1
 8005a56:	6978      	ldr	r0, [r7, #20]
 8005a58:	f7ff ff54 	bl	8005904 <vTaskGetInfo>
				uxTask++;
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	3301      	adds	r3, #1
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d1d5      	bne.n	8005a16 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3728      	adds	r7, #40	@ 0x28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005a80:	e005      	b.n	8005a8e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3301      	adds	r3, #1
 8005a86:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2ba5      	cmp	r3, #165	@ 0xa5
 8005a94:	d0f5      	beq.n	8005a82 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	089b      	lsrs	r3, r3, #2
 8005a9a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	b29b      	uxth	r3, r3
	}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3358      	adds	r3, #88	@ 0x58
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 f8f3 	bl	8006ca4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d108      	bne.n	8005ada <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fccb 	bl	8006468 <vPortFree>
				vPortFree( pxTCB );
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fcc8 	bl	8006468 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ad8:	e01b      	b.n	8005b12 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d103      	bne.n	8005aec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fcbf 	bl	8006468 <vPortFree>
	}
 8005aea:	e012      	b.n	8005b12 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d00d      	beq.n	8005b12 <prvDeleteTCB+0x66>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afa:	b672      	cpsid	i
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	b662      	cpsie	i
 8005b0a:	60fb      	str	r3, [r7, #12]
}
 8005b0c:	bf00      	nop
 8005b0e:	bf00      	nop
 8005b10:	e7fd      	b.n	8005b0e <prvDeleteTCB+0x62>
	}
 8005b12:	bf00      	nop
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b22:	4b0c      	ldr	r3, [pc, #48]	@ (8005b54 <prvResetNextTaskUnblockTime+0x38>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b58 <prvResetNextTaskUnblockTime+0x3c>)
 8005b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b34:	e008      	b.n	8005b48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b36:	4b07      	ldr	r3, [pc, #28]	@ (8005b54 <prvResetNextTaskUnblockTime+0x38>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	4a04      	ldr	r2, [pc, #16]	@ (8005b58 <prvResetNextTaskUnblockTime+0x3c>)
 8005b46:	6013      	str	r3, [r2, #0]
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	200008ec 	.word	0x200008ec
 8005b58:	20000954 	.word	0x20000954

08005b5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b62:	4b0b      	ldr	r3, [pc, #44]	@ (8005b90 <xTaskGetSchedulerState+0x34>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d102      	bne.n	8005b70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	607b      	str	r3, [r7, #4]
 8005b6e:	e008      	b.n	8005b82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b70:	4b08      	ldr	r3, [pc, #32]	@ (8005b94 <xTaskGetSchedulerState+0x38>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d102      	bne.n	8005b7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	607b      	str	r3, [r7, #4]
 8005b7c:	e001      	b.n	8005b82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b82:	687b      	ldr	r3, [r7, #4]
	}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	20000940 	.word	0x20000940
 8005b94:	2000095c 	.word	0x2000095c

08005b98 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 f93e 	bl	8006e26 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fa fb30 	bl	8000210 <strlen>
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	e007      	b.n	8005bc4 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	2220      	movs	r2, #32
 8005bbc:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b0e      	cmp	r3, #14
 8005bc8:	d9f4      	bls.n	8005bb4 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4413      	add	r3, r2
	}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8005be4:	b590      	push	{r4, r7, lr}
 8005be6:	b089      	sub	sp, #36	@ 0x24
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8005bf2:	4b45      	ldr	r3, [pc, #276]	@ (8005d08 <vTaskList+0x124>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8005bf8:	4b43      	ldr	r3, [pc, #268]	@ (8005d08 <vTaskList+0x124>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fb61 	bl	80062cc <pvPortMalloc>
 8005c0a:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d076      	beq.n	8005d00 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8005c12:	2200      	movs	r2, #0
 8005c14:	68f9      	ldr	r1, [r7, #12]
 8005c16:	68b8      	ldr	r0, [r7, #8]
 8005c18:	f7ff fb94 	bl	8005344 <uxTaskGetSystemState>
 8005c1c:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e066      	b.n	8005cf2 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4613      	mov	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4413      	add	r3, r2
 8005c34:	7b1b      	ldrb	r3, [r3, #12]
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d81b      	bhi.n	8005c72 <vTaskList+0x8e>
 8005c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c40 <vTaskList+0x5c>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005c55 	.word	0x08005c55
 8005c44:	08005c5b 	.word	0x08005c5b
 8005c48:	08005c61 	.word	0x08005c61
 8005c4c:	08005c67 	.word	0x08005c67
 8005c50:	08005c6d 	.word	0x08005c6d
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8005c54:	2358      	movs	r3, #88	@ 0x58
 8005c56:	74fb      	strb	r3, [r7, #19]
										break;
 8005c58:	e00e      	b.n	8005c78 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8005c5a:	2352      	movs	r3, #82	@ 0x52
 8005c5c:	74fb      	strb	r3, [r7, #19]
										break;
 8005c5e:	e00b      	b.n	8005c78 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8005c60:	2342      	movs	r3, #66	@ 0x42
 8005c62:	74fb      	strb	r3, [r7, #19]
										break;
 8005c64:	e008      	b.n	8005c78 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8005c66:	2353      	movs	r3, #83	@ 0x53
 8005c68:	74fb      	strb	r3, [r7, #19]
										break;
 8005c6a:	e005      	b.n	8005c78 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8005c6c:	2344      	movs	r3, #68	@ 0x44
 8005c6e:	74fb      	strb	r3, [r7, #19]
										break;
 8005c70:	e002      	b.n	8005c78 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8005c72:	2300      	movs	r3, #0
 8005c74:	74fb      	strb	r3, [r7, #19]
										break;
 8005c76:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	461a      	mov	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4413      	add	r3, r2
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff ff83 	bl	8005b98 <prvWriteNameToBuffer>
 8005c92:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005c94:	7cf9      	ldrb	r1, [r7, #19]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	6918      	ldr	r0, [r3, #16]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4613      	mov	r3, r2
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	8c1b      	ldrh	r3, [r3, #32]
 8005cba:	461c      	mov	r4, r3
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4413      	add	r3, r2
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	9400      	str	r4, [sp, #0]
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	460a      	mov	r2, r1
 8005cd6:	490d      	ldr	r1, [pc, #52]	@ (8005d0c <vTaskList+0x128>)
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fed1 	bl	8006a80 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fa fa96 	bl	8000210 <strlen>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4413      	add	r3, r2
 8005cea:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d394      	bcc.n	8005c24 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8005cfa:	68b8      	ldr	r0, [r7, #8]
 8005cfc:	f000 fbb4 	bl	8006468 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd90      	pop	{r4, r7, pc}
 8005d08:	20000934 	.word	0x20000934
 8005d0c:	08007f60 	.word	0x08007f60

08005d10 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8005d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8005e08 <vTaskGetRunTimeStats+0xf8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8005d24:	4b38      	ldr	r3, [pc, #224]	@ (8005e08 <vTaskGetRunTimeStats+0xf8>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 facb 	bl	80062cc <pvPortMalloc>
 8005d36:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d05f      	beq.n	8005dfe <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8005d3e:	f107 030c 	add.w	r3, r7, #12
 8005d42:	461a      	mov	r2, r3
 8005d44:	69b9      	ldr	r1, [r7, #24]
 8005d46:	6978      	ldr	r0, [r7, #20]
 8005d48:	f7ff fafc 	bl	8005344 <uxTaskGetSystemState>
 8005d4c:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4a2e      	ldr	r2, [pc, #184]	@ (8005e0c <vTaskGetRunTimeStats+0xfc>)
 8005d52:	fba2 2303 	umull	r2, r3, r2, r3
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d04b      	beq.n	8005df8 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8005d60:	2300      	movs	r3, #0
 8005d62:	61fb      	str	r3, [r7, #28]
 8005d64:	e044      	b.n	8005df0 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	461a      	mov	r2, r3
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	4413      	add	r3, r2
 8005d76:	699a      	ldr	r2, [r3, #24]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7e:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	4613      	mov	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	4413      	add	r3, r2
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff feff 	bl	8005b98 <prvWriteNameToBuffer>
 8005d9a:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00e      	beq.n	8005dc0 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	4613      	mov	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	461a      	mov	r2, r3
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	4413      	add	r3, r2
 8005db2:	699a      	ldr	r2, [r3, #24]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4916      	ldr	r1, [pc, #88]	@ (8005e10 <vTaskGetRunTimeStats+0x100>)
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fe61 	bl	8006a80 <siprintf>
 8005dbe:	e00d      	b.n	8005ddc <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	461a      	mov	r2, r3
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	4413      	add	r3, r2
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	490f      	ldr	r1, [pc, #60]	@ (8005e14 <vTaskGetRunTimeStats+0x104>)
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fe52 	bl	8006a80 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7fa fa17 	bl	8000210 <strlen>
 8005de2:	4602      	mov	r2, r0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4413      	add	r3, r2
 8005de8:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	3301      	adds	r3, #1
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d3b6      	bcc.n	8005d66 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8005df8:	6978      	ldr	r0, [r7, #20]
 8005dfa:	f000 fb35 	bl	8006468 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dfe:	bf00      	nop
 8005e00:	3720      	adds	r7, #32
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000934 	.word	0x20000934
 8005e0c:	51eb851f 	.word	0x51eb851f
 8005e10:	08007f70 	.word	0x08007f70
 8005e14:	08007f7c 	.word	0x08007f7c

08005e18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e22:	4b29      	ldr	r3, [pc, #164]	@ (8005ec8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e28:	4b28      	ldr	r3, [pc, #160]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe fcdb 	bl	80047ea <uxListRemove>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10b      	bne.n	8005e52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e3a:	4b24      	ldr	r3, [pc, #144]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e40:	2201      	movs	r2, #1
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	43da      	mvns	r2, r3
 8005e48:	4b21      	ldr	r3, [pc, #132]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	4a20      	ldr	r2, [pc, #128]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d10a      	bne.n	8005e70 <prvAddCurrentTaskToDelayedList+0x58>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e60:	4b1a      	ldr	r3, [pc, #104]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4619      	mov	r1, r3
 8005e68:	481a      	ldr	r0, [pc, #104]	@ (8005ed4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005e6a:	f7fe fc61 	bl	8004730 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e6e:	e026      	b.n	8005ebe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e78:	4b14      	ldr	r3, [pc, #80]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d209      	bcs.n	8005e9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e88:	4b13      	ldr	r3, [pc, #76]	@ (8005ed8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f7fe fc6f 	bl	8004778 <vListInsert>
}
 8005e9a:	e010      	b.n	8005ebe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005edc <prvAddCurrentTaskToDelayedList+0xc4>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f7fe fc65 	bl	8004778 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005eae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d202      	bcs.n	8005ebe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005eb8:	4a09      	ldr	r2, [pc, #36]	@ (8005ee0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	6013      	str	r3, [r2, #0]
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000938 	.word	0x20000938
 8005ecc:	20000834 	.word	0x20000834
 8005ed0:	2000093c 	.word	0x2000093c
 8005ed4:	20000920 	.word	0x20000920
 8005ed8:	200008f0 	.word	0x200008f0
 8005edc:	200008ec 	.word	0x200008ec
 8005ee0:	20000954 	.word	0x20000954

08005ee4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3b04      	subs	r3, #4
 8005ef4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3b04      	subs	r3, #4
 8005f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f023 0201 	bic.w	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3b04      	subs	r3, #4
 8005f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f14:	4a0c      	ldr	r2, [pc, #48]	@ (8005f48 <pxPortInitialiseStack+0x64>)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3b14      	subs	r3, #20
 8005f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3b04      	subs	r3, #4
 8005f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f06f 0202 	mvn.w	r2, #2
 8005f32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3b20      	subs	r3, #32
 8005f38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	08005f4d 	.word	0x08005f4d

08005f4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f56:	4b15      	ldr	r3, [pc, #84]	@ (8005fac <prvTaskExitError+0x60>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5e:	d00d      	beq.n	8005f7c <prvTaskExitError+0x30>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f64:	b672      	cpsid	i
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	b662      	cpsie	i
 8005f74:	60fb      	str	r3, [r7, #12]
}
 8005f76:	bf00      	nop
 8005f78:	bf00      	nop
 8005f7a:	e7fd      	b.n	8005f78 <prvTaskExitError+0x2c>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f80:	b672      	cpsid	i
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	b662      	cpsie	i
 8005f90:	60bb      	str	r3, [r7, #8]
}
 8005f92:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f94:	bf00      	nop
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0fc      	beq.n	8005f96 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000014 	.word	0x20000014

08005fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fb0:	4b07      	ldr	r3, [pc, #28]	@ (8005fd0 <pxCurrentTCBConst2>)
 8005fb2:	6819      	ldr	r1, [r3, #0]
 8005fb4:	6808      	ldr	r0, [r1, #0]
 8005fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fba:	f380 8809 	msr	PSP, r0
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f04f 0000 	mov.w	r0, #0
 8005fc6:	f380 8811 	msr	BASEPRI, r0
 8005fca:	4770      	bx	lr
 8005fcc:	f3af 8000 	nop.w

08005fd0 <pxCurrentTCBConst2>:
 8005fd0:	20000834 	.word	0x20000834
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop

08005fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fd8:	4808      	ldr	r0, [pc, #32]	@ (8005ffc <prvPortStartFirstTask+0x24>)
 8005fda:	6800      	ldr	r0, [r0, #0]
 8005fdc:	6800      	ldr	r0, [r0, #0]
 8005fde:	f380 8808 	msr	MSP, r0
 8005fe2:	f04f 0000 	mov.w	r0, #0
 8005fe6:	f380 8814 	msr	CONTROL, r0
 8005fea:	b662      	cpsie	i
 8005fec:	b661      	cpsie	f
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	df00      	svc	0
 8005ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ffa:	bf00      	nop
 8005ffc:	e000ed08 	.word	0xe000ed08

08006000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006006:	4b37      	ldr	r3, [pc, #220]	@ (80060e4 <xPortStartScheduler+0xe4>)
 8006008:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	22ff      	movs	r2, #255	@ 0xff
 8006016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006028:	b2da      	uxtb	r2, r3
 800602a:	4b2f      	ldr	r3, [pc, #188]	@ (80060e8 <xPortStartScheduler+0xe8>)
 800602c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800602e:	4b2f      	ldr	r3, [pc, #188]	@ (80060ec <xPortStartScheduler+0xec>)
 8006030:	2207      	movs	r2, #7
 8006032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006034:	e009      	b.n	800604a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006036:	4b2d      	ldr	r3, [pc, #180]	@ (80060ec <xPortStartScheduler+0xec>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3b01      	subs	r3, #1
 800603c:	4a2b      	ldr	r2, [pc, #172]	@ (80060ec <xPortStartScheduler+0xec>)
 800603e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	b2db      	uxtb	r3, r3
 8006048:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006052:	2b80      	cmp	r3, #128	@ 0x80
 8006054:	d0ef      	beq.n	8006036 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006056:	4b25      	ldr	r3, [pc, #148]	@ (80060ec <xPortStartScheduler+0xec>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f1c3 0307 	rsb	r3, r3, #7
 800605e:	2b04      	cmp	r3, #4
 8006060:	d00d      	beq.n	800607e <xPortStartScheduler+0x7e>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006066:	b672      	cpsid	i
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	b662      	cpsie	i
 8006076:	60bb      	str	r3, [r7, #8]
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	e7fd      	b.n	800607a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800607e:	4b1b      	ldr	r3, [pc, #108]	@ (80060ec <xPortStartScheduler+0xec>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	4a19      	ldr	r2, [pc, #100]	@ (80060ec <xPortStartScheduler+0xec>)
 8006086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006088:	4b18      	ldr	r3, [pc, #96]	@ (80060ec <xPortStartScheduler+0xec>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006090:	4a16      	ldr	r2, [pc, #88]	@ (80060ec <xPortStartScheduler+0xec>)
 8006092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	b2da      	uxtb	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800609c:	4b14      	ldr	r3, [pc, #80]	@ (80060f0 <xPortStartScheduler+0xf0>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a13      	ldr	r2, [pc, #76]	@ (80060f0 <xPortStartScheduler+0xf0>)
 80060a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060a8:	4b11      	ldr	r3, [pc, #68]	@ (80060f0 <xPortStartScheduler+0xf0>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a10      	ldr	r2, [pc, #64]	@ (80060f0 <xPortStartScheduler+0xf0>)
 80060ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80060b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060b4:	f000 f8dc 	bl	8006270 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060b8:	4b0e      	ldr	r3, [pc, #56]	@ (80060f4 <xPortStartScheduler+0xf4>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060be:	f000 f8fb 	bl	80062b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060c2:	4b0d      	ldr	r3, [pc, #52]	@ (80060f8 <xPortStartScheduler+0xf8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a0c      	ldr	r2, [pc, #48]	@ (80060f8 <xPortStartScheduler+0xf8>)
 80060c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80060cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060ce:	f7ff ff83 	bl	8005fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060d2:	f7ff fa83 	bl	80055dc <vTaskSwitchContext>
	prvTaskExitError();
 80060d6:	f7ff ff39 	bl	8005f4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	e000e400 	.word	0xe000e400
 80060e8:	20000968 	.word	0x20000968
 80060ec:	2000096c 	.word	0x2000096c
 80060f0:	e000ed20 	.word	0xe000ed20
 80060f4:	20000014 	.word	0x20000014
 80060f8:	e000ef34 	.word	0xe000ef34

080060fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006106:	b672      	cpsid	i
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	b662      	cpsie	i
 8006116:	607b      	str	r3, [r7, #4]
}
 8006118:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800611a:	4b11      	ldr	r3, [pc, #68]	@ (8006160 <vPortEnterCritical+0x64>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	4a0f      	ldr	r2, [pc, #60]	@ (8006160 <vPortEnterCritical+0x64>)
 8006122:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006124:	4b0e      	ldr	r3, [pc, #56]	@ (8006160 <vPortEnterCritical+0x64>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d112      	bne.n	8006152 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800612c:	4b0d      	ldr	r3, [pc, #52]	@ (8006164 <vPortEnterCritical+0x68>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00d      	beq.n	8006152 <vPortEnterCritical+0x56>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	b672      	cpsid	i
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	b662      	cpsie	i
 800614a:	603b      	str	r3, [r7, #0]
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	e7fd      	b.n	800614e <vPortEnterCritical+0x52>
	}
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	20000014 	.word	0x20000014
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800616e:	4b13      	ldr	r3, [pc, #76]	@ (80061bc <vPortExitCritical+0x54>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10d      	bne.n	8006192 <vPortExitCritical+0x2a>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	b672      	cpsid	i
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	b662      	cpsie	i
 800618a:	607b      	str	r3, [r7, #4]
}
 800618c:	bf00      	nop
 800618e:	bf00      	nop
 8006190:	e7fd      	b.n	800618e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006192:	4b0a      	ldr	r3, [pc, #40]	@ (80061bc <vPortExitCritical+0x54>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3b01      	subs	r3, #1
 8006198:	4a08      	ldr	r2, [pc, #32]	@ (80061bc <vPortExitCritical+0x54>)
 800619a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800619c:	4b07      	ldr	r3, [pc, #28]	@ (80061bc <vPortExitCritical+0x54>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <vPortExitCritical+0x48>
 80061a4:	2300      	movs	r3, #0
 80061a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	20000014 	.word	0x20000014

080061c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061c0:	f3ef 8009 	mrs	r0, PSP
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	4b15      	ldr	r3, [pc, #84]	@ (8006220 <pxCurrentTCBConst>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	f01e 0f10 	tst.w	lr, #16
 80061d0:	bf08      	it	eq
 80061d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061da:	6010      	str	r0, [r2, #0]
 80061dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80061e4:	b672      	cpsid	i
 80061e6:	f380 8811 	msr	BASEPRI, r0
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	b662      	cpsie	i
 80061f4:	f7ff f9f2 	bl	80055dc <vTaskSwitchContext>
 80061f8:	f04f 0000 	mov.w	r0, #0
 80061fc:	f380 8811 	msr	BASEPRI, r0
 8006200:	bc09      	pop	{r0, r3}
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	6808      	ldr	r0, [r1, #0]
 8006206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620a:	f01e 0f10 	tst.w	lr, #16
 800620e:	bf08      	it	eq
 8006210:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006214:	f380 8809 	msr	PSP, r0
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop

08006220 <pxCurrentTCBConst>:
 8006220:	20000834 	.word	0x20000834
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop

08006228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	b672      	cpsid	i
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	b662      	cpsie	i
 8006242:	607b      	str	r3, [r7, #4]
}
 8006244:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006246:	f7ff f90d 	bl	8005464 <xTaskIncrementTick>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006250:	4b06      	ldr	r3, [pc, #24]	@ (800626c <xPortSysTickHandler+0x44>)
 8006252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	2300      	movs	r3, #0
 800625a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	f383 8811 	msr	BASEPRI, r3
}
 8006262:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	e000ed04 	.word	0xe000ed04

08006270 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006274:	4b0b      	ldr	r3, [pc, #44]	@ (80062a4 <vPortSetupTimerInterrupt+0x34>)
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800627a:	4b0b      	ldr	r3, [pc, #44]	@ (80062a8 <vPortSetupTimerInterrupt+0x38>)
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006280:	4b0a      	ldr	r3, [pc, #40]	@ (80062ac <vPortSetupTimerInterrupt+0x3c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a0a      	ldr	r2, [pc, #40]	@ (80062b0 <vPortSetupTimerInterrupt+0x40>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	099b      	lsrs	r3, r3, #6
 800628c:	4a09      	ldr	r2, [pc, #36]	@ (80062b4 <vPortSetupTimerInterrupt+0x44>)
 800628e:	3b01      	subs	r3, #1
 8006290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006292:	4b04      	ldr	r3, [pc, #16]	@ (80062a4 <vPortSetupTimerInterrupt+0x34>)
 8006294:	2207      	movs	r2, #7
 8006296:	601a      	str	r2, [r3, #0]
}
 8006298:	bf00      	nop
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	e000e010 	.word	0xe000e010
 80062a8:	e000e018 	.word	0xe000e018
 80062ac:	20000008 	.word	0x20000008
 80062b0:	10624dd3 	.word	0x10624dd3
 80062b4:	e000e014 	.word	0xe000e014

080062b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80062c8 <vPortEnableVFP+0x10>
 80062bc:	6801      	ldr	r1, [r0, #0]
 80062be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80062c2:	6001      	str	r1, [r0, #0]
 80062c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062c6:	bf00      	nop
 80062c8:	e000ed88 	.word	0xe000ed88

080062cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	@ 0x28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062d4:	2300      	movs	r3, #0
 80062d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062d8:	f7fe ff86 	bl	80051e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062dc:	4b5d      	ldr	r3, [pc, #372]	@ (8006454 <pvPortMalloc+0x188>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062e4:	f000 f920 	bl	8006528 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062e8:	4b5b      	ldr	r3, [pc, #364]	@ (8006458 <pvPortMalloc+0x18c>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f040 8094 	bne.w	800641e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d020      	beq.n	800633e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80062fc:	2208      	movs	r2, #8
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4413      	add	r3, r2
 8006302:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	2b00      	cmp	r3, #0
 800630c:	d017      	beq.n	800633e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f023 0307 	bic.w	r3, r3, #7
 8006314:	3308      	adds	r3, #8
 8006316:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00d      	beq.n	800633e <pvPortMalloc+0x72>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006326:	b672      	cpsid	i
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	b662      	cpsie	i
 8006336:	617b      	str	r3, [r7, #20]
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	e7fd      	b.n	800633a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d06c      	beq.n	800641e <pvPortMalloc+0x152>
 8006344:	4b45      	ldr	r3, [pc, #276]	@ (800645c <pvPortMalloc+0x190>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	429a      	cmp	r2, r3
 800634c:	d867      	bhi.n	800641e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800634e:	4b44      	ldr	r3, [pc, #272]	@ (8006460 <pvPortMalloc+0x194>)
 8006350:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006352:	4b43      	ldr	r3, [pc, #268]	@ (8006460 <pvPortMalloc+0x194>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006358:	e004      	b.n	8006364 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	429a      	cmp	r2, r3
 800636c:	d903      	bls.n	8006376 <pvPortMalloc+0xaa>
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1f1      	bne.n	800635a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006376:	4b37      	ldr	r3, [pc, #220]	@ (8006454 <pvPortMalloc+0x188>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800637c:	429a      	cmp	r2, r3
 800637e:	d04e      	beq.n	800641e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2208      	movs	r2, #8
 8006386:	4413      	add	r3, r2
 8006388:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	1ad2      	subs	r2, r2, r3
 800639a:	2308      	movs	r3, #8
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	429a      	cmp	r2, r3
 80063a0:	d922      	bls.n	80063e8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4413      	add	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00d      	beq.n	80063d0 <pvPortMalloc+0x104>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b8:	b672      	cpsid	i
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	b662      	cpsie	i
 80063c8:	613b      	str	r3, [r7, #16]
}
 80063ca:	bf00      	nop
 80063cc:	bf00      	nop
 80063ce:	e7fd      	b.n	80063cc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	1ad2      	subs	r2, r2, r3
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063e2:	69b8      	ldr	r0, [r7, #24]
 80063e4:	f000 f902 	bl	80065ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063e8:	4b1c      	ldr	r3, [pc, #112]	@ (800645c <pvPortMalloc+0x190>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	4a1a      	ldr	r2, [pc, #104]	@ (800645c <pvPortMalloc+0x190>)
 80063f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063f6:	4b19      	ldr	r3, [pc, #100]	@ (800645c <pvPortMalloc+0x190>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006464 <pvPortMalloc+0x198>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d203      	bcs.n	800640a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006402:	4b16      	ldr	r3, [pc, #88]	@ (800645c <pvPortMalloc+0x190>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a17      	ldr	r2, [pc, #92]	@ (8006464 <pvPortMalloc+0x198>)
 8006408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	4b12      	ldr	r3, [pc, #72]	@ (8006458 <pvPortMalloc+0x18c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	431a      	orrs	r2, r3
 8006414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800641e:	f7fe fef1 	bl	8005204 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00d      	beq.n	8006448 <pvPortMalloc+0x17c>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	b672      	cpsid	i
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	b662      	cpsie	i
 8006440:	60fb      	str	r3, [r7, #12]
}
 8006442:	bf00      	nop
 8006444:	bf00      	nop
 8006446:	e7fd      	b.n	8006444 <pvPortMalloc+0x178>
	return pvReturn;
 8006448:	69fb      	ldr	r3, [r7, #28]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3728      	adds	r7, #40	@ 0x28
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20008178 	.word	0x20008178
 8006458:	20008184 	.word	0x20008184
 800645c:	2000817c 	.word	0x2000817c
 8006460:	20008170 	.word	0x20008170
 8006464:	20008180 	.word	0x20008180

08006468 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d04e      	beq.n	8006518 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800647a:	2308      	movs	r3, #8
 800647c:	425b      	negs	r3, r3
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4413      	add	r3, r2
 8006482:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	4b24      	ldr	r3, [pc, #144]	@ (8006520 <vPortFree+0xb8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4013      	ands	r3, r2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10d      	bne.n	80064b2 <vPortFree+0x4a>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649a:	b672      	cpsid	i
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	b662      	cpsie	i
 80064aa:	60fb      	str	r3, [r7, #12]
}
 80064ac:	bf00      	nop
 80064ae:	bf00      	nop
 80064b0:	e7fd      	b.n	80064ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00d      	beq.n	80064d6 <vPortFree+0x6e>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	b672      	cpsid	i
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	b662      	cpsie	i
 80064ce:	60bb      	str	r3, [r7, #8]
}
 80064d0:	bf00      	nop
 80064d2:	bf00      	nop
 80064d4:	e7fd      	b.n	80064d2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	4b11      	ldr	r3, [pc, #68]	@ (8006520 <vPortFree+0xb8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4013      	ands	r3, r2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d019      	beq.n	8006518 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d115      	bne.n	8006518 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006520 <vPortFree+0xb8>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	43db      	mvns	r3, r3
 80064f6:	401a      	ands	r2, r3
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064fc:	f7fe fe74 	bl	80051e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	4b07      	ldr	r3, [pc, #28]	@ (8006524 <vPortFree+0xbc>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4413      	add	r3, r2
 800650a:	4a06      	ldr	r2, [pc, #24]	@ (8006524 <vPortFree+0xbc>)
 800650c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800650e:	6938      	ldr	r0, [r7, #16]
 8006510:	f000 f86c 	bl	80065ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006514:	f7fe fe76 	bl	8005204 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006518:	bf00      	nop
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20008184 	.word	0x20008184
 8006524:	2000817c 	.word	0x2000817c

08006528 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800652e:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8006532:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006534:	4b27      	ldr	r3, [pc, #156]	@ (80065d4 <prvHeapInit+0xac>)
 8006536:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00c      	beq.n	800655c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3307      	adds	r3, #7
 8006546:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0307 	bic.w	r3, r3, #7
 800654e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	4a1f      	ldr	r2, [pc, #124]	@ (80065d4 <prvHeapInit+0xac>)
 8006558:	4413      	add	r3, r2
 800655a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006560:	4a1d      	ldr	r2, [pc, #116]	@ (80065d8 <prvHeapInit+0xb0>)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006566:	4b1c      	ldr	r3, [pc, #112]	@ (80065d8 <prvHeapInit+0xb0>)
 8006568:	2200      	movs	r2, #0
 800656a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	4413      	add	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006574:	2208      	movs	r2, #8
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	1a9b      	subs	r3, r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0307 	bic.w	r3, r3, #7
 8006582:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4a15      	ldr	r2, [pc, #84]	@ (80065dc <prvHeapInit+0xb4>)
 8006588:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800658a:	4b14      	ldr	r3, [pc, #80]	@ (80065dc <prvHeapInit+0xb4>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2200      	movs	r2, #0
 8006590:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006592:	4b12      	ldr	r3, [pc, #72]	@ (80065dc <prvHeapInit+0xb4>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	1ad2      	subs	r2, r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065a8:	4b0c      	ldr	r3, [pc, #48]	@ (80065dc <prvHeapInit+0xb4>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	4a0a      	ldr	r2, [pc, #40]	@ (80065e0 <prvHeapInit+0xb8>)
 80065b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	4a09      	ldr	r2, [pc, #36]	@ (80065e4 <prvHeapInit+0xbc>)
 80065be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065c0:	4b09      	ldr	r3, [pc, #36]	@ (80065e8 <prvHeapInit+0xc0>)
 80065c2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80065c6:	601a      	str	r2, [r3, #0]
}
 80065c8:	bf00      	nop
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	20000970 	.word	0x20000970
 80065d8:	20008170 	.word	0x20008170
 80065dc:	20008178 	.word	0x20008178
 80065e0:	20008180 	.word	0x20008180
 80065e4:	2000817c 	.word	0x2000817c
 80065e8:	20008184 	.word	0x20008184

080065ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065f4:	4b28      	ldr	r3, [pc, #160]	@ (8006698 <prvInsertBlockIntoFreeList+0xac>)
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	e002      	b.n	8006600 <prvInsertBlockIntoFreeList+0x14>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	429a      	cmp	r2, r3
 8006608:	d8f7      	bhi.n	80065fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	4413      	add	r3, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	429a      	cmp	r2, r3
 800661a:	d108      	bne.n	800662e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	441a      	add	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	441a      	add	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d118      	bne.n	8006674 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4b15      	ldr	r3, [pc, #84]	@ (800669c <prvInsertBlockIntoFreeList+0xb0>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d00d      	beq.n	800666a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	441a      	add	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	e008      	b.n	800667c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800666a:	4b0c      	ldr	r3, [pc, #48]	@ (800669c <prvInsertBlockIntoFreeList+0xb0>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	e003      	b.n	800667c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	d002      	beq.n	800668a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	20008170 	.word	0x20008170
 800669c:	20008178 	.word	0x20008178

080066a0 <atoi>:
 80066a0:	220a      	movs	r2, #10
 80066a2:	2100      	movs	r1, #0
 80066a4:	f000 b87a 	b.w	800679c <strtol>

080066a8 <_strtol_l.isra.0>:
 80066a8:	2b24      	cmp	r3, #36	@ 0x24
 80066aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ae:	4686      	mov	lr, r0
 80066b0:	4690      	mov	r8, r2
 80066b2:	d801      	bhi.n	80066b8 <_strtol_l.isra.0+0x10>
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d106      	bne.n	80066c6 <_strtol_l.isra.0+0x1e>
 80066b8:	f000 fb88 	bl	8006dcc <__errno>
 80066bc:	2316      	movs	r3, #22
 80066be:	6003      	str	r3, [r0, #0]
 80066c0:	2000      	movs	r0, #0
 80066c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c6:	4834      	ldr	r0, [pc, #208]	@ (8006798 <_strtol_l.isra.0+0xf0>)
 80066c8:	460d      	mov	r5, r1
 80066ca:	462a      	mov	r2, r5
 80066cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066d0:	5d06      	ldrb	r6, [r0, r4]
 80066d2:	f016 0608 	ands.w	r6, r6, #8
 80066d6:	d1f8      	bne.n	80066ca <_strtol_l.isra.0+0x22>
 80066d8:	2c2d      	cmp	r4, #45	@ 0x2d
 80066da:	d110      	bne.n	80066fe <_strtol_l.isra.0+0x56>
 80066dc:	782c      	ldrb	r4, [r5, #0]
 80066de:	2601      	movs	r6, #1
 80066e0:	1c95      	adds	r5, r2, #2
 80066e2:	f033 0210 	bics.w	r2, r3, #16
 80066e6:	d115      	bne.n	8006714 <_strtol_l.isra.0+0x6c>
 80066e8:	2c30      	cmp	r4, #48	@ 0x30
 80066ea:	d10d      	bne.n	8006708 <_strtol_l.isra.0+0x60>
 80066ec:	782a      	ldrb	r2, [r5, #0]
 80066ee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80066f2:	2a58      	cmp	r2, #88	@ 0x58
 80066f4:	d108      	bne.n	8006708 <_strtol_l.isra.0+0x60>
 80066f6:	786c      	ldrb	r4, [r5, #1]
 80066f8:	3502      	adds	r5, #2
 80066fa:	2310      	movs	r3, #16
 80066fc:	e00a      	b.n	8006714 <_strtol_l.isra.0+0x6c>
 80066fe:	2c2b      	cmp	r4, #43	@ 0x2b
 8006700:	bf04      	itt	eq
 8006702:	782c      	ldrbeq	r4, [r5, #0]
 8006704:	1c95      	addeq	r5, r2, #2
 8006706:	e7ec      	b.n	80066e2 <_strtol_l.isra.0+0x3a>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1f6      	bne.n	80066fa <_strtol_l.isra.0+0x52>
 800670c:	2c30      	cmp	r4, #48	@ 0x30
 800670e:	bf14      	ite	ne
 8006710:	230a      	movne	r3, #10
 8006712:	2308      	moveq	r3, #8
 8006714:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006718:	f10c 3cff 	add.w	ip, ip, #4294967295
 800671c:	2200      	movs	r2, #0
 800671e:	fbbc f9f3 	udiv	r9, ip, r3
 8006722:	4610      	mov	r0, r2
 8006724:	fb03 ca19 	mls	sl, r3, r9, ip
 8006728:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800672c:	2f09      	cmp	r7, #9
 800672e:	d80f      	bhi.n	8006750 <_strtol_l.isra.0+0xa8>
 8006730:	463c      	mov	r4, r7
 8006732:	42a3      	cmp	r3, r4
 8006734:	dd1b      	ble.n	800676e <_strtol_l.isra.0+0xc6>
 8006736:	1c57      	adds	r7, r2, #1
 8006738:	d007      	beq.n	800674a <_strtol_l.isra.0+0xa2>
 800673a:	4581      	cmp	r9, r0
 800673c:	d314      	bcc.n	8006768 <_strtol_l.isra.0+0xc0>
 800673e:	d101      	bne.n	8006744 <_strtol_l.isra.0+0x9c>
 8006740:	45a2      	cmp	sl, r4
 8006742:	db11      	blt.n	8006768 <_strtol_l.isra.0+0xc0>
 8006744:	fb00 4003 	mla	r0, r0, r3, r4
 8006748:	2201      	movs	r2, #1
 800674a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800674e:	e7eb      	b.n	8006728 <_strtol_l.isra.0+0x80>
 8006750:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006754:	2f19      	cmp	r7, #25
 8006756:	d801      	bhi.n	800675c <_strtol_l.isra.0+0xb4>
 8006758:	3c37      	subs	r4, #55	@ 0x37
 800675a:	e7ea      	b.n	8006732 <_strtol_l.isra.0+0x8a>
 800675c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006760:	2f19      	cmp	r7, #25
 8006762:	d804      	bhi.n	800676e <_strtol_l.isra.0+0xc6>
 8006764:	3c57      	subs	r4, #87	@ 0x57
 8006766:	e7e4      	b.n	8006732 <_strtol_l.isra.0+0x8a>
 8006768:	f04f 32ff 	mov.w	r2, #4294967295
 800676c:	e7ed      	b.n	800674a <_strtol_l.isra.0+0xa2>
 800676e:	1c53      	adds	r3, r2, #1
 8006770:	d108      	bne.n	8006784 <_strtol_l.isra.0+0xdc>
 8006772:	2322      	movs	r3, #34	@ 0x22
 8006774:	f8ce 3000 	str.w	r3, [lr]
 8006778:	4660      	mov	r0, ip
 800677a:	f1b8 0f00 	cmp.w	r8, #0
 800677e:	d0a0      	beq.n	80066c2 <_strtol_l.isra.0+0x1a>
 8006780:	1e69      	subs	r1, r5, #1
 8006782:	e006      	b.n	8006792 <_strtol_l.isra.0+0xea>
 8006784:	b106      	cbz	r6, 8006788 <_strtol_l.isra.0+0xe0>
 8006786:	4240      	negs	r0, r0
 8006788:	f1b8 0f00 	cmp.w	r8, #0
 800678c:	d099      	beq.n	80066c2 <_strtol_l.isra.0+0x1a>
 800678e:	2a00      	cmp	r2, #0
 8006790:	d1f6      	bne.n	8006780 <_strtol_l.isra.0+0xd8>
 8006792:	f8c8 1000 	str.w	r1, [r8]
 8006796:	e794      	b.n	80066c2 <_strtol_l.isra.0+0x1a>
 8006798:	08007fa9 	.word	0x08007fa9

0800679c <strtol>:
 800679c:	4613      	mov	r3, r2
 800679e:	460a      	mov	r2, r1
 80067a0:	4601      	mov	r1, r0
 80067a2:	4802      	ldr	r0, [pc, #8]	@ (80067ac <strtol+0x10>)
 80067a4:	6800      	ldr	r0, [r0, #0]
 80067a6:	f7ff bf7f 	b.w	80066a8 <_strtol_l.isra.0>
 80067aa:	bf00      	nop
 80067ac:	20000024 	.word	0x20000024

080067b0 <std>:
 80067b0:	2300      	movs	r3, #0
 80067b2:	b510      	push	{r4, lr}
 80067b4:	4604      	mov	r4, r0
 80067b6:	e9c0 3300 	strd	r3, r3, [r0]
 80067ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067be:	6083      	str	r3, [r0, #8]
 80067c0:	8181      	strh	r1, [r0, #12]
 80067c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80067c4:	81c2      	strh	r2, [r0, #14]
 80067c6:	6183      	str	r3, [r0, #24]
 80067c8:	4619      	mov	r1, r3
 80067ca:	2208      	movs	r2, #8
 80067cc:	305c      	adds	r0, #92	@ 0x5c
 80067ce:	f000 fa51 	bl	8006c74 <memset>
 80067d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006808 <std+0x58>)
 80067d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80067d6:	4b0d      	ldr	r3, [pc, #52]	@ (800680c <std+0x5c>)
 80067d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067da:	4b0d      	ldr	r3, [pc, #52]	@ (8006810 <std+0x60>)
 80067dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067de:	4b0d      	ldr	r3, [pc, #52]	@ (8006814 <std+0x64>)
 80067e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80067e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006818 <std+0x68>)
 80067e4:	6224      	str	r4, [r4, #32]
 80067e6:	429c      	cmp	r4, r3
 80067e8:	d006      	beq.n	80067f8 <std+0x48>
 80067ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067ee:	4294      	cmp	r4, r2
 80067f0:	d002      	beq.n	80067f8 <std+0x48>
 80067f2:	33d0      	adds	r3, #208	@ 0xd0
 80067f4:	429c      	cmp	r4, r3
 80067f6:	d105      	bne.n	8006804 <std+0x54>
 80067f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006800:	f000 bb0e 	b.w	8006e20 <__retarget_lock_init_recursive>
 8006804:	bd10      	pop	{r4, pc}
 8006806:	bf00      	nop
 8006808:	08006ac5 	.word	0x08006ac5
 800680c:	08006ae7 	.word	0x08006ae7
 8006810:	08006b1f 	.word	0x08006b1f
 8006814:	08006b43 	.word	0x08006b43
 8006818:	20008188 	.word	0x20008188

0800681c <stdio_exit_handler>:
 800681c:	4a02      	ldr	r2, [pc, #8]	@ (8006828 <stdio_exit_handler+0xc>)
 800681e:	4903      	ldr	r1, [pc, #12]	@ (800682c <stdio_exit_handler+0x10>)
 8006820:	4803      	ldr	r0, [pc, #12]	@ (8006830 <stdio_exit_handler+0x14>)
 8006822:	f000 b869 	b.w	80068f8 <_fwalk_sglue>
 8006826:	bf00      	nop
 8006828:	20000018 	.word	0x20000018
 800682c:	08007999 	.word	0x08007999
 8006830:	20000028 	.word	0x20000028

08006834 <cleanup_stdio>:
 8006834:	6841      	ldr	r1, [r0, #4]
 8006836:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <cleanup_stdio+0x34>)
 8006838:	4299      	cmp	r1, r3
 800683a:	b510      	push	{r4, lr}
 800683c:	4604      	mov	r4, r0
 800683e:	d001      	beq.n	8006844 <cleanup_stdio+0x10>
 8006840:	f001 f8aa 	bl	8007998 <_fflush_r>
 8006844:	68a1      	ldr	r1, [r4, #8]
 8006846:	4b09      	ldr	r3, [pc, #36]	@ (800686c <cleanup_stdio+0x38>)
 8006848:	4299      	cmp	r1, r3
 800684a:	d002      	beq.n	8006852 <cleanup_stdio+0x1e>
 800684c:	4620      	mov	r0, r4
 800684e:	f001 f8a3 	bl	8007998 <_fflush_r>
 8006852:	68e1      	ldr	r1, [r4, #12]
 8006854:	4b06      	ldr	r3, [pc, #24]	@ (8006870 <cleanup_stdio+0x3c>)
 8006856:	4299      	cmp	r1, r3
 8006858:	d004      	beq.n	8006864 <cleanup_stdio+0x30>
 800685a:	4620      	mov	r0, r4
 800685c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006860:	f001 b89a 	b.w	8007998 <_fflush_r>
 8006864:	bd10      	pop	{r4, pc}
 8006866:	bf00      	nop
 8006868:	20008188 	.word	0x20008188
 800686c:	200081f0 	.word	0x200081f0
 8006870:	20008258 	.word	0x20008258

08006874 <global_stdio_init.part.0>:
 8006874:	b510      	push	{r4, lr}
 8006876:	4b0b      	ldr	r3, [pc, #44]	@ (80068a4 <global_stdio_init.part.0+0x30>)
 8006878:	4c0b      	ldr	r4, [pc, #44]	@ (80068a8 <global_stdio_init.part.0+0x34>)
 800687a:	4a0c      	ldr	r2, [pc, #48]	@ (80068ac <global_stdio_init.part.0+0x38>)
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	4620      	mov	r0, r4
 8006880:	2200      	movs	r2, #0
 8006882:	2104      	movs	r1, #4
 8006884:	f7ff ff94 	bl	80067b0 <std>
 8006888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800688c:	2201      	movs	r2, #1
 800688e:	2109      	movs	r1, #9
 8006890:	f7ff ff8e 	bl	80067b0 <std>
 8006894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006898:	2202      	movs	r2, #2
 800689a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800689e:	2112      	movs	r1, #18
 80068a0:	f7ff bf86 	b.w	80067b0 <std>
 80068a4:	200082c0 	.word	0x200082c0
 80068a8:	20008188 	.word	0x20008188
 80068ac:	0800681d 	.word	0x0800681d

080068b0 <__sfp_lock_acquire>:
 80068b0:	4801      	ldr	r0, [pc, #4]	@ (80068b8 <__sfp_lock_acquire+0x8>)
 80068b2:	f000 bab6 	b.w	8006e22 <__retarget_lock_acquire_recursive>
 80068b6:	bf00      	nop
 80068b8:	200082c9 	.word	0x200082c9

080068bc <__sfp_lock_release>:
 80068bc:	4801      	ldr	r0, [pc, #4]	@ (80068c4 <__sfp_lock_release+0x8>)
 80068be:	f000 bab1 	b.w	8006e24 <__retarget_lock_release_recursive>
 80068c2:	bf00      	nop
 80068c4:	200082c9 	.word	0x200082c9

080068c8 <__sinit>:
 80068c8:	b510      	push	{r4, lr}
 80068ca:	4604      	mov	r4, r0
 80068cc:	f7ff fff0 	bl	80068b0 <__sfp_lock_acquire>
 80068d0:	6a23      	ldr	r3, [r4, #32]
 80068d2:	b11b      	cbz	r3, 80068dc <__sinit+0x14>
 80068d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d8:	f7ff bff0 	b.w	80068bc <__sfp_lock_release>
 80068dc:	4b04      	ldr	r3, [pc, #16]	@ (80068f0 <__sinit+0x28>)
 80068de:	6223      	str	r3, [r4, #32]
 80068e0:	4b04      	ldr	r3, [pc, #16]	@ (80068f4 <__sinit+0x2c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1f5      	bne.n	80068d4 <__sinit+0xc>
 80068e8:	f7ff ffc4 	bl	8006874 <global_stdio_init.part.0>
 80068ec:	e7f2      	b.n	80068d4 <__sinit+0xc>
 80068ee:	bf00      	nop
 80068f0:	08006835 	.word	0x08006835
 80068f4:	200082c0 	.word	0x200082c0

080068f8 <_fwalk_sglue>:
 80068f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068fc:	4607      	mov	r7, r0
 80068fe:	4688      	mov	r8, r1
 8006900:	4614      	mov	r4, r2
 8006902:	2600      	movs	r6, #0
 8006904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006908:	f1b9 0901 	subs.w	r9, r9, #1
 800690c:	d505      	bpl.n	800691a <_fwalk_sglue+0x22>
 800690e:	6824      	ldr	r4, [r4, #0]
 8006910:	2c00      	cmp	r4, #0
 8006912:	d1f7      	bne.n	8006904 <_fwalk_sglue+0xc>
 8006914:	4630      	mov	r0, r6
 8006916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800691a:	89ab      	ldrh	r3, [r5, #12]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d907      	bls.n	8006930 <_fwalk_sglue+0x38>
 8006920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006924:	3301      	adds	r3, #1
 8006926:	d003      	beq.n	8006930 <_fwalk_sglue+0x38>
 8006928:	4629      	mov	r1, r5
 800692a:	4638      	mov	r0, r7
 800692c:	47c0      	blx	r8
 800692e:	4306      	orrs	r6, r0
 8006930:	3568      	adds	r5, #104	@ 0x68
 8006932:	e7e9      	b.n	8006908 <_fwalk_sglue+0x10>

08006934 <iprintf>:
 8006934:	b40f      	push	{r0, r1, r2, r3}
 8006936:	b507      	push	{r0, r1, r2, lr}
 8006938:	4906      	ldr	r1, [pc, #24]	@ (8006954 <iprintf+0x20>)
 800693a:	ab04      	add	r3, sp, #16
 800693c:	6808      	ldr	r0, [r1, #0]
 800693e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006942:	6881      	ldr	r1, [r0, #8]
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	f000 fcff 	bl	8007348 <_vfiprintf_r>
 800694a:	b003      	add	sp, #12
 800694c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006950:	b004      	add	sp, #16
 8006952:	4770      	bx	lr
 8006954:	20000024 	.word	0x20000024

08006958 <_puts_r>:
 8006958:	6a03      	ldr	r3, [r0, #32]
 800695a:	b570      	push	{r4, r5, r6, lr}
 800695c:	6884      	ldr	r4, [r0, #8]
 800695e:	4605      	mov	r5, r0
 8006960:	460e      	mov	r6, r1
 8006962:	b90b      	cbnz	r3, 8006968 <_puts_r+0x10>
 8006964:	f7ff ffb0 	bl	80068c8 <__sinit>
 8006968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800696a:	07db      	lsls	r3, r3, #31
 800696c:	d405      	bmi.n	800697a <_puts_r+0x22>
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	0598      	lsls	r0, r3, #22
 8006972:	d402      	bmi.n	800697a <_puts_r+0x22>
 8006974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006976:	f000 fa54 	bl	8006e22 <__retarget_lock_acquire_recursive>
 800697a:	89a3      	ldrh	r3, [r4, #12]
 800697c:	0719      	lsls	r1, r3, #28
 800697e:	d502      	bpl.n	8006986 <_puts_r+0x2e>
 8006980:	6923      	ldr	r3, [r4, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d135      	bne.n	80069f2 <_puts_r+0x9a>
 8006986:	4621      	mov	r1, r4
 8006988:	4628      	mov	r0, r5
 800698a:	f000 f91d 	bl	8006bc8 <__swsetup_r>
 800698e:	b380      	cbz	r0, 80069f2 <_puts_r+0x9a>
 8006990:	f04f 35ff 	mov.w	r5, #4294967295
 8006994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006996:	07da      	lsls	r2, r3, #31
 8006998:	d405      	bmi.n	80069a6 <_puts_r+0x4e>
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	059b      	lsls	r3, r3, #22
 800699e:	d402      	bmi.n	80069a6 <_puts_r+0x4e>
 80069a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069a2:	f000 fa3f 	bl	8006e24 <__retarget_lock_release_recursive>
 80069a6:	4628      	mov	r0, r5
 80069a8:	bd70      	pop	{r4, r5, r6, pc}
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	da04      	bge.n	80069b8 <_puts_r+0x60>
 80069ae:	69a2      	ldr	r2, [r4, #24]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	dc17      	bgt.n	80069e4 <_puts_r+0x8c>
 80069b4:	290a      	cmp	r1, #10
 80069b6:	d015      	beq.n	80069e4 <_puts_r+0x8c>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	6022      	str	r2, [r4, #0]
 80069be:	7019      	strb	r1, [r3, #0]
 80069c0:	68a3      	ldr	r3, [r4, #8]
 80069c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80069c6:	3b01      	subs	r3, #1
 80069c8:	60a3      	str	r3, [r4, #8]
 80069ca:	2900      	cmp	r1, #0
 80069cc:	d1ed      	bne.n	80069aa <_puts_r+0x52>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	da11      	bge.n	80069f6 <_puts_r+0x9e>
 80069d2:	4622      	mov	r2, r4
 80069d4:	210a      	movs	r1, #10
 80069d6:	4628      	mov	r0, r5
 80069d8:	f000 f8b7 	bl	8006b4a <__swbuf_r>
 80069dc:	3001      	adds	r0, #1
 80069de:	d0d7      	beq.n	8006990 <_puts_r+0x38>
 80069e0:	250a      	movs	r5, #10
 80069e2:	e7d7      	b.n	8006994 <_puts_r+0x3c>
 80069e4:	4622      	mov	r2, r4
 80069e6:	4628      	mov	r0, r5
 80069e8:	f000 f8af 	bl	8006b4a <__swbuf_r>
 80069ec:	3001      	adds	r0, #1
 80069ee:	d1e7      	bne.n	80069c0 <_puts_r+0x68>
 80069f0:	e7ce      	b.n	8006990 <_puts_r+0x38>
 80069f2:	3e01      	subs	r6, #1
 80069f4:	e7e4      	b.n	80069c0 <_puts_r+0x68>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	6022      	str	r2, [r4, #0]
 80069fc:	220a      	movs	r2, #10
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	e7ee      	b.n	80069e0 <_puts_r+0x88>
	...

08006a04 <puts>:
 8006a04:	4b02      	ldr	r3, [pc, #8]	@ (8006a10 <puts+0xc>)
 8006a06:	4601      	mov	r1, r0
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	f7ff bfa5 	b.w	8006958 <_puts_r>
 8006a0e:	bf00      	nop
 8006a10:	20000024 	.word	0x20000024

08006a14 <sniprintf>:
 8006a14:	b40c      	push	{r2, r3}
 8006a16:	b530      	push	{r4, r5, lr}
 8006a18:	4b18      	ldr	r3, [pc, #96]	@ (8006a7c <sniprintf+0x68>)
 8006a1a:	1e0c      	subs	r4, r1, #0
 8006a1c:	681d      	ldr	r5, [r3, #0]
 8006a1e:	b09d      	sub	sp, #116	@ 0x74
 8006a20:	da08      	bge.n	8006a34 <sniprintf+0x20>
 8006a22:	238b      	movs	r3, #139	@ 0x8b
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2a:	b01d      	add	sp, #116	@ 0x74
 8006a2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a30:	b002      	add	sp, #8
 8006a32:	4770      	bx	lr
 8006a34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006a38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006a42:	bf14      	ite	ne
 8006a44:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006a48:	4623      	moveq	r3, r4
 8006a4a:	9304      	str	r3, [sp, #16]
 8006a4c:	9307      	str	r3, [sp, #28]
 8006a4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a52:	9002      	str	r0, [sp, #8]
 8006a54:	9006      	str	r0, [sp, #24]
 8006a56:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006a5c:	ab21      	add	r3, sp, #132	@ 0x84
 8006a5e:	a902      	add	r1, sp, #8
 8006a60:	4628      	mov	r0, r5
 8006a62:	9301      	str	r3, [sp, #4]
 8006a64:	f000 fb4a 	bl	80070fc <_svfiprintf_r>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	bfbc      	itt	lt
 8006a6c:	238b      	movlt	r3, #139	@ 0x8b
 8006a6e:	602b      	strlt	r3, [r5, #0]
 8006a70:	2c00      	cmp	r4, #0
 8006a72:	d0da      	beq.n	8006a2a <sniprintf+0x16>
 8006a74:	9b02      	ldr	r3, [sp, #8]
 8006a76:	2200      	movs	r2, #0
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	e7d6      	b.n	8006a2a <sniprintf+0x16>
 8006a7c:	20000024 	.word	0x20000024

08006a80 <siprintf>:
 8006a80:	b40e      	push	{r1, r2, r3}
 8006a82:	b510      	push	{r4, lr}
 8006a84:	b09d      	sub	sp, #116	@ 0x74
 8006a86:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006a88:	9002      	str	r0, [sp, #8]
 8006a8a:	9006      	str	r0, [sp, #24]
 8006a8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a90:	480a      	ldr	r0, [pc, #40]	@ (8006abc <siprintf+0x3c>)
 8006a92:	9107      	str	r1, [sp, #28]
 8006a94:	9104      	str	r1, [sp, #16]
 8006a96:	490a      	ldr	r1, [pc, #40]	@ (8006ac0 <siprintf+0x40>)
 8006a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a9c:	9105      	str	r1, [sp, #20]
 8006a9e:	2400      	movs	r4, #0
 8006aa0:	a902      	add	r1, sp, #8
 8006aa2:	6800      	ldr	r0, [r0, #0]
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006aa8:	f000 fb28 	bl	80070fc <_svfiprintf_r>
 8006aac:	9b02      	ldr	r3, [sp, #8]
 8006aae:	701c      	strb	r4, [r3, #0]
 8006ab0:	b01d      	add	sp, #116	@ 0x74
 8006ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab6:	b003      	add	sp, #12
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000024 	.word	0x20000024
 8006ac0:	ffff0208 	.word	0xffff0208

08006ac4 <__sread>:
 8006ac4:	b510      	push	{r4, lr}
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006acc:	f000 f95a 	bl	8006d84 <_read_r>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	bfab      	itete	ge
 8006ad4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ad8:	181b      	addge	r3, r3, r0
 8006ada:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ade:	bfac      	ite	ge
 8006ae0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ae2:	81a3      	strhlt	r3, [r4, #12]
 8006ae4:	bd10      	pop	{r4, pc}

08006ae6 <__swrite>:
 8006ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aea:	461f      	mov	r7, r3
 8006aec:	898b      	ldrh	r3, [r1, #12]
 8006aee:	05db      	lsls	r3, r3, #23
 8006af0:	4605      	mov	r5, r0
 8006af2:	460c      	mov	r4, r1
 8006af4:	4616      	mov	r6, r2
 8006af6:	d505      	bpl.n	8006b04 <__swrite+0x1e>
 8006af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afc:	2302      	movs	r3, #2
 8006afe:	2200      	movs	r2, #0
 8006b00:	f000 f92e 	bl	8006d60 <_lseek_r>
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	4632      	mov	r2, r6
 8006b12:	463b      	mov	r3, r7
 8006b14:	4628      	mov	r0, r5
 8006b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1a:	f000 b945 	b.w	8006da8 <_write_r>

08006b1e <__sseek>:
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	460c      	mov	r4, r1
 8006b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b26:	f000 f91b 	bl	8006d60 <_lseek_r>
 8006b2a:	1c43      	adds	r3, r0, #1
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	bf15      	itete	ne
 8006b30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b3a:	81a3      	strheq	r3, [r4, #12]
 8006b3c:	bf18      	it	ne
 8006b3e:	81a3      	strhne	r3, [r4, #12]
 8006b40:	bd10      	pop	{r4, pc}

08006b42 <__sclose>:
 8006b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b46:	f000 b89d 	b.w	8006c84 <_close_r>

08006b4a <__swbuf_r>:
 8006b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4c:	460e      	mov	r6, r1
 8006b4e:	4614      	mov	r4, r2
 8006b50:	4605      	mov	r5, r0
 8006b52:	b118      	cbz	r0, 8006b5c <__swbuf_r+0x12>
 8006b54:	6a03      	ldr	r3, [r0, #32]
 8006b56:	b90b      	cbnz	r3, 8006b5c <__swbuf_r+0x12>
 8006b58:	f7ff feb6 	bl	80068c8 <__sinit>
 8006b5c:	69a3      	ldr	r3, [r4, #24]
 8006b5e:	60a3      	str	r3, [r4, #8]
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	071a      	lsls	r2, r3, #28
 8006b64:	d501      	bpl.n	8006b6a <__swbuf_r+0x20>
 8006b66:	6923      	ldr	r3, [r4, #16]
 8006b68:	b943      	cbnz	r3, 8006b7c <__swbuf_r+0x32>
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	f000 f82b 	bl	8006bc8 <__swsetup_r>
 8006b72:	b118      	cbz	r0, 8006b7c <__swbuf_r+0x32>
 8006b74:	f04f 37ff 	mov.w	r7, #4294967295
 8006b78:	4638      	mov	r0, r7
 8006b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	6922      	ldr	r2, [r4, #16]
 8006b80:	1a98      	subs	r0, r3, r2
 8006b82:	6963      	ldr	r3, [r4, #20]
 8006b84:	b2f6      	uxtb	r6, r6
 8006b86:	4283      	cmp	r3, r0
 8006b88:	4637      	mov	r7, r6
 8006b8a:	dc05      	bgt.n	8006b98 <__swbuf_r+0x4e>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f000 ff02 	bl	8007998 <_fflush_r>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d1ed      	bne.n	8006b74 <__swbuf_r+0x2a>
 8006b98:	68a3      	ldr	r3, [r4, #8]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	60a3      	str	r3, [r4, #8]
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	6022      	str	r2, [r4, #0]
 8006ba4:	701e      	strb	r6, [r3, #0]
 8006ba6:	6962      	ldr	r2, [r4, #20]
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d004      	beq.n	8006bb8 <__swbuf_r+0x6e>
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	07db      	lsls	r3, r3, #31
 8006bb2:	d5e1      	bpl.n	8006b78 <__swbuf_r+0x2e>
 8006bb4:	2e0a      	cmp	r6, #10
 8006bb6:	d1df      	bne.n	8006b78 <__swbuf_r+0x2e>
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f000 feec 	bl	8007998 <_fflush_r>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d0d9      	beq.n	8006b78 <__swbuf_r+0x2e>
 8006bc4:	e7d6      	b.n	8006b74 <__swbuf_r+0x2a>
	...

08006bc8 <__swsetup_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4b29      	ldr	r3, [pc, #164]	@ (8006c70 <__swsetup_r+0xa8>)
 8006bcc:	4605      	mov	r5, r0
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	b118      	cbz	r0, 8006bdc <__swsetup_r+0x14>
 8006bd4:	6a03      	ldr	r3, [r0, #32]
 8006bd6:	b90b      	cbnz	r3, 8006bdc <__swsetup_r+0x14>
 8006bd8:	f7ff fe76 	bl	80068c8 <__sinit>
 8006bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be0:	0719      	lsls	r1, r3, #28
 8006be2:	d422      	bmi.n	8006c2a <__swsetup_r+0x62>
 8006be4:	06da      	lsls	r2, r3, #27
 8006be6:	d407      	bmi.n	8006bf8 <__swsetup_r+0x30>
 8006be8:	2209      	movs	r2, #9
 8006bea:	602a      	str	r2, [r5, #0]
 8006bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bf0:	81a3      	strh	r3, [r4, #12]
 8006bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf6:	e033      	b.n	8006c60 <__swsetup_r+0x98>
 8006bf8:	0758      	lsls	r0, r3, #29
 8006bfa:	d512      	bpl.n	8006c22 <__swsetup_r+0x5a>
 8006bfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bfe:	b141      	cbz	r1, 8006c12 <__swsetup_r+0x4a>
 8006c00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c04:	4299      	cmp	r1, r3
 8006c06:	d002      	beq.n	8006c0e <__swsetup_r+0x46>
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f000 f923 	bl	8006e54 <_free_r>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c18:	81a3      	strh	r3, [r4, #12]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	6063      	str	r3, [r4, #4]
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	f043 0308 	orr.w	r3, r3, #8
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	b94b      	cbnz	r3, 8006c42 <__swsetup_r+0x7a>
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c38:	d003      	beq.n	8006c42 <__swsetup_r+0x7a>
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f000 fef9 	bl	8007a34 <__smakebuf_r>
 8006c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c46:	f013 0201 	ands.w	r2, r3, #1
 8006c4a:	d00a      	beq.n	8006c62 <__swsetup_r+0x9a>
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	60a2      	str	r2, [r4, #8]
 8006c50:	6962      	ldr	r2, [r4, #20]
 8006c52:	4252      	negs	r2, r2
 8006c54:	61a2      	str	r2, [r4, #24]
 8006c56:	6922      	ldr	r2, [r4, #16]
 8006c58:	b942      	cbnz	r2, 8006c6c <__swsetup_r+0xa4>
 8006c5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c5e:	d1c5      	bne.n	8006bec <__swsetup_r+0x24>
 8006c60:	bd38      	pop	{r3, r4, r5, pc}
 8006c62:	0799      	lsls	r1, r3, #30
 8006c64:	bf58      	it	pl
 8006c66:	6962      	ldrpl	r2, [r4, #20]
 8006c68:	60a2      	str	r2, [r4, #8]
 8006c6a:	e7f4      	b.n	8006c56 <__swsetup_r+0x8e>
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	e7f7      	b.n	8006c60 <__swsetup_r+0x98>
 8006c70:	20000024 	.word	0x20000024

08006c74 <memset>:
 8006c74:	4402      	add	r2, r0
 8006c76:	4603      	mov	r3, r0
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d100      	bne.n	8006c7e <memset+0xa>
 8006c7c:	4770      	bx	lr
 8006c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c82:	e7f9      	b.n	8006c78 <memset+0x4>

08006c84 <_close_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4d06      	ldr	r5, [pc, #24]	@ (8006ca0 <_close_r+0x1c>)
 8006c88:	2300      	movs	r3, #0
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	602b      	str	r3, [r5, #0]
 8006c90:	f7fa f9df 	bl	8001052 <_close>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_close_r+0x1a>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_close_r+0x1a>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	200082c4 	.word	0x200082c4

08006ca4 <_reclaim_reent>:
 8006ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8006d5c <_reclaim_reent+0xb8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4283      	cmp	r3, r0
 8006caa:	b570      	push	{r4, r5, r6, lr}
 8006cac:	4604      	mov	r4, r0
 8006cae:	d053      	beq.n	8006d58 <_reclaim_reent+0xb4>
 8006cb0:	69c3      	ldr	r3, [r0, #28]
 8006cb2:	b31b      	cbz	r3, 8006cfc <_reclaim_reent+0x58>
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	b163      	cbz	r3, 8006cd2 <_reclaim_reent+0x2e>
 8006cb8:	2500      	movs	r5, #0
 8006cba:	69e3      	ldr	r3, [r4, #28]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	5959      	ldr	r1, [r3, r5]
 8006cc0:	b9b1      	cbnz	r1, 8006cf0 <_reclaim_reent+0x4c>
 8006cc2:	3504      	adds	r5, #4
 8006cc4:	2d80      	cmp	r5, #128	@ 0x80
 8006cc6:	d1f8      	bne.n	8006cba <_reclaim_reent+0x16>
 8006cc8:	69e3      	ldr	r3, [r4, #28]
 8006cca:	4620      	mov	r0, r4
 8006ccc:	68d9      	ldr	r1, [r3, #12]
 8006cce:	f000 f8c1 	bl	8006e54 <_free_r>
 8006cd2:	69e3      	ldr	r3, [r4, #28]
 8006cd4:	6819      	ldr	r1, [r3, #0]
 8006cd6:	b111      	cbz	r1, 8006cde <_reclaim_reent+0x3a>
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 f8bb 	bl	8006e54 <_free_r>
 8006cde:	69e3      	ldr	r3, [r4, #28]
 8006ce0:	689d      	ldr	r5, [r3, #8]
 8006ce2:	b15d      	cbz	r5, 8006cfc <_reclaim_reent+0x58>
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	682d      	ldr	r5, [r5, #0]
 8006cea:	f000 f8b3 	bl	8006e54 <_free_r>
 8006cee:	e7f8      	b.n	8006ce2 <_reclaim_reent+0x3e>
 8006cf0:	680e      	ldr	r6, [r1, #0]
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f000 f8ae 	bl	8006e54 <_free_r>
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	e7e1      	b.n	8006cc0 <_reclaim_reent+0x1c>
 8006cfc:	6961      	ldr	r1, [r4, #20]
 8006cfe:	b111      	cbz	r1, 8006d06 <_reclaim_reent+0x62>
 8006d00:	4620      	mov	r0, r4
 8006d02:	f000 f8a7 	bl	8006e54 <_free_r>
 8006d06:	69e1      	ldr	r1, [r4, #28]
 8006d08:	b111      	cbz	r1, 8006d10 <_reclaim_reent+0x6c>
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f000 f8a2 	bl	8006e54 <_free_r>
 8006d10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006d12:	b111      	cbz	r1, 8006d1a <_reclaim_reent+0x76>
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 f89d 	bl	8006e54 <_free_r>
 8006d1a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d1c:	b111      	cbz	r1, 8006d24 <_reclaim_reent+0x80>
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 f898 	bl	8006e54 <_free_r>
 8006d24:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006d26:	b111      	cbz	r1, 8006d2e <_reclaim_reent+0x8a>
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 f893 	bl	8006e54 <_free_r>
 8006d2e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006d30:	b111      	cbz	r1, 8006d38 <_reclaim_reent+0x94>
 8006d32:	4620      	mov	r0, r4
 8006d34:	f000 f88e 	bl	8006e54 <_free_r>
 8006d38:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006d3a:	b111      	cbz	r1, 8006d42 <_reclaim_reent+0x9e>
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 f889 	bl	8006e54 <_free_r>
 8006d42:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006d44:	b111      	cbz	r1, 8006d4c <_reclaim_reent+0xa8>
 8006d46:	4620      	mov	r0, r4
 8006d48:	f000 f884 	bl	8006e54 <_free_r>
 8006d4c:	6a23      	ldr	r3, [r4, #32]
 8006d4e:	b11b      	cbz	r3, 8006d58 <_reclaim_reent+0xb4>
 8006d50:	4620      	mov	r0, r4
 8006d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d56:	4718      	bx	r3
 8006d58:	bd70      	pop	{r4, r5, r6, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000024 	.word	0x20000024

08006d60 <_lseek_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4d07      	ldr	r5, [pc, #28]	@ (8006d80 <_lseek_r+0x20>)
 8006d64:	4604      	mov	r4, r0
 8006d66:	4608      	mov	r0, r1
 8006d68:	4611      	mov	r1, r2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	602a      	str	r2, [r5, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f7fa f996 	bl	80010a0 <_lseek>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	d102      	bne.n	8006d7e <_lseek_r+0x1e>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	b103      	cbz	r3, 8006d7e <_lseek_r+0x1e>
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}
 8006d80:	200082c4 	.word	0x200082c4

08006d84 <_read_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4d07      	ldr	r5, [pc, #28]	@ (8006da4 <_read_r+0x20>)
 8006d88:	4604      	mov	r4, r0
 8006d8a:	4608      	mov	r0, r1
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	2200      	movs	r2, #0
 8006d90:	602a      	str	r2, [r5, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	f7fa f924 	bl	8000fe0 <_read>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d102      	bne.n	8006da2 <_read_r+0x1e>
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	b103      	cbz	r3, 8006da2 <_read_r+0x1e>
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	bd38      	pop	{r3, r4, r5, pc}
 8006da4:	200082c4 	.word	0x200082c4

08006da8 <_write_r>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	4d07      	ldr	r5, [pc, #28]	@ (8006dc8 <_write_r+0x20>)
 8006dac:	4604      	mov	r4, r0
 8006dae:	4608      	mov	r0, r1
 8006db0:	4611      	mov	r1, r2
 8006db2:	2200      	movs	r2, #0
 8006db4:	602a      	str	r2, [r5, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	f7fa f92f 	bl	800101a <_write>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d102      	bne.n	8006dc6 <_write_r+0x1e>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	b103      	cbz	r3, 8006dc6 <_write_r+0x1e>
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	200082c4 	.word	0x200082c4

08006dcc <__errno>:
 8006dcc:	4b01      	ldr	r3, [pc, #4]	@ (8006dd4 <__errno+0x8>)
 8006dce:	6818      	ldr	r0, [r3, #0]
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	20000024 	.word	0x20000024

08006dd8 <__libc_init_array>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	4d0d      	ldr	r5, [pc, #52]	@ (8006e10 <__libc_init_array+0x38>)
 8006ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8006e14 <__libc_init_array+0x3c>)
 8006dde:	1b64      	subs	r4, r4, r5
 8006de0:	10a4      	asrs	r4, r4, #2
 8006de2:	2600      	movs	r6, #0
 8006de4:	42a6      	cmp	r6, r4
 8006de6:	d109      	bne.n	8006dfc <__libc_init_array+0x24>
 8006de8:	4d0b      	ldr	r5, [pc, #44]	@ (8006e18 <__libc_init_array+0x40>)
 8006dea:	4c0c      	ldr	r4, [pc, #48]	@ (8006e1c <__libc_init_array+0x44>)
 8006dec:	f000 fee0 	bl	8007bb0 <_init>
 8006df0:	1b64      	subs	r4, r4, r5
 8006df2:	10a4      	asrs	r4, r4, #2
 8006df4:	2600      	movs	r6, #0
 8006df6:	42a6      	cmp	r6, r4
 8006df8:	d105      	bne.n	8006e06 <__libc_init_array+0x2e>
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}
 8006dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e00:	4798      	blx	r3
 8006e02:	3601      	adds	r6, #1
 8006e04:	e7ee      	b.n	8006de4 <__libc_init_array+0xc>
 8006e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e0a:	4798      	blx	r3
 8006e0c:	3601      	adds	r6, #1
 8006e0e:	e7f2      	b.n	8006df6 <__libc_init_array+0x1e>
 8006e10:	080080e4 	.word	0x080080e4
 8006e14:	080080e4 	.word	0x080080e4
 8006e18:	080080e4 	.word	0x080080e4
 8006e1c:	080080e8 	.word	0x080080e8

08006e20 <__retarget_lock_init_recursive>:
 8006e20:	4770      	bx	lr

08006e22 <__retarget_lock_acquire_recursive>:
 8006e22:	4770      	bx	lr

08006e24 <__retarget_lock_release_recursive>:
 8006e24:	4770      	bx	lr

08006e26 <strcpy>:
 8006e26:	4603      	mov	r3, r0
 8006e28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e2c:	f803 2b01 	strb.w	r2, [r3], #1
 8006e30:	2a00      	cmp	r2, #0
 8006e32:	d1f9      	bne.n	8006e28 <strcpy+0x2>
 8006e34:	4770      	bx	lr

08006e36 <memcpy>:
 8006e36:	440a      	add	r2, r1
 8006e38:	4291      	cmp	r1, r2
 8006e3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e3e:	d100      	bne.n	8006e42 <memcpy+0xc>
 8006e40:	4770      	bx	lr
 8006e42:	b510      	push	{r4, lr}
 8006e44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e4c:	4291      	cmp	r1, r2
 8006e4e:	d1f9      	bne.n	8006e44 <memcpy+0xe>
 8006e50:	bd10      	pop	{r4, pc}
	...

08006e54 <_free_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4605      	mov	r5, r0
 8006e58:	2900      	cmp	r1, #0
 8006e5a:	d041      	beq.n	8006ee0 <_free_r+0x8c>
 8006e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e60:	1f0c      	subs	r4, r1, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	bfb8      	it	lt
 8006e66:	18e4      	addlt	r4, r4, r3
 8006e68:	f000 f8e0 	bl	800702c <__malloc_lock>
 8006e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee4 <_free_r+0x90>)
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	b933      	cbnz	r3, 8006e80 <_free_r+0x2c>
 8006e72:	6063      	str	r3, [r4, #4]
 8006e74:	6014      	str	r4, [r2, #0]
 8006e76:	4628      	mov	r0, r5
 8006e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e7c:	f000 b8dc 	b.w	8007038 <__malloc_unlock>
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	d908      	bls.n	8006e96 <_free_r+0x42>
 8006e84:	6820      	ldr	r0, [r4, #0]
 8006e86:	1821      	adds	r1, r4, r0
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	bf01      	itttt	eq
 8006e8c:	6819      	ldreq	r1, [r3, #0]
 8006e8e:	685b      	ldreq	r3, [r3, #4]
 8006e90:	1809      	addeq	r1, r1, r0
 8006e92:	6021      	streq	r1, [r4, #0]
 8006e94:	e7ed      	b.n	8006e72 <_free_r+0x1e>
 8006e96:	461a      	mov	r2, r3
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	b10b      	cbz	r3, 8006ea0 <_free_r+0x4c>
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	d9fa      	bls.n	8006e96 <_free_r+0x42>
 8006ea0:	6811      	ldr	r1, [r2, #0]
 8006ea2:	1850      	adds	r0, r2, r1
 8006ea4:	42a0      	cmp	r0, r4
 8006ea6:	d10b      	bne.n	8006ec0 <_free_r+0x6c>
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	4401      	add	r1, r0
 8006eac:	1850      	adds	r0, r2, r1
 8006eae:	4283      	cmp	r3, r0
 8006eb0:	6011      	str	r1, [r2, #0]
 8006eb2:	d1e0      	bne.n	8006e76 <_free_r+0x22>
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	6053      	str	r3, [r2, #4]
 8006eba:	4408      	add	r0, r1
 8006ebc:	6010      	str	r0, [r2, #0]
 8006ebe:	e7da      	b.n	8006e76 <_free_r+0x22>
 8006ec0:	d902      	bls.n	8006ec8 <_free_r+0x74>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	602b      	str	r3, [r5, #0]
 8006ec6:	e7d6      	b.n	8006e76 <_free_r+0x22>
 8006ec8:	6820      	ldr	r0, [r4, #0]
 8006eca:	1821      	adds	r1, r4, r0
 8006ecc:	428b      	cmp	r3, r1
 8006ece:	bf04      	itt	eq
 8006ed0:	6819      	ldreq	r1, [r3, #0]
 8006ed2:	685b      	ldreq	r3, [r3, #4]
 8006ed4:	6063      	str	r3, [r4, #4]
 8006ed6:	bf04      	itt	eq
 8006ed8:	1809      	addeq	r1, r1, r0
 8006eda:	6021      	streq	r1, [r4, #0]
 8006edc:	6054      	str	r4, [r2, #4]
 8006ede:	e7ca      	b.n	8006e76 <_free_r+0x22>
 8006ee0:	bd38      	pop	{r3, r4, r5, pc}
 8006ee2:	bf00      	nop
 8006ee4:	200082d0 	.word	0x200082d0

08006ee8 <sbrk_aligned>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4e0f      	ldr	r6, [pc, #60]	@ (8006f28 <sbrk_aligned+0x40>)
 8006eec:	460c      	mov	r4, r1
 8006eee:	6831      	ldr	r1, [r6, #0]
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	b911      	cbnz	r1, 8006efa <sbrk_aligned+0x12>
 8006ef4:	f000 fe16 	bl	8007b24 <_sbrk_r>
 8006ef8:	6030      	str	r0, [r6, #0]
 8006efa:	4621      	mov	r1, r4
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 fe11 	bl	8007b24 <_sbrk_r>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d103      	bne.n	8006f0e <sbrk_aligned+0x26>
 8006f06:	f04f 34ff 	mov.w	r4, #4294967295
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	bd70      	pop	{r4, r5, r6, pc}
 8006f0e:	1cc4      	adds	r4, r0, #3
 8006f10:	f024 0403 	bic.w	r4, r4, #3
 8006f14:	42a0      	cmp	r0, r4
 8006f16:	d0f8      	beq.n	8006f0a <sbrk_aligned+0x22>
 8006f18:	1a21      	subs	r1, r4, r0
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f000 fe02 	bl	8007b24 <_sbrk_r>
 8006f20:	3001      	adds	r0, #1
 8006f22:	d1f2      	bne.n	8006f0a <sbrk_aligned+0x22>
 8006f24:	e7ef      	b.n	8006f06 <sbrk_aligned+0x1e>
 8006f26:	bf00      	nop
 8006f28:	200082cc 	.word	0x200082cc

08006f2c <_malloc_r>:
 8006f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f30:	1ccd      	adds	r5, r1, #3
 8006f32:	f025 0503 	bic.w	r5, r5, #3
 8006f36:	3508      	adds	r5, #8
 8006f38:	2d0c      	cmp	r5, #12
 8006f3a:	bf38      	it	cc
 8006f3c:	250c      	movcc	r5, #12
 8006f3e:	2d00      	cmp	r5, #0
 8006f40:	4606      	mov	r6, r0
 8006f42:	db01      	blt.n	8006f48 <_malloc_r+0x1c>
 8006f44:	42a9      	cmp	r1, r5
 8006f46:	d904      	bls.n	8006f52 <_malloc_r+0x26>
 8006f48:	230c      	movs	r3, #12
 8006f4a:	6033      	str	r3, [r6, #0]
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007028 <_malloc_r+0xfc>
 8006f56:	f000 f869 	bl	800702c <__malloc_lock>
 8006f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f5e:	461c      	mov	r4, r3
 8006f60:	bb44      	cbnz	r4, 8006fb4 <_malloc_r+0x88>
 8006f62:	4629      	mov	r1, r5
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7ff ffbf 	bl	8006ee8 <sbrk_aligned>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	d158      	bne.n	8007022 <_malloc_r+0xf6>
 8006f70:	f8d8 4000 	ldr.w	r4, [r8]
 8006f74:	4627      	mov	r7, r4
 8006f76:	2f00      	cmp	r7, #0
 8006f78:	d143      	bne.n	8007002 <_malloc_r+0xd6>
 8006f7a:	2c00      	cmp	r4, #0
 8006f7c:	d04b      	beq.n	8007016 <_malloc_r+0xea>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	4639      	mov	r1, r7
 8006f82:	4630      	mov	r0, r6
 8006f84:	eb04 0903 	add.w	r9, r4, r3
 8006f88:	f000 fdcc 	bl	8007b24 <_sbrk_r>
 8006f8c:	4581      	cmp	r9, r0
 8006f8e:	d142      	bne.n	8007016 <_malloc_r+0xea>
 8006f90:	6821      	ldr	r1, [r4, #0]
 8006f92:	1a6d      	subs	r5, r5, r1
 8006f94:	4629      	mov	r1, r5
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7ff ffa6 	bl	8006ee8 <sbrk_aligned>
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d03a      	beq.n	8007016 <_malloc_r+0xea>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	442b      	add	r3, r5
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	bb62      	cbnz	r2, 8007008 <_malloc_r+0xdc>
 8006fae:	f8c8 7000 	str.w	r7, [r8]
 8006fb2:	e00f      	b.n	8006fd4 <_malloc_r+0xa8>
 8006fb4:	6822      	ldr	r2, [r4, #0]
 8006fb6:	1b52      	subs	r2, r2, r5
 8006fb8:	d420      	bmi.n	8006ffc <_malloc_r+0xd0>
 8006fba:	2a0b      	cmp	r2, #11
 8006fbc:	d917      	bls.n	8006fee <_malloc_r+0xc2>
 8006fbe:	1961      	adds	r1, r4, r5
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	6025      	str	r5, [r4, #0]
 8006fc4:	bf18      	it	ne
 8006fc6:	6059      	strne	r1, [r3, #4]
 8006fc8:	6863      	ldr	r3, [r4, #4]
 8006fca:	bf08      	it	eq
 8006fcc:	f8c8 1000 	streq.w	r1, [r8]
 8006fd0:	5162      	str	r2, [r4, r5]
 8006fd2:	604b      	str	r3, [r1, #4]
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f000 f82f 	bl	8007038 <__malloc_unlock>
 8006fda:	f104 000b 	add.w	r0, r4, #11
 8006fde:	1d23      	adds	r3, r4, #4
 8006fe0:	f020 0007 	bic.w	r0, r0, #7
 8006fe4:	1ac2      	subs	r2, r0, r3
 8006fe6:	bf1c      	itt	ne
 8006fe8:	1a1b      	subne	r3, r3, r0
 8006fea:	50a3      	strne	r3, [r4, r2]
 8006fec:	e7af      	b.n	8006f4e <_malloc_r+0x22>
 8006fee:	6862      	ldr	r2, [r4, #4]
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	bf0c      	ite	eq
 8006ff4:	f8c8 2000 	streq.w	r2, [r8]
 8006ff8:	605a      	strne	r2, [r3, #4]
 8006ffa:	e7eb      	b.n	8006fd4 <_malloc_r+0xa8>
 8006ffc:	4623      	mov	r3, r4
 8006ffe:	6864      	ldr	r4, [r4, #4]
 8007000:	e7ae      	b.n	8006f60 <_malloc_r+0x34>
 8007002:	463c      	mov	r4, r7
 8007004:	687f      	ldr	r7, [r7, #4]
 8007006:	e7b6      	b.n	8006f76 <_malloc_r+0x4a>
 8007008:	461a      	mov	r2, r3
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	42a3      	cmp	r3, r4
 800700e:	d1fb      	bne.n	8007008 <_malloc_r+0xdc>
 8007010:	2300      	movs	r3, #0
 8007012:	6053      	str	r3, [r2, #4]
 8007014:	e7de      	b.n	8006fd4 <_malloc_r+0xa8>
 8007016:	230c      	movs	r3, #12
 8007018:	6033      	str	r3, [r6, #0]
 800701a:	4630      	mov	r0, r6
 800701c:	f000 f80c 	bl	8007038 <__malloc_unlock>
 8007020:	e794      	b.n	8006f4c <_malloc_r+0x20>
 8007022:	6005      	str	r5, [r0, #0]
 8007024:	e7d6      	b.n	8006fd4 <_malloc_r+0xa8>
 8007026:	bf00      	nop
 8007028:	200082d0 	.word	0x200082d0

0800702c <__malloc_lock>:
 800702c:	4801      	ldr	r0, [pc, #4]	@ (8007034 <__malloc_lock+0x8>)
 800702e:	f7ff bef8 	b.w	8006e22 <__retarget_lock_acquire_recursive>
 8007032:	bf00      	nop
 8007034:	200082c8 	.word	0x200082c8

08007038 <__malloc_unlock>:
 8007038:	4801      	ldr	r0, [pc, #4]	@ (8007040 <__malloc_unlock+0x8>)
 800703a:	f7ff bef3 	b.w	8006e24 <__retarget_lock_release_recursive>
 800703e:	bf00      	nop
 8007040:	200082c8 	.word	0x200082c8

08007044 <__ssputs_r>:
 8007044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007048:	688e      	ldr	r6, [r1, #8]
 800704a:	461f      	mov	r7, r3
 800704c:	42be      	cmp	r6, r7
 800704e:	680b      	ldr	r3, [r1, #0]
 8007050:	4682      	mov	sl, r0
 8007052:	460c      	mov	r4, r1
 8007054:	4690      	mov	r8, r2
 8007056:	d82d      	bhi.n	80070b4 <__ssputs_r+0x70>
 8007058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800705c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007060:	d026      	beq.n	80070b0 <__ssputs_r+0x6c>
 8007062:	6965      	ldr	r5, [r4, #20]
 8007064:	6909      	ldr	r1, [r1, #16]
 8007066:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800706a:	eba3 0901 	sub.w	r9, r3, r1
 800706e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007072:	1c7b      	adds	r3, r7, #1
 8007074:	444b      	add	r3, r9
 8007076:	106d      	asrs	r5, r5, #1
 8007078:	429d      	cmp	r5, r3
 800707a:	bf38      	it	cc
 800707c:	461d      	movcc	r5, r3
 800707e:	0553      	lsls	r3, r2, #21
 8007080:	d527      	bpl.n	80070d2 <__ssputs_r+0x8e>
 8007082:	4629      	mov	r1, r5
 8007084:	f7ff ff52 	bl	8006f2c <_malloc_r>
 8007088:	4606      	mov	r6, r0
 800708a:	b360      	cbz	r0, 80070e6 <__ssputs_r+0xa2>
 800708c:	6921      	ldr	r1, [r4, #16]
 800708e:	464a      	mov	r2, r9
 8007090:	f7ff fed1 	bl	8006e36 <memcpy>
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800709a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800709e:	81a3      	strh	r3, [r4, #12]
 80070a0:	6126      	str	r6, [r4, #16]
 80070a2:	6165      	str	r5, [r4, #20]
 80070a4:	444e      	add	r6, r9
 80070a6:	eba5 0509 	sub.w	r5, r5, r9
 80070aa:	6026      	str	r6, [r4, #0]
 80070ac:	60a5      	str	r5, [r4, #8]
 80070ae:	463e      	mov	r6, r7
 80070b0:	42be      	cmp	r6, r7
 80070b2:	d900      	bls.n	80070b6 <__ssputs_r+0x72>
 80070b4:	463e      	mov	r6, r7
 80070b6:	6820      	ldr	r0, [r4, #0]
 80070b8:	4632      	mov	r2, r6
 80070ba:	4641      	mov	r1, r8
 80070bc:	f000 fcf6 	bl	8007aac <memmove>
 80070c0:	68a3      	ldr	r3, [r4, #8]
 80070c2:	1b9b      	subs	r3, r3, r6
 80070c4:	60a3      	str	r3, [r4, #8]
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	4433      	add	r3, r6
 80070ca:	6023      	str	r3, [r4, #0]
 80070cc:	2000      	movs	r0, #0
 80070ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d2:	462a      	mov	r2, r5
 80070d4:	f000 fd36 	bl	8007b44 <_realloc_r>
 80070d8:	4606      	mov	r6, r0
 80070da:	2800      	cmp	r0, #0
 80070dc:	d1e0      	bne.n	80070a0 <__ssputs_r+0x5c>
 80070de:	6921      	ldr	r1, [r4, #16]
 80070e0:	4650      	mov	r0, sl
 80070e2:	f7ff feb7 	bl	8006e54 <_free_r>
 80070e6:	230c      	movs	r3, #12
 80070e8:	f8ca 3000 	str.w	r3, [sl]
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295
 80070f8:	e7e9      	b.n	80070ce <__ssputs_r+0x8a>
	...

080070fc <_svfiprintf_r>:
 80070fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007100:	4698      	mov	r8, r3
 8007102:	898b      	ldrh	r3, [r1, #12]
 8007104:	061b      	lsls	r3, r3, #24
 8007106:	b09d      	sub	sp, #116	@ 0x74
 8007108:	4607      	mov	r7, r0
 800710a:	460d      	mov	r5, r1
 800710c:	4614      	mov	r4, r2
 800710e:	d510      	bpl.n	8007132 <_svfiprintf_r+0x36>
 8007110:	690b      	ldr	r3, [r1, #16]
 8007112:	b973      	cbnz	r3, 8007132 <_svfiprintf_r+0x36>
 8007114:	2140      	movs	r1, #64	@ 0x40
 8007116:	f7ff ff09 	bl	8006f2c <_malloc_r>
 800711a:	6028      	str	r0, [r5, #0]
 800711c:	6128      	str	r0, [r5, #16]
 800711e:	b930      	cbnz	r0, 800712e <_svfiprintf_r+0x32>
 8007120:	230c      	movs	r3, #12
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	f04f 30ff 	mov.w	r0, #4294967295
 8007128:	b01d      	add	sp, #116	@ 0x74
 800712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712e:	2340      	movs	r3, #64	@ 0x40
 8007130:	616b      	str	r3, [r5, #20]
 8007132:	2300      	movs	r3, #0
 8007134:	9309      	str	r3, [sp, #36]	@ 0x24
 8007136:	2320      	movs	r3, #32
 8007138:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800713c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007140:	2330      	movs	r3, #48	@ 0x30
 8007142:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80072e0 <_svfiprintf_r+0x1e4>
 8007146:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800714a:	f04f 0901 	mov.w	r9, #1
 800714e:	4623      	mov	r3, r4
 8007150:	469a      	mov	sl, r3
 8007152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007156:	b10a      	cbz	r2, 800715c <_svfiprintf_r+0x60>
 8007158:	2a25      	cmp	r2, #37	@ 0x25
 800715a:	d1f9      	bne.n	8007150 <_svfiprintf_r+0x54>
 800715c:	ebba 0b04 	subs.w	fp, sl, r4
 8007160:	d00b      	beq.n	800717a <_svfiprintf_r+0x7e>
 8007162:	465b      	mov	r3, fp
 8007164:	4622      	mov	r2, r4
 8007166:	4629      	mov	r1, r5
 8007168:	4638      	mov	r0, r7
 800716a:	f7ff ff6b 	bl	8007044 <__ssputs_r>
 800716e:	3001      	adds	r0, #1
 8007170:	f000 80a7 	beq.w	80072c2 <_svfiprintf_r+0x1c6>
 8007174:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007176:	445a      	add	r2, fp
 8007178:	9209      	str	r2, [sp, #36]	@ 0x24
 800717a:	f89a 3000 	ldrb.w	r3, [sl]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 809f 	beq.w	80072c2 <_svfiprintf_r+0x1c6>
 8007184:	2300      	movs	r3, #0
 8007186:	f04f 32ff 	mov.w	r2, #4294967295
 800718a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800718e:	f10a 0a01 	add.w	sl, sl, #1
 8007192:	9304      	str	r3, [sp, #16]
 8007194:	9307      	str	r3, [sp, #28]
 8007196:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800719a:	931a      	str	r3, [sp, #104]	@ 0x68
 800719c:	4654      	mov	r4, sl
 800719e:	2205      	movs	r2, #5
 80071a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a4:	484e      	ldr	r0, [pc, #312]	@ (80072e0 <_svfiprintf_r+0x1e4>)
 80071a6:	f7f9 f83b 	bl	8000220 <memchr>
 80071aa:	9a04      	ldr	r2, [sp, #16]
 80071ac:	b9d8      	cbnz	r0, 80071e6 <_svfiprintf_r+0xea>
 80071ae:	06d0      	lsls	r0, r2, #27
 80071b0:	bf44      	itt	mi
 80071b2:	2320      	movmi	r3, #32
 80071b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071b8:	0711      	lsls	r1, r2, #28
 80071ba:	bf44      	itt	mi
 80071bc:	232b      	movmi	r3, #43	@ 0x2b
 80071be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071c2:	f89a 3000 	ldrb.w	r3, [sl]
 80071c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80071c8:	d015      	beq.n	80071f6 <_svfiprintf_r+0xfa>
 80071ca:	9a07      	ldr	r2, [sp, #28]
 80071cc:	4654      	mov	r4, sl
 80071ce:	2000      	movs	r0, #0
 80071d0:	f04f 0c0a 	mov.w	ip, #10
 80071d4:	4621      	mov	r1, r4
 80071d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071da:	3b30      	subs	r3, #48	@ 0x30
 80071dc:	2b09      	cmp	r3, #9
 80071de:	d94b      	bls.n	8007278 <_svfiprintf_r+0x17c>
 80071e0:	b1b0      	cbz	r0, 8007210 <_svfiprintf_r+0x114>
 80071e2:	9207      	str	r2, [sp, #28]
 80071e4:	e014      	b.n	8007210 <_svfiprintf_r+0x114>
 80071e6:	eba0 0308 	sub.w	r3, r0, r8
 80071ea:	fa09 f303 	lsl.w	r3, r9, r3
 80071ee:	4313      	orrs	r3, r2
 80071f0:	9304      	str	r3, [sp, #16]
 80071f2:	46a2      	mov	sl, r4
 80071f4:	e7d2      	b.n	800719c <_svfiprintf_r+0xa0>
 80071f6:	9b03      	ldr	r3, [sp, #12]
 80071f8:	1d19      	adds	r1, r3, #4
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	9103      	str	r1, [sp, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bfbb      	ittet	lt
 8007202:	425b      	neglt	r3, r3
 8007204:	f042 0202 	orrlt.w	r2, r2, #2
 8007208:	9307      	strge	r3, [sp, #28]
 800720a:	9307      	strlt	r3, [sp, #28]
 800720c:	bfb8      	it	lt
 800720e:	9204      	strlt	r2, [sp, #16]
 8007210:	7823      	ldrb	r3, [r4, #0]
 8007212:	2b2e      	cmp	r3, #46	@ 0x2e
 8007214:	d10a      	bne.n	800722c <_svfiprintf_r+0x130>
 8007216:	7863      	ldrb	r3, [r4, #1]
 8007218:	2b2a      	cmp	r3, #42	@ 0x2a
 800721a:	d132      	bne.n	8007282 <_svfiprintf_r+0x186>
 800721c:	9b03      	ldr	r3, [sp, #12]
 800721e:	1d1a      	adds	r2, r3, #4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	9203      	str	r2, [sp, #12]
 8007224:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007228:	3402      	adds	r4, #2
 800722a:	9305      	str	r3, [sp, #20]
 800722c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80072f0 <_svfiprintf_r+0x1f4>
 8007230:	7821      	ldrb	r1, [r4, #0]
 8007232:	2203      	movs	r2, #3
 8007234:	4650      	mov	r0, sl
 8007236:	f7f8 fff3 	bl	8000220 <memchr>
 800723a:	b138      	cbz	r0, 800724c <_svfiprintf_r+0x150>
 800723c:	9b04      	ldr	r3, [sp, #16]
 800723e:	eba0 000a 	sub.w	r0, r0, sl
 8007242:	2240      	movs	r2, #64	@ 0x40
 8007244:	4082      	lsls	r2, r0
 8007246:	4313      	orrs	r3, r2
 8007248:	3401      	adds	r4, #1
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007250:	4824      	ldr	r0, [pc, #144]	@ (80072e4 <_svfiprintf_r+0x1e8>)
 8007252:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007256:	2206      	movs	r2, #6
 8007258:	f7f8 ffe2 	bl	8000220 <memchr>
 800725c:	2800      	cmp	r0, #0
 800725e:	d036      	beq.n	80072ce <_svfiprintf_r+0x1d2>
 8007260:	4b21      	ldr	r3, [pc, #132]	@ (80072e8 <_svfiprintf_r+0x1ec>)
 8007262:	bb1b      	cbnz	r3, 80072ac <_svfiprintf_r+0x1b0>
 8007264:	9b03      	ldr	r3, [sp, #12]
 8007266:	3307      	adds	r3, #7
 8007268:	f023 0307 	bic.w	r3, r3, #7
 800726c:	3308      	adds	r3, #8
 800726e:	9303      	str	r3, [sp, #12]
 8007270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007272:	4433      	add	r3, r6
 8007274:	9309      	str	r3, [sp, #36]	@ 0x24
 8007276:	e76a      	b.n	800714e <_svfiprintf_r+0x52>
 8007278:	fb0c 3202 	mla	r2, ip, r2, r3
 800727c:	460c      	mov	r4, r1
 800727e:	2001      	movs	r0, #1
 8007280:	e7a8      	b.n	80071d4 <_svfiprintf_r+0xd8>
 8007282:	2300      	movs	r3, #0
 8007284:	3401      	adds	r4, #1
 8007286:	9305      	str	r3, [sp, #20]
 8007288:	4619      	mov	r1, r3
 800728a:	f04f 0c0a 	mov.w	ip, #10
 800728e:	4620      	mov	r0, r4
 8007290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007294:	3a30      	subs	r2, #48	@ 0x30
 8007296:	2a09      	cmp	r2, #9
 8007298:	d903      	bls.n	80072a2 <_svfiprintf_r+0x1a6>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0c6      	beq.n	800722c <_svfiprintf_r+0x130>
 800729e:	9105      	str	r1, [sp, #20]
 80072a0:	e7c4      	b.n	800722c <_svfiprintf_r+0x130>
 80072a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80072a6:	4604      	mov	r4, r0
 80072a8:	2301      	movs	r3, #1
 80072aa:	e7f0      	b.n	800728e <_svfiprintf_r+0x192>
 80072ac:	ab03      	add	r3, sp, #12
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	462a      	mov	r2, r5
 80072b2:	4b0e      	ldr	r3, [pc, #56]	@ (80072ec <_svfiprintf_r+0x1f0>)
 80072b4:	a904      	add	r1, sp, #16
 80072b6:	4638      	mov	r0, r7
 80072b8:	f3af 8000 	nop.w
 80072bc:	1c42      	adds	r2, r0, #1
 80072be:	4606      	mov	r6, r0
 80072c0:	d1d6      	bne.n	8007270 <_svfiprintf_r+0x174>
 80072c2:	89ab      	ldrh	r3, [r5, #12]
 80072c4:	065b      	lsls	r3, r3, #25
 80072c6:	f53f af2d 	bmi.w	8007124 <_svfiprintf_r+0x28>
 80072ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072cc:	e72c      	b.n	8007128 <_svfiprintf_r+0x2c>
 80072ce:	ab03      	add	r3, sp, #12
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	462a      	mov	r2, r5
 80072d4:	4b05      	ldr	r3, [pc, #20]	@ (80072ec <_svfiprintf_r+0x1f0>)
 80072d6:	a904      	add	r1, sp, #16
 80072d8:	4638      	mov	r0, r7
 80072da:	f000 f9bb 	bl	8007654 <_printf_i>
 80072de:	e7ed      	b.n	80072bc <_svfiprintf_r+0x1c0>
 80072e0:	080080a9 	.word	0x080080a9
 80072e4:	080080b3 	.word	0x080080b3
 80072e8:	00000000 	.word	0x00000000
 80072ec:	08007045 	.word	0x08007045
 80072f0:	080080af 	.word	0x080080af

080072f4 <__sfputc_r>:
 80072f4:	6893      	ldr	r3, [r2, #8]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	b410      	push	{r4}
 80072fc:	6093      	str	r3, [r2, #8]
 80072fe:	da08      	bge.n	8007312 <__sfputc_r+0x1e>
 8007300:	6994      	ldr	r4, [r2, #24]
 8007302:	42a3      	cmp	r3, r4
 8007304:	db01      	blt.n	800730a <__sfputc_r+0x16>
 8007306:	290a      	cmp	r1, #10
 8007308:	d103      	bne.n	8007312 <__sfputc_r+0x1e>
 800730a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800730e:	f7ff bc1c 	b.w	8006b4a <__swbuf_r>
 8007312:	6813      	ldr	r3, [r2, #0]
 8007314:	1c58      	adds	r0, r3, #1
 8007316:	6010      	str	r0, [r2, #0]
 8007318:	7019      	strb	r1, [r3, #0]
 800731a:	4608      	mov	r0, r1
 800731c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007320:	4770      	bx	lr

08007322 <__sfputs_r>:
 8007322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007324:	4606      	mov	r6, r0
 8007326:	460f      	mov	r7, r1
 8007328:	4614      	mov	r4, r2
 800732a:	18d5      	adds	r5, r2, r3
 800732c:	42ac      	cmp	r4, r5
 800732e:	d101      	bne.n	8007334 <__sfputs_r+0x12>
 8007330:	2000      	movs	r0, #0
 8007332:	e007      	b.n	8007344 <__sfputs_r+0x22>
 8007334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007338:	463a      	mov	r2, r7
 800733a:	4630      	mov	r0, r6
 800733c:	f7ff ffda 	bl	80072f4 <__sfputc_r>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	d1f3      	bne.n	800732c <__sfputs_r+0xa>
 8007344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007348 <_vfiprintf_r>:
 8007348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	460d      	mov	r5, r1
 800734e:	b09d      	sub	sp, #116	@ 0x74
 8007350:	4614      	mov	r4, r2
 8007352:	4698      	mov	r8, r3
 8007354:	4606      	mov	r6, r0
 8007356:	b118      	cbz	r0, 8007360 <_vfiprintf_r+0x18>
 8007358:	6a03      	ldr	r3, [r0, #32]
 800735a:	b90b      	cbnz	r3, 8007360 <_vfiprintf_r+0x18>
 800735c:	f7ff fab4 	bl	80068c8 <__sinit>
 8007360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007362:	07d9      	lsls	r1, r3, #31
 8007364:	d405      	bmi.n	8007372 <_vfiprintf_r+0x2a>
 8007366:	89ab      	ldrh	r3, [r5, #12]
 8007368:	059a      	lsls	r2, r3, #22
 800736a:	d402      	bmi.n	8007372 <_vfiprintf_r+0x2a>
 800736c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800736e:	f7ff fd58 	bl	8006e22 <__retarget_lock_acquire_recursive>
 8007372:	89ab      	ldrh	r3, [r5, #12]
 8007374:	071b      	lsls	r3, r3, #28
 8007376:	d501      	bpl.n	800737c <_vfiprintf_r+0x34>
 8007378:	692b      	ldr	r3, [r5, #16]
 800737a:	b99b      	cbnz	r3, 80073a4 <_vfiprintf_r+0x5c>
 800737c:	4629      	mov	r1, r5
 800737e:	4630      	mov	r0, r6
 8007380:	f7ff fc22 	bl	8006bc8 <__swsetup_r>
 8007384:	b170      	cbz	r0, 80073a4 <_vfiprintf_r+0x5c>
 8007386:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007388:	07dc      	lsls	r4, r3, #31
 800738a:	d504      	bpl.n	8007396 <_vfiprintf_r+0x4e>
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
 8007390:	b01d      	add	sp, #116	@ 0x74
 8007392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007396:	89ab      	ldrh	r3, [r5, #12]
 8007398:	0598      	lsls	r0, r3, #22
 800739a:	d4f7      	bmi.n	800738c <_vfiprintf_r+0x44>
 800739c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800739e:	f7ff fd41 	bl	8006e24 <__retarget_lock_release_recursive>
 80073a2:	e7f3      	b.n	800738c <_vfiprintf_r+0x44>
 80073a4:	2300      	movs	r3, #0
 80073a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a8:	2320      	movs	r3, #32
 80073aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80073b2:	2330      	movs	r3, #48	@ 0x30
 80073b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007564 <_vfiprintf_r+0x21c>
 80073b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073bc:	f04f 0901 	mov.w	r9, #1
 80073c0:	4623      	mov	r3, r4
 80073c2:	469a      	mov	sl, r3
 80073c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073c8:	b10a      	cbz	r2, 80073ce <_vfiprintf_r+0x86>
 80073ca:	2a25      	cmp	r2, #37	@ 0x25
 80073cc:	d1f9      	bne.n	80073c2 <_vfiprintf_r+0x7a>
 80073ce:	ebba 0b04 	subs.w	fp, sl, r4
 80073d2:	d00b      	beq.n	80073ec <_vfiprintf_r+0xa4>
 80073d4:	465b      	mov	r3, fp
 80073d6:	4622      	mov	r2, r4
 80073d8:	4629      	mov	r1, r5
 80073da:	4630      	mov	r0, r6
 80073dc:	f7ff ffa1 	bl	8007322 <__sfputs_r>
 80073e0:	3001      	adds	r0, #1
 80073e2:	f000 80a7 	beq.w	8007534 <_vfiprintf_r+0x1ec>
 80073e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073e8:	445a      	add	r2, fp
 80073ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80073ec:	f89a 3000 	ldrb.w	r3, [sl]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 809f 	beq.w	8007534 <_vfiprintf_r+0x1ec>
 80073f6:	2300      	movs	r3, #0
 80073f8:	f04f 32ff 	mov.w	r2, #4294967295
 80073fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007400:	f10a 0a01 	add.w	sl, sl, #1
 8007404:	9304      	str	r3, [sp, #16]
 8007406:	9307      	str	r3, [sp, #28]
 8007408:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800740c:	931a      	str	r3, [sp, #104]	@ 0x68
 800740e:	4654      	mov	r4, sl
 8007410:	2205      	movs	r2, #5
 8007412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007416:	4853      	ldr	r0, [pc, #332]	@ (8007564 <_vfiprintf_r+0x21c>)
 8007418:	f7f8 ff02 	bl	8000220 <memchr>
 800741c:	9a04      	ldr	r2, [sp, #16]
 800741e:	b9d8      	cbnz	r0, 8007458 <_vfiprintf_r+0x110>
 8007420:	06d1      	lsls	r1, r2, #27
 8007422:	bf44      	itt	mi
 8007424:	2320      	movmi	r3, #32
 8007426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800742a:	0713      	lsls	r3, r2, #28
 800742c:	bf44      	itt	mi
 800742e:	232b      	movmi	r3, #43	@ 0x2b
 8007430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007434:	f89a 3000 	ldrb.w	r3, [sl]
 8007438:	2b2a      	cmp	r3, #42	@ 0x2a
 800743a:	d015      	beq.n	8007468 <_vfiprintf_r+0x120>
 800743c:	9a07      	ldr	r2, [sp, #28]
 800743e:	4654      	mov	r4, sl
 8007440:	2000      	movs	r0, #0
 8007442:	f04f 0c0a 	mov.w	ip, #10
 8007446:	4621      	mov	r1, r4
 8007448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800744c:	3b30      	subs	r3, #48	@ 0x30
 800744e:	2b09      	cmp	r3, #9
 8007450:	d94b      	bls.n	80074ea <_vfiprintf_r+0x1a2>
 8007452:	b1b0      	cbz	r0, 8007482 <_vfiprintf_r+0x13a>
 8007454:	9207      	str	r2, [sp, #28]
 8007456:	e014      	b.n	8007482 <_vfiprintf_r+0x13a>
 8007458:	eba0 0308 	sub.w	r3, r0, r8
 800745c:	fa09 f303 	lsl.w	r3, r9, r3
 8007460:	4313      	orrs	r3, r2
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	46a2      	mov	sl, r4
 8007466:	e7d2      	b.n	800740e <_vfiprintf_r+0xc6>
 8007468:	9b03      	ldr	r3, [sp, #12]
 800746a:	1d19      	adds	r1, r3, #4
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	9103      	str	r1, [sp, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	bfbb      	ittet	lt
 8007474:	425b      	neglt	r3, r3
 8007476:	f042 0202 	orrlt.w	r2, r2, #2
 800747a:	9307      	strge	r3, [sp, #28]
 800747c:	9307      	strlt	r3, [sp, #28]
 800747e:	bfb8      	it	lt
 8007480:	9204      	strlt	r2, [sp, #16]
 8007482:	7823      	ldrb	r3, [r4, #0]
 8007484:	2b2e      	cmp	r3, #46	@ 0x2e
 8007486:	d10a      	bne.n	800749e <_vfiprintf_r+0x156>
 8007488:	7863      	ldrb	r3, [r4, #1]
 800748a:	2b2a      	cmp	r3, #42	@ 0x2a
 800748c:	d132      	bne.n	80074f4 <_vfiprintf_r+0x1ac>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	1d1a      	adds	r2, r3, #4
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	9203      	str	r2, [sp, #12]
 8007496:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800749a:	3402      	adds	r4, #2
 800749c:	9305      	str	r3, [sp, #20]
 800749e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007574 <_vfiprintf_r+0x22c>
 80074a2:	7821      	ldrb	r1, [r4, #0]
 80074a4:	2203      	movs	r2, #3
 80074a6:	4650      	mov	r0, sl
 80074a8:	f7f8 feba 	bl	8000220 <memchr>
 80074ac:	b138      	cbz	r0, 80074be <_vfiprintf_r+0x176>
 80074ae:	9b04      	ldr	r3, [sp, #16]
 80074b0:	eba0 000a 	sub.w	r0, r0, sl
 80074b4:	2240      	movs	r2, #64	@ 0x40
 80074b6:	4082      	lsls	r2, r0
 80074b8:	4313      	orrs	r3, r2
 80074ba:	3401      	adds	r4, #1
 80074bc:	9304      	str	r3, [sp, #16]
 80074be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c2:	4829      	ldr	r0, [pc, #164]	@ (8007568 <_vfiprintf_r+0x220>)
 80074c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074c8:	2206      	movs	r2, #6
 80074ca:	f7f8 fea9 	bl	8000220 <memchr>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d03f      	beq.n	8007552 <_vfiprintf_r+0x20a>
 80074d2:	4b26      	ldr	r3, [pc, #152]	@ (800756c <_vfiprintf_r+0x224>)
 80074d4:	bb1b      	cbnz	r3, 800751e <_vfiprintf_r+0x1d6>
 80074d6:	9b03      	ldr	r3, [sp, #12]
 80074d8:	3307      	adds	r3, #7
 80074da:	f023 0307 	bic.w	r3, r3, #7
 80074de:	3308      	adds	r3, #8
 80074e0:	9303      	str	r3, [sp, #12]
 80074e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074e4:	443b      	add	r3, r7
 80074e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80074e8:	e76a      	b.n	80073c0 <_vfiprintf_r+0x78>
 80074ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80074ee:	460c      	mov	r4, r1
 80074f0:	2001      	movs	r0, #1
 80074f2:	e7a8      	b.n	8007446 <_vfiprintf_r+0xfe>
 80074f4:	2300      	movs	r3, #0
 80074f6:	3401      	adds	r4, #1
 80074f8:	9305      	str	r3, [sp, #20]
 80074fa:	4619      	mov	r1, r3
 80074fc:	f04f 0c0a 	mov.w	ip, #10
 8007500:	4620      	mov	r0, r4
 8007502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007506:	3a30      	subs	r2, #48	@ 0x30
 8007508:	2a09      	cmp	r2, #9
 800750a:	d903      	bls.n	8007514 <_vfiprintf_r+0x1cc>
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0c6      	beq.n	800749e <_vfiprintf_r+0x156>
 8007510:	9105      	str	r1, [sp, #20]
 8007512:	e7c4      	b.n	800749e <_vfiprintf_r+0x156>
 8007514:	fb0c 2101 	mla	r1, ip, r1, r2
 8007518:	4604      	mov	r4, r0
 800751a:	2301      	movs	r3, #1
 800751c:	e7f0      	b.n	8007500 <_vfiprintf_r+0x1b8>
 800751e:	ab03      	add	r3, sp, #12
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	462a      	mov	r2, r5
 8007524:	4b12      	ldr	r3, [pc, #72]	@ (8007570 <_vfiprintf_r+0x228>)
 8007526:	a904      	add	r1, sp, #16
 8007528:	4630      	mov	r0, r6
 800752a:	f3af 8000 	nop.w
 800752e:	4607      	mov	r7, r0
 8007530:	1c78      	adds	r0, r7, #1
 8007532:	d1d6      	bne.n	80074e2 <_vfiprintf_r+0x19a>
 8007534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007536:	07d9      	lsls	r1, r3, #31
 8007538:	d405      	bmi.n	8007546 <_vfiprintf_r+0x1fe>
 800753a:	89ab      	ldrh	r3, [r5, #12]
 800753c:	059a      	lsls	r2, r3, #22
 800753e:	d402      	bmi.n	8007546 <_vfiprintf_r+0x1fe>
 8007540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007542:	f7ff fc6f 	bl	8006e24 <__retarget_lock_release_recursive>
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	065b      	lsls	r3, r3, #25
 800754a:	f53f af1f 	bmi.w	800738c <_vfiprintf_r+0x44>
 800754e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007550:	e71e      	b.n	8007390 <_vfiprintf_r+0x48>
 8007552:	ab03      	add	r3, sp, #12
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	462a      	mov	r2, r5
 8007558:	4b05      	ldr	r3, [pc, #20]	@ (8007570 <_vfiprintf_r+0x228>)
 800755a:	a904      	add	r1, sp, #16
 800755c:	4630      	mov	r0, r6
 800755e:	f000 f879 	bl	8007654 <_printf_i>
 8007562:	e7e4      	b.n	800752e <_vfiprintf_r+0x1e6>
 8007564:	080080a9 	.word	0x080080a9
 8007568:	080080b3 	.word	0x080080b3
 800756c:	00000000 	.word	0x00000000
 8007570:	08007323 	.word	0x08007323
 8007574:	080080af 	.word	0x080080af

08007578 <_printf_common>:
 8007578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800757c:	4616      	mov	r6, r2
 800757e:	4698      	mov	r8, r3
 8007580:	688a      	ldr	r2, [r1, #8]
 8007582:	690b      	ldr	r3, [r1, #16]
 8007584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007588:	4293      	cmp	r3, r2
 800758a:	bfb8      	it	lt
 800758c:	4613      	movlt	r3, r2
 800758e:	6033      	str	r3, [r6, #0]
 8007590:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007594:	4607      	mov	r7, r0
 8007596:	460c      	mov	r4, r1
 8007598:	b10a      	cbz	r2, 800759e <_printf_common+0x26>
 800759a:	3301      	adds	r3, #1
 800759c:	6033      	str	r3, [r6, #0]
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	0699      	lsls	r1, r3, #26
 80075a2:	bf42      	ittt	mi
 80075a4:	6833      	ldrmi	r3, [r6, #0]
 80075a6:	3302      	addmi	r3, #2
 80075a8:	6033      	strmi	r3, [r6, #0]
 80075aa:	6825      	ldr	r5, [r4, #0]
 80075ac:	f015 0506 	ands.w	r5, r5, #6
 80075b0:	d106      	bne.n	80075c0 <_printf_common+0x48>
 80075b2:	f104 0a19 	add.w	sl, r4, #25
 80075b6:	68e3      	ldr	r3, [r4, #12]
 80075b8:	6832      	ldr	r2, [r6, #0]
 80075ba:	1a9b      	subs	r3, r3, r2
 80075bc:	42ab      	cmp	r3, r5
 80075be:	dc26      	bgt.n	800760e <_printf_common+0x96>
 80075c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075c4:	6822      	ldr	r2, [r4, #0]
 80075c6:	3b00      	subs	r3, #0
 80075c8:	bf18      	it	ne
 80075ca:	2301      	movne	r3, #1
 80075cc:	0692      	lsls	r2, r2, #26
 80075ce:	d42b      	bmi.n	8007628 <_printf_common+0xb0>
 80075d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075d4:	4641      	mov	r1, r8
 80075d6:	4638      	mov	r0, r7
 80075d8:	47c8      	blx	r9
 80075da:	3001      	adds	r0, #1
 80075dc:	d01e      	beq.n	800761c <_printf_common+0xa4>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	6922      	ldr	r2, [r4, #16]
 80075e2:	f003 0306 	and.w	r3, r3, #6
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	bf02      	ittt	eq
 80075ea:	68e5      	ldreq	r5, [r4, #12]
 80075ec:	6833      	ldreq	r3, [r6, #0]
 80075ee:	1aed      	subeq	r5, r5, r3
 80075f0:	68a3      	ldr	r3, [r4, #8]
 80075f2:	bf0c      	ite	eq
 80075f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075f8:	2500      	movne	r5, #0
 80075fa:	4293      	cmp	r3, r2
 80075fc:	bfc4      	itt	gt
 80075fe:	1a9b      	subgt	r3, r3, r2
 8007600:	18ed      	addgt	r5, r5, r3
 8007602:	2600      	movs	r6, #0
 8007604:	341a      	adds	r4, #26
 8007606:	42b5      	cmp	r5, r6
 8007608:	d11a      	bne.n	8007640 <_printf_common+0xc8>
 800760a:	2000      	movs	r0, #0
 800760c:	e008      	b.n	8007620 <_printf_common+0xa8>
 800760e:	2301      	movs	r3, #1
 8007610:	4652      	mov	r2, sl
 8007612:	4641      	mov	r1, r8
 8007614:	4638      	mov	r0, r7
 8007616:	47c8      	blx	r9
 8007618:	3001      	adds	r0, #1
 800761a:	d103      	bne.n	8007624 <_printf_common+0xac>
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007624:	3501      	adds	r5, #1
 8007626:	e7c6      	b.n	80075b6 <_printf_common+0x3e>
 8007628:	18e1      	adds	r1, r4, r3
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	2030      	movs	r0, #48	@ 0x30
 800762e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007632:	4422      	add	r2, r4
 8007634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800763c:	3302      	adds	r3, #2
 800763e:	e7c7      	b.n	80075d0 <_printf_common+0x58>
 8007640:	2301      	movs	r3, #1
 8007642:	4622      	mov	r2, r4
 8007644:	4641      	mov	r1, r8
 8007646:	4638      	mov	r0, r7
 8007648:	47c8      	blx	r9
 800764a:	3001      	adds	r0, #1
 800764c:	d0e6      	beq.n	800761c <_printf_common+0xa4>
 800764e:	3601      	adds	r6, #1
 8007650:	e7d9      	b.n	8007606 <_printf_common+0x8e>
	...

08007654 <_printf_i>:
 8007654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	7e0f      	ldrb	r7, [r1, #24]
 800765a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800765c:	2f78      	cmp	r7, #120	@ 0x78
 800765e:	4691      	mov	r9, r2
 8007660:	4680      	mov	r8, r0
 8007662:	460c      	mov	r4, r1
 8007664:	469a      	mov	sl, r3
 8007666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800766a:	d807      	bhi.n	800767c <_printf_i+0x28>
 800766c:	2f62      	cmp	r7, #98	@ 0x62
 800766e:	d80a      	bhi.n	8007686 <_printf_i+0x32>
 8007670:	2f00      	cmp	r7, #0
 8007672:	f000 80d1 	beq.w	8007818 <_printf_i+0x1c4>
 8007676:	2f58      	cmp	r7, #88	@ 0x58
 8007678:	f000 80b8 	beq.w	80077ec <_printf_i+0x198>
 800767c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007684:	e03a      	b.n	80076fc <_printf_i+0xa8>
 8007686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800768a:	2b15      	cmp	r3, #21
 800768c:	d8f6      	bhi.n	800767c <_printf_i+0x28>
 800768e:	a101      	add	r1, pc, #4	@ (adr r1, 8007694 <_printf_i+0x40>)
 8007690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007694:	080076ed 	.word	0x080076ed
 8007698:	08007701 	.word	0x08007701
 800769c:	0800767d 	.word	0x0800767d
 80076a0:	0800767d 	.word	0x0800767d
 80076a4:	0800767d 	.word	0x0800767d
 80076a8:	0800767d 	.word	0x0800767d
 80076ac:	08007701 	.word	0x08007701
 80076b0:	0800767d 	.word	0x0800767d
 80076b4:	0800767d 	.word	0x0800767d
 80076b8:	0800767d 	.word	0x0800767d
 80076bc:	0800767d 	.word	0x0800767d
 80076c0:	080077ff 	.word	0x080077ff
 80076c4:	0800772b 	.word	0x0800772b
 80076c8:	080077b9 	.word	0x080077b9
 80076cc:	0800767d 	.word	0x0800767d
 80076d0:	0800767d 	.word	0x0800767d
 80076d4:	08007821 	.word	0x08007821
 80076d8:	0800767d 	.word	0x0800767d
 80076dc:	0800772b 	.word	0x0800772b
 80076e0:	0800767d 	.word	0x0800767d
 80076e4:	0800767d 	.word	0x0800767d
 80076e8:	080077c1 	.word	0x080077c1
 80076ec:	6833      	ldr	r3, [r6, #0]
 80076ee:	1d1a      	adds	r2, r3, #4
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6032      	str	r2, [r6, #0]
 80076f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076fc:	2301      	movs	r3, #1
 80076fe:	e09c      	b.n	800783a <_printf_i+0x1e6>
 8007700:	6833      	ldr	r3, [r6, #0]
 8007702:	6820      	ldr	r0, [r4, #0]
 8007704:	1d19      	adds	r1, r3, #4
 8007706:	6031      	str	r1, [r6, #0]
 8007708:	0606      	lsls	r6, r0, #24
 800770a:	d501      	bpl.n	8007710 <_printf_i+0xbc>
 800770c:	681d      	ldr	r5, [r3, #0]
 800770e:	e003      	b.n	8007718 <_printf_i+0xc4>
 8007710:	0645      	lsls	r5, r0, #25
 8007712:	d5fb      	bpl.n	800770c <_printf_i+0xb8>
 8007714:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007718:	2d00      	cmp	r5, #0
 800771a:	da03      	bge.n	8007724 <_printf_i+0xd0>
 800771c:	232d      	movs	r3, #45	@ 0x2d
 800771e:	426d      	negs	r5, r5
 8007720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007724:	4858      	ldr	r0, [pc, #352]	@ (8007888 <_printf_i+0x234>)
 8007726:	230a      	movs	r3, #10
 8007728:	e011      	b.n	800774e <_printf_i+0xfa>
 800772a:	6821      	ldr	r1, [r4, #0]
 800772c:	6833      	ldr	r3, [r6, #0]
 800772e:	0608      	lsls	r0, r1, #24
 8007730:	f853 5b04 	ldr.w	r5, [r3], #4
 8007734:	d402      	bmi.n	800773c <_printf_i+0xe8>
 8007736:	0649      	lsls	r1, r1, #25
 8007738:	bf48      	it	mi
 800773a:	b2ad      	uxthmi	r5, r5
 800773c:	2f6f      	cmp	r7, #111	@ 0x6f
 800773e:	4852      	ldr	r0, [pc, #328]	@ (8007888 <_printf_i+0x234>)
 8007740:	6033      	str	r3, [r6, #0]
 8007742:	bf14      	ite	ne
 8007744:	230a      	movne	r3, #10
 8007746:	2308      	moveq	r3, #8
 8007748:	2100      	movs	r1, #0
 800774a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800774e:	6866      	ldr	r6, [r4, #4]
 8007750:	60a6      	str	r6, [r4, #8]
 8007752:	2e00      	cmp	r6, #0
 8007754:	db05      	blt.n	8007762 <_printf_i+0x10e>
 8007756:	6821      	ldr	r1, [r4, #0]
 8007758:	432e      	orrs	r6, r5
 800775a:	f021 0104 	bic.w	r1, r1, #4
 800775e:	6021      	str	r1, [r4, #0]
 8007760:	d04b      	beq.n	80077fa <_printf_i+0x1a6>
 8007762:	4616      	mov	r6, r2
 8007764:	fbb5 f1f3 	udiv	r1, r5, r3
 8007768:	fb03 5711 	mls	r7, r3, r1, r5
 800776c:	5dc7      	ldrb	r7, [r0, r7]
 800776e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007772:	462f      	mov	r7, r5
 8007774:	42bb      	cmp	r3, r7
 8007776:	460d      	mov	r5, r1
 8007778:	d9f4      	bls.n	8007764 <_printf_i+0x110>
 800777a:	2b08      	cmp	r3, #8
 800777c:	d10b      	bne.n	8007796 <_printf_i+0x142>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	07df      	lsls	r7, r3, #31
 8007782:	d508      	bpl.n	8007796 <_printf_i+0x142>
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	6861      	ldr	r1, [r4, #4]
 8007788:	4299      	cmp	r1, r3
 800778a:	bfde      	ittt	le
 800778c:	2330      	movle	r3, #48	@ 0x30
 800778e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007792:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007796:	1b92      	subs	r2, r2, r6
 8007798:	6122      	str	r2, [r4, #16]
 800779a:	f8cd a000 	str.w	sl, [sp]
 800779e:	464b      	mov	r3, r9
 80077a0:	aa03      	add	r2, sp, #12
 80077a2:	4621      	mov	r1, r4
 80077a4:	4640      	mov	r0, r8
 80077a6:	f7ff fee7 	bl	8007578 <_printf_common>
 80077aa:	3001      	adds	r0, #1
 80077ac:	d14a      	bne.n	8007844 <_printf_i+0x1f0>
 80077ae:	f04f 30ff 	mov.w	r0, #4294967295
 80077b2:	b004      	add	sp, #16
 80077b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	f043 0320 	orr.w	r3, r3, #32
 80077be:	6023      	str	r3, [r4, #0]
 80077c0:	4832      	ldr	r0, [pc, #200]	@ (800788c <_printf_i+0x238>)
 80077c2:	2778      	movs	r7, #120	@ 0x78
 80077c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	6831      	ldr	r1, [r6, #0]
 80077cc:	061f      	lsls	r7, r3, #24
 80077ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80077d2:	d402      	bmi.n	80077da <_printf_i+0x186>
 80077d4:	065f      	lsls	r7, r3, #25
 80077d6:	bf48      	it	mi
 80077d8:	b2ad      	uxthmi	r5, r5
 80077da:	6031      	str	r1, [r6, #0]
 80077dc:	07d9      	lsls	r1, r3, #31
 80077de:	bf44      	itt	mi
 80077e0:	f043 0320 	orrmi.w	r3, r3, #32
 80077e4:	6023      	strmi	r3, [r4, #0]
 80077e6:	b11d      	cbz	r5, 80077f0 <_printf_i+0x19c>
 80077e8:	2310      	movs	r3, #16
 80077ea:	e7ad      	b.n	8007748 <_printf_i+0xf4>
 80077ec:	4826      	ldr	r0, [pc, #152]	@ (8007888 <_printf_i+0x234>)
 80077ee:	e7e9      	b.n	80077c4 <_printf_i+0x170>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	f023 0320 	bic.w	r3, r3, #32
 80077f6:	6023      	str	r3, [r4, #0]
 80077f8:	e7f6      	b.n	80077e8 <_printf_i+0x194>
 80077fa:	4616      	mov	r6, r2
 80077fc:	e7bd      	b.n	800777a <_printf_i+0x126>
 80077fe:	6833      	ldr	r3, [r6, #0]
 8007800:	6825      	ldr	r5, [r4, #0]
 8007802:	6961      	ldr	r1, [r4, #20]
 8007804:	1d18      	adds	r0, r3, #4
 8007806:	6030      	str	r0, [r6, #0]
 8007808:	062e      	lsls	r6, r5, #24
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	d501      	bpl.n	8007812 <_printf_i+0x1be>
 800780e:	6019      	str	r1, [r3, #0]
 8007810:	e002      	b.n	8007818 <_printf_i+0x1c4>
 8007812:	0668      	lsls	r0, r5, #25
 8007814:	d5fb      	bpl.n	800780e <_printf_i+0x1ba>
 8007816:	8019      	strh	r1, [r3, #0]
 8007818:	2300      	movs	r3, #0
 800781a:	6123      	str	r3, [r4, #16]
 800781c:	4616      	mov	r6, r2
 800781e:	e7bc      	b.n	800779a <_printf_i+0x146>
 8007820:	6833      	ldr	r3, [r6, #0]
 8007822:	1d1a      	adds	r2, r3, #4
 8007824:	6032      	str	r2, [r6, #0]
 8007826:	681e      	ldr	r6, [r3, #0]
 8007828:	6862      	ldr	r2, [r4, #4]
 800782a:	2100      	movs	r1, #0
 800782c:	4630      	mov	r0, r6
 800782e:	f7f8 fcf7 	bl	8000220 <memchr>
 8007832:	b108      	cbz	r0, 8007838 <_printf_i+0x1e4>
 8007834:	1b80      	subs	r0, r0, r6
 8007836:	6060      	str	r0, [r4, #4]
 8007838:	6863      	ldr	r3, [r4, #4]
 800783a:	6123      	str	r3, [r4, #16]
 800783c:	2300      	movs	r3, #0
 800783e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007842:	e7aa      	b.n	800779a <_printf_i+0x146>
 8007844:	6923      	ldr	r3, [r4, #16]
 8007846:	4632      	mov	r2, r6
 8007848:	4649      	mov	r1, r9
 800784a:	4640      	mov	r0, r8
 800784c:	47d0      	blx	sl
 800784e:	3001      	adds	r0, #1
 8007850:	d0ad      	beq.n	80077ae <_printf_i+0x15a>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	079b      	lsls	r3, r3, #30
 8007856:	d413      	bmi.n	8007880 <_printf_i+0x22c>
 8007858:	68e0      	ldr	r0, [r4, #12]
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	4298      	cmp	r0, r3
 800785e:	bfb8      	it	lt
 8007860:	4618      	movlt	r0, r3
 8007862:	e7a6      	b.n	80077b2 <_printf_i+0x15e>
 8007864:	2301      	movs	r3, #1
 8007866:	4632      	mov	r2, r6
 8007868:	4649      	mov	r1, r9
 800786a:	4640      	mov	r0, r8
 800786c:	47d0      	blx	sl
 800786e:	3001      	adds	r0, #1
 8007870:	d09d      	beq.n	80077ae <_printf_i+0x15a>
 8007872:	3501      	adds	r5, #1
 8007874:	68e3      	ldr	r3, [r4, #12]
 8007876:	9903      	ldr	r1, [sp, #12]
 8007878:	1a5b      	subs	r3, r3, r1
 800787a:	42ab      	cmp	r3, r5
 800787c:	dcf2      	bgt.n	8007864 <_printf_i+0x210>
 800787e:	e7eb      	b.n	8007858 <_printf_i+0x204>
 8007880:	2500      	movs	r5, #0
 8007882:	f104 0619 	add.w	r6, r4, #25
 8007886:	e7f5      	b.n	8007874 <_printf_i+0x220>
 8007888:	080080ba 	.word	0x080080ba
 800788c:	080080cb 	.word	0x080080cb

08007890 <__sflush_r>:
 8007890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007898:	0716      	lsls	r6, r2, #28
 800789a:	4605      	mov	r5, r0
 800789c:	460c      	mov	r4, r1
 800789e:	d454      	bmi.n	800794a <__sflush_r+0xba>
 80078a0:	684b      	ldr	r3, [r1, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	dc02      	bgt.n	80078ac <__sflush_r+0x1c>
 80078a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	dd48      	ble.n	800793e <__sflush_r+0xae>
 80078ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078ae:	2e00      	cmp	r6, #0
 80078b0:	d045      	beq.n	800793e <__sflush_r+0xae>
 80078b2:	2300      	movs	r3, #0
 80078b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078b8:	682f      	ldr	r7, [r5, #0]
 80078ba:	6a21      	ldr	r1, [r4, #32]
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	d030      	beq.n	8007922 <__sflush_r+0x92>
 80078c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	0759      	lsls	r1, r3, #29
 80078c6:	d505      	bpl.n	80078d4 <__sflush_r+0x44>
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	1ad2      	subs	r2, r2, r3
 80078cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078ce:	b10b      	cbz	r3, 80078d4 <__sflush_r+0x44>
 80078d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80078d2:	1ad2      	subs	r2, r2, r3
 80078d4:	2300      	movs	r3, #0
 80078d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078d8:	6a21      	ldr	r1, [r4, #32]
 80078da:	4628      	mov	r0, r5
 80078dc:	47b0      	blx	r6
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	89a3      	ldrh	r3, [r4, #12]
 80078e2:	d106      	bne.n	80078f2 <__sflush_r+0x62>
 80078e4:	6829      	ldr	r1, [r5, #0]
 80078e6:	291d      	cmp	r1, #29
 80078e8:	d82b      	bhi.n	8007942 <__sflush_r+0xb2>
 80078ea:	4a2a      	ldr	r2, [pc, #168]	@ (8007994 <__sflush_r+0x104>)
 80078ec:	40ca      	lsrs	r2, r1
 80078ee:	07d6      	lsls	r6, r2, #31
 80078f0:	d527      	bpl.n	8007942 <__sflush_r+0xb2>
 80078f2:	2200      	movs	r2, #0
 80078f4:	6062      	str	r2, [r4, #4]
 80078f6:	04d9      	lsls	r1, r3, #19
 80078f8:	6922      	ldr	r2, [r4, #16]
 80078fa:	6022      	str	r2, [r4, #0]
 80078fc:	d504      	bpl.n	8007908 <__sflush_r+0x78>
 80078fe:	1c42      	adds	r2, r0, #1
 8007900:	d101      	bne.n	8007906 <__sflush_r+0x76>
 8007902:	682b      	ldr	r3, [r5, #0]
 8007904:	b903      	cbnz	r3, 8007908 <__sflush_r+0x78>
 8007906:	6560      	str	r0, [r4, #84]	@ 0x54
 8007908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800790a:	602f      	str	r7, [r5, #0]
 800790c:	b1b9      	cbz	r1, 800793e <__sflush_r+0xae>
 800790e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007912:	4299      	cmp	r1, r3
 8007914:	d002      	beq.n	800791c <__sflush_r+0x8c>
 8007916:	4628      	mov	r0, r5
 8007918:	f7ff fa9c 	bl	8006e54 <_free_r>
 800791c:	2300      	movs	r3, #0
 800791e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007920:	e00d      	b.n	800793e <__sflush_r+0xae>
 8007922:	2301      	movs	r3, #1
 8007924:	4628      	mov	r0, r5
 8007926:	47b0      	blx	r6
 8007928:	4602      	mov	r2, r0
 800792a:	1c50      	adds	r0, r2, #1
 800792c:	d1c9      	bne.n	80078c2 <__sflush_r+0x32>
 800792e:	682b      	ldr	r3, [r5, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0c6      	beq.n	80078c2 <__sflush_r+0x32>
 8007934:	2b1d      	cmp	r3, #29
 8007936:	d001      	beq.n	800793c <__sflush_r+0xac>
 8007938:	2b16      	cmp	r3, #22
 800793a:	d11e      	bne.n	800797a <__sflush_r+0xea>
 800793c:	602f      	str	r7, [r5, #0]
 800793e:	2000      	movs	r0, #0
 8007940:	e022      	b.n	8007988 <__sflush_r+0xf8>
 8007942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007946:	b21b      	sxth	r3, r3
 8007948:	e01b      	b.n	8007982 <__sflush_r+0xf2>
 800794a:	690f      	ldr	r7, [r1, #16]
 800794c:	2f00      	cmp	r7, #0
 800794e:	d0f6      	beq.n	800793e <__sflush_r+0xae>
 8007950:	0793      	lsls	r3, r2, #30
 8007952:	680e      	ldr	r6, [r1, #0]
 8007954:	bf08      	it	eq
 8007956:	694b      	ldreq	r3, [r1, #20]
 8007958:	600f      	str	r7, [r1, #0]
 800795a:	bf18      	it	ne
 800795c:	2300      	movne	r3, #0
 800795e:	eba6 0807 	sub.w	r8, r6, r7
 8007962:	608b      	str	r3, [r1, #8]
 8007964:	f1b8 0f00 	cmp.w	r8, #0
 8007968:	dde9      	ble.n	800793e <__sflush_r+0xae>
 800796a:	6a21      	ldr	r1, [r4, #32]
 800796c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800796e:	4643      	mov	r3, r8
 8007970:	463a      	mov	r2, r7
 8007972:	4628      	mov	r0, r5
 8007974:	47b0      	blx	r6
 8007976:	2800      	cmp	r0, #0
 8007978:	dc08      	bgt.n	800798c <__sflush_r+0xfc>
 800797a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800797e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	f04f 30ff 	mov.w	r0, #4294967295
 8007988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800798c:	4407      	add	r7, r0
 800798e:	eba8 0800 	sub.w	r8, r8, r0
 8007992:	e7e7      	b.n	8007964 <__sflush_r+0xd4>
 8007994:	20400001 	.word	0x20400001

08007998 <_fflush_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	690b      	ldr	r3, [r1, #16]
 800799c:	4605      	mov	r5, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	b913      	cbnz	r3, 80079a8 <_fflush_r+0x10>
 80079a2:	2500      	movs	r5, #0
 80079a4:	4628      	mov	r0, r5
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	b118      	cbz	r0, 80079b2 <_fflush_r+0x1a>
 80079aa:	6a03      	ldr	r3, [r0, #32]
 80079ac:	b90b      	cbnz	r3, 80079b2 <_fflush_r+0x1a>
 80079ae:	f7fe ff8b 	bl	80068c8 <__sinit>
 80079b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0f3      	beq.n	80079a2 <_fflush_r+0xa>
 80079ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079bc:	07d0      	lsls	r0, r2, #31
 80079be:	d404      	bmi.n	80079ca <_fflush_r+0x32>
 80079c0:	0599      	lsls	r1, r3, #22
 80079c2:	d402      	bmi.n	80079ca <_fflush_r+0x32>
 80079c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079c6:	f7ff fa2c 	bl	8006e22 <__retarget_lock_acquire_recursive>
 80079ca:	4628      	mov	r0, r5
 80079cc:	4621      	mov	r1, r4
 80079ce:	f7ff ff5f 	bl	8007890 <__sflush_r>
 80079d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079d4:	07da      	lsls	r2, r3, #31
 80079d6:	4605      	mov	r5, r0
 80079d8:	d4e4      	bmi.n	80079a4 <_fflush_r+0xc>
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	059b      	lsls	r3, r3, #22
 80079de:	d4e1      	bmi.n	80079a4 <_fflush_r+0xc>
 80079e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079e2:	f7ff fa1f 	bl	8006e24 <__retarget_lock_release_recursive>
 80079e6:	e7dd      	b.n	80079a4 <_fflush_r+0xc>

080079e8 <__swhatbuf_r>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	460c      	mov	r4, r1
 80079ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f0:	2900      	cmp	r1, #0
 80079f2:	b096      	sub	sp, #88	@ 0x58
 80079f4:	4615      	mov	r5, r2
 80079f6:	461e      	mov	r6, r3
 80079f8:	da0d      	bge.n	8007a16 <__swhatbuf_r+0x2e>
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a00:	f04f 0100 	mov.w	r1, #0
 8007a04:	bf14      	ite	ne
 8007a06:	2340      	movne	r3, #64	@ 0x40
 8007a08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	6031      	str	r1, [r6, #0]
 8007a10:	602b      	str	r3, [r5, #0]
 8007a12:	b016      	add	sp, #88	@ 0x58
 8007a14:	bd70      	pop	{r4, r5, r6, pc}
 8007a16:	466a      	mov	r2, sp
 8007a18:	f000 f862 	bl	8007ae0 <_fstat_r>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	dbec      	blt.n	80079fa <__swhatbuf_r+0x12>
 8007a20:	9901      	ldr	r1, [sp, #4]
 8007a22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a2a:	4259      	negs	r1, r3
 8007a2c:	4159      	adcs	r1, r3
 8007a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a32:	e7eb      	b.n	8007a0c <__swhatbuf_r+0x24>

08007a34 <__smakebuf_r>:
 8007a34:	898b      	ldrh	r3, [r1, #12]
 8007a36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a38:	079d      	lsls	r5, r3, #30
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	d507      	bpl.n	8007a50 <__smakebuf_r+0x1c>
 8007a40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	6123      	str	r3, [r4, #16]
 8007a48:	2301      	movs	r3, #1
 8007a4a:	6163      	str	r3, [r4, #20]
 8007a4c:	b003      	add	sp, #12
 8007a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a50:	ab01      	add	r3, sp, #4
 8007a52:	466a      	mov	r2, sp
 8007a54:	f7ff ffc8 	bl	80079e8 <__swhatbuf_r>
 8007a58:	9f00      	ldr	r7, [sp, #0]
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	4639      	mov	r1, r7
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f7ff fa64 	bl	8006f2c <_malloc_r>
 8007a64:	b948      	cbnz	r0, 8007a7a <__smakebuf_r+0x46>
 8007a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a6a:	059a      	lsls	r2, r3, #22
 8007a6c:	d4ee      	bmi.n	8007a4c <__smakebuf_r+0x18>
 8007a6e:	f023 0303 	bic.w	r3, r3, #3
 8007a72:	f043 0302 	orr.w	r3, r3, #2
 8007a76:	81a3      	strh	r3, [r4, #12]
 8007a78:	e7e2      	b.n	8007a40 <__smakebuf_r+0xc>
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	6020      	str	r0, [r4, #0]
 8007a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	9b01      	ldr	r3, [sp, #4]
 8007a86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a8a:	b15b      	cbz	r3, 8007aa4 <__smakebuf_r+0x70>
 8007a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a90:	4630      	mov	r0, r6
 8007a92:	f000 f837 	bl	8007b04 <_isatty_r>
 8007a96:	b128      	cbz	r0, 8007aa4 <__smakebuf_r+0x70>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	f023 0303 	bic.w	r3, r3, #3
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	431d      	orrs	r5, r3
 8007aa8:	81a5      	strh	r5, [r4, #12]
 8007aaa:	e7cf      	b.n	8007a4c <__smakebuf_r+0x18>

08007aac <memmove>:
 8007aac:	4288      	cmp	r0, r1
 8007aae:	b510      	push	{r4, lr}
 8007ab0:	eb01 0402 	add.w	r4, r1, r2
 8007ab4:	d902      	bls.n	8007abc <memmove+0x10>
 8007ab6:	4284      	cmp	r4, r0
 8007ab8:	4623      	mov	r3, r4
 8007aba:	d807      	bhi.n	8007acc <memmove+0x20>
 8007abc:	1e43      	subs	r3, r0, #1
 8007abe:	42a1      	cmp	r1, r4
 8007ac0:	d008      	beq.n	8007ad4 <memmove+0x28>
 8007ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aca:	e7f8      	b.n	8007abe <memmove+0x12>
 8007acc:	4402      	add	r2, r0
 8007ace:	4601      	mov	r1, r0
 8007ad0:	428a      	cmp	r2, r1
 8007ad2:	d100      	bne.n	8007ad6 <memmove+0x2a>
 8007ad4:	bd10      	pop	{r4, pc}
 8007ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ade:	e7f7      	b.n	8007ad0 <memmove+0x24>

08007ae0 <_fstat_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4d07      	ldr	r5, [pc, #28]	@ (8007b00 <_fstat_r+0x20>)
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	4608      	mov	r0, r1
 8007aea:	4611      	mov	r1, r2
 8007aec:	602b      	str	r3, [r5, #0]
 8007aee:	f7f9 fabc 	bl	800106a <_fstat>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	d102      	bne.n	8007afc <_fstat_r+0x1c>
 8007af6:	682b      	ldr	r3, [r5, #0]
 8007af8:	b103      	cbz	r3, 8007afc <_fstat_r+0x1c>
 8007afa:	6023      	str	r3, [r4, #0]
 8007afc:	bd38      	pop	{r3, r4, r5, pc}
 8007afe:	bf00      	nop
 8007b00:	200082c4 	.word	0x200082c4

08007b04 <_isatty_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4d06      	ldr	r5, [pc, #24]	@ (8007b20 <_isatty_r+0x1c>)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	602b      	str	r3, [r5, #0]
 8007b10:	f7f9 fabb 	bl	800108a <_isatty>
 8007b14:	1c43      	adds	r3, r0, #1
 8007b16:	d102      	bne.n	8007b1e <_isatty_r+0x1a>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	b103      	cbz	r3, 8007b1e <_isatty_r+0x1a>
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	bd38      	pop	{r3, r4, r5, pc}
 8007b20:	200082c4 	.word	0x200082c4

08007b24 <_sbrk_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4d06      	ldr	r5, [pc, #24]	@ (8007b40 <_sbrk_r+0x1c>)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	602b      	str	r3, [r5, #0]
 8007b30:	f7f9 fac4 	bl	80010bc <_sbrk>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_sbrk_r+0x1a>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_sbrk_r+0x1a>
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	200082c4 	.word	0x200082c4

08007b44 <_realloc_r>:
 8007b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b48:	4607      	mov	r7, r0
 8007b4a:	4614      	mov	r4, r2
 8007b4c:	460d      	mov	r5, r1
 8007b4e:	b921      	cbnz	r1, 8007b5a <_realloc_r+0x16>
 8007b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b54:	4611      	mov	r1, r2
 8007b56:	f7ff b9e9 	b.w	8006f2c <_malloc_r>
 8007b5a:	b92a      	cbnz	r2, 8007b68 <_realloc_r+0x24>
 8007b5c:	f7ff f97a 	bl	8006e54 <_free_r>
 8007b60:	4625      	mov	r5, r4
 8007b62:	4628      	mov	r0, r5
 8007b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b68:	f000 f81a 	bl	8007ba0 <_malloc_usable_size_r>
 8007b6c:	4284      	cmp	r4, r0
 8007b6e:	4606      	mov	r6, r0
 8007b70:	d802      	bhi.n	8007b78 <_realloc_r+0x34>
 8007b72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b76:	d8f4      	bhi.n	8007b62 <_realloc_r+0x1e>
 8007b78:	4621      	mov	r1, r4
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	f7ff f9d6 	bl	8006f2c <_malloc_r>
 8007b80:	4680      	mov	r8, r0
 8007b82:	b908      	cbnz	r0, 8007b88 <_realloc_r+0x44>
 8007b84:	4645      	mov	r5, r8
 8007b86:	e7ec      	b.n	8007b62 <_realloc_r+0x1e>
 8007b88:	42b4      	cmp	r4, r6
 8007b8a:	4622      	mov	r2, r4
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	bf28      	it	cs
 8007b90:	4632      	movcs	r2, r6
 8007b92:	f7ff f950 	bl	8006e36 <memcpy>
 8007b96:	4629      	mov	r1, r5
 8007b98:	4638      	mov	r0, r7
 8007b9a:	f7ff f95b 	bl	8006e54 <_free_r>
 8007b9e:	e7f1      	b.n	8007b84 <_realloc_r+0x40>

08007ba0 <_malloc_usable_size_r>:
 8007ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ba4:	1f18      	subs	r0, r3, #4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bfbc      	itt	lt
 8007baa:	580b      	ldrlt	r3, [r1, r0]
 8007bac:	18c0      	addlt	r0, r0, r3
 8007bae:	4770      	bx	lr

08007bb0 <_init>:
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	bf00      	nop
 8007bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb6:	bc08      	pop	{r3}
 8007bb8:	469e      	mov	lr, r3
 8007bba:	4770      	bx	lr

08007bbc <_fini>:
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbe:	bf00      	nop
 8007bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bc2:	bc08      	pop	{r3}
 8007bc4:	469e      	mov	lr, r3
 8007bc6:	4770      	bx	lr
